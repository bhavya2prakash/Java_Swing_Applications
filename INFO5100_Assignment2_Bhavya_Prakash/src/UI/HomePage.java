/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import Business.Admin;
import Business.City;
import Business.CityCatalogue;
import Business.Community;
import Business.Doctor;
import Business.DoctorDirectory;
import Business.Hospital;
import Business.HospitalCatalogue;
import Business.House;
import Business.Patient;
import Business.PatientDirectory;
import Business.Person;
import Business.PersonDirectory;
import Business.SystemClass;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author BHAVYA PRAKASH
 */
public class HomePage extends javax.swing.JFrame {

    /**
     * Creates new form HomePage
     */
   
    String userType;
   
    SystemClass system = new SystemClass();
    PatientDirectory patientList = system.getPatientList();
    PersonDirectory personList =  system.getPersonList();
    CityCatalogue cityList = system.getCityList();
    House patientHouse;
    
    public HomePage() {
        initComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupGender = new javax.swing.ButtonGroup();
        MainFrame = new javax.swing.JPanel();
        loginPage = new javax.swing.JPanel();
        userTypeLabel = new javax.swing.JLabel();
        userTypeSelect = new javax.swing.JComboBox<>();
        usernameLabel = new javax.swing.JLabel();
        usernameTxtField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        loginBtn = new javax.swing.JButton();
        registrationLink = new javax.swing.JLabel();
        passwordTxtField = new javax.swing.JPasswordField();
        patientRegistrationPage = new javax.swing.JPanel();
        patientNameTxtField = new javax.swing.JTextField();
        patientRegisterBtn = new javax.swing.JButton();
        patientCityLabel = new javax.swing.JLabel();
        patientAgeTxtField = new javax.swing.JTextField();
        maleRadio = new javax.swing.JRadioButton();
        patientNameLabel = new javax.swing.JLabel();
        femaleRadio = new javax.swing.JRadioButton();
        patientAgeLabel = new javax.swing.JLabel();
        otherRadio = new javax.swing.JRadioButton();
        patientDOBLabel = new javax.swing.JLabel();
        patientDOB = new com.toedter.calendar.JDateChooser();
        patientGenderLabel = new javax.swing.JLabel();
        patientUsernameLabel = new javax.swing.JLabel();
        patientPasswordLabel = new javax.swing.JLabel();
        patientSetUsernameTxtField = new javax.swing.JTextField();
        cancelPatientRegistration = new javax.swing.JButton();
        patientSetPasswordTxtField = new javax.swing.JPasswordField();
        patientCommunityLabel = new javax.swing.JLabel();
        patientHouseLabel = new javax.swing.JLabel();
        cityComboBoxPatient = new javax.swing.JComboBox<>();
        communityComboBoxPatient = new javax.swing.JComboBox<>();
        houseComboBoxPatient = new javax.swing.JComboBox<>();
        patientConfirmPasswordLabel = new javax.swing.JLabel();
        patientConfirmsPasswordTxtField = new javax.swing.JPasswordField();
        patientEmailLabel = new javax.swing.JLabel();
        patientPhoneTxtField = new javax.swing.JTextField();
        patientPhoneLabel = new javax.swing.JLabel();
        patientEmailTxtField = new javax.swing.JTextField();
        patientInsuranceLabel = new javax.swing.JLabel();
        patientInsuranceTxtField = new javax.swing.JTextField();
        systemAdminHome = new javax.swing.JPanel();
        adminSplit = new javax.swing.JSplitPane();
        controlAdmin = new javax.swing.JPanel();
        manageCityBtn = new javax.swing.JButton();
        manageHouseBtn = new javax.swing.JButton();
        manageCommunityBtn = new javax.swing.JButton();
        manageDoctorBtn = new javax.swing.JButton();
        manageHospitalBtn = new javax.swing.JButton();
        managePatientBtn = new javax.swing.JButton();
        adminLogOut = new javax.swing.JButton();
        viewAdmin = new javax.swing.JPanel();
        welcomeAdmin = new javax.swing.JLabel();
        manageCitiesPanel = new javax.swing.JPanel();
        addCityLabel = new javax.swing.JLabel();
        addNewCityTxtField = new javax.swing.JTextField();
        addNewCityBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        cititsTable = new javax.swing.JTable();
        updateCityNameBtn = new javax.swing.JButton();
        deleteCityBtn = new javax.swing.JButton();
        updateCityNameLabel = new javax.swing.JLabel();
        updateCityNameTxtField = new javax.swing.JTextField();
        updateCityBtn = new javax.swing.JButton();
        patientHome = new javax.swing.JPanel();
        welcomePatient = new javax.swing.JLabel();
        manageCommunitiesPanel = new javax.swing.JPanel();
        addCommunityLabel = new javax.swing.JLabel();
        addCommunityTxtField = new javax.swing.JTextField();
        addCommunityAdminUsernameLabel = new javax.swing.JLabel();
        addCommunityAdminUsernameTxtField = new javax.swing.JTextField();
        addCommunityAdminPasswordLabel = new javax.swing.JLabel();
        communityAdminPasswordTxtField = new javax.swing.JPasswordField();
        citiesComboBox = new javax.swing.JComboBox<>();
        addCommunityBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        communityTable = new javax.swing.JTable();
        updateCommunityBtn = new javax.swing.JButton();
        deleteCommunityBtn = new javax.swing.JButton();
        manageHospitalsPanel = new javax.swing.JPanel();
        cityComboBoxHospital = new javax.swing.JComboBox<>();
        communityComboBoxHospital = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        hospitalTable = new javax.swing.JTable();
        addHospitalLabel = new javax.swing.JLabel();
        addHospitalTxtField = new javax.swing.JTextField();
        addHospitalBtn = new javax.swing.JButton();
        updateHospitalBtn = new javax.swing.JButton();
        hospitalDeleteBtn = new javax.swing.JButton();
        addHospitalAdminUsernameLabel = new javax.swing.JLabel();
        addHospitalAdminUsernameTxtField = new javax.swing.JTextField();
        addHospitalAdminPasswordLabel = new javax.swing.JLabel();
        addHospitalAdminPasswordTxtField = new javax.swing.JTextField();
        manageHousesPanel = new javax.swing.JPanel();
        addHouseLabel = new javax.swing.JLabel();
        addHouseTxtField = new javax.swing.JTextField();
        addHouseBtn = new javax.swing.JButton();
        cityComboBoxHouse = new javax.swing.JComboBox<>();
        communityComboBoxHouse = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        houseTable = new javax.swing.JTable();
        houseUpdateBtn = new javax.swing.JButton();
        houseDeleteBtn = new javax.swing.JButton();
        manageDoctorsPanel = new javax.swing.JPanel();
        cityComboBoxDoctor = new javax.swing.JComboBox<>();
        communityComboBoxDoctor = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        doctorTable = new javax.swing.JTable();
        hospitalComboBoxDoctor = new javax.swing.JComboBox<>();
        addDoctorBtn = new javax.swing.JButton();
        addDoctorTxtField = new javax.swing.JTextField();
        addDoctorLabel = new javax.swing.JLabel();
        updateDoctorBtn = new javax.swing.JButton();
        deleteDoctorBtn = new javax.swing.JButton();
        manageEncounterHistory = new javax.swing.JPanel();
        managePatientsPanel = new javax.swing.JPanel();
        communityAdminHouse = new javax.swing.JPanel();
        communityAdminSplit = new javax.swing.JSplitPane();
        controlCommunityPanel = new javax.swing.JPanel();
        manageCommunityBttn = new javax.swing.JButton();
        manageHospitalBtnn = new javax.swing.JButton();
        manageHospitalBttn = new javax.swing.JButton();
        logoutCommunityAdmin = new javax.swing.JButton();
        viewCommunityAdminPanel = new javax.swing.JPanel();
        welcomecommunityAdmin = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MainFrame.setLayout(new java.awt.CardLayout());

        userTypeLabel.setText("User Type");

        userTypeSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select any user type", "Patient", "Doctor", "System Admin", "Hospital Admin", "Community Admin" }));
        userTypeSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTypeSelectActionPerformed(evt);
            }
        });

        usernameLabel.setText("Username");

        passwordLabel.setText("Password");

        loginBtn.setText("Login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        registrationLink.setText("Are you a new patient? Click here to create a new account");
        registrationLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                registrationLinkMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout loginPageLayout = new javax.swing.GroupLayout(loginPage);
        loginPage.setLayout(loginPageLayout);
        loginPageLayout.setHorizontalGroup(
            loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPageLayout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginPageLayout.createSequentialGroup()
                        .addComponent(registrationLink, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(loginPageLayout.createSequentialGroup()
                        .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(loginPageLayout.createSequentialGroup()
                                .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(userTypeLabel)
                                    .addComponent(usernameLabel))
                                .addGap(59, 59, 59)
                                .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(usernameTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
                                    .addComponent(userTypeSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(loginPageLayout.createSequentialGroup()
                                .addComponent(passwordLabel)
                                .addGap(61, 61, 61)
                                .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(loginPageLayout.createSequentialGroup()
                                        .addComponent(loginBtn)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(passwordTxtField))))
                        .addGap(80, 80, 80))))
        );
        loginPageLayout.setVerticalGroup(
            loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPageLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userTypeLabel)
                    .addComponent(userTypeSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(usernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(loginBtn)
                .addGap(27, 27, 27)
                .addComponent(registrationLink)
                .addContainerGap(318, Short.MAX_VALUE))
        );

        MainFrame.add(loginPage, "card2");

        patientRegisterBtn.setText("Register");
        patientRegisterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientRegisterBtnActionPerformed(evt);
            }
        });

        patientCityLabel.setText("Select your city");

        buttonGroupGender.add(maleRadio);
        maleRadio.setText("Male");

        patientNameLabel.setText("Name");

        buttonGroupGender.add(femaleRadio);
        femaleRadio.setText("Female");

        patientAgeLabel.setText("Age");

        buttonGroupGender.add(otherRadio);
        otherRadio.setText("Other");

        patientDOBLabel.setText("DOB");

        patientGenderLabel.setText("Gender");

        patientUsernameLabel.setText("Username");

        patientPasswordLabel.setText("Password");

        cancelPatientRegistration.setText("Cancel");
        cancelPatientRegistration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelPatientRegistrationActionPerformed(evt);
            }
        });

        patientCommunityLabel.setText("Select your community");

        patientHouseLabel.setText("Select your house");

        cityComboBoxPatient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cityComboBoxPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxPatientActionPerformed(evt);
            }
        });

        communityComboBoxPatient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        communityComboBoxPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboBoxPatientActionPerformed(evt);
            }
        });

        houseComboBoxPatient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        houseComboBoxPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseComboBoxPatientActionPerformed(evt);
            }
        });

        patientConfirmPasswordLabel.setText("Confirm Password");

        patientEmailLabel.setText("Contact Email");

        patientPhoneLabel.setText("Contact Number");

        patientEmailTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientEmailTxtFieldActionPerformed(evt);
            }
        });

        patientInsuranceLabel.setText("Health Insurance Plan");

        javax.swing.GroupLayout patientRegistrationPageLayout = new javax.swing.GroupLayout(patientRegistrationPage);
        patientRegistrationPage.setLayout(patientRegistrationPageLayout);
        patientRegistrationPageLayout.setHorizontalGroup(
            patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, patientRegistrationPageLayout.createSequentialGroup()
                        .addComponent(patientDOBLabel)
                        .addGap(225, 225, 225))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(patientAgeLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                                .addComponent(patientNameLabel)
                                .addGap(273, 273, 273)))
                        .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                            .addComponent(patientGenderLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(patientNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                                    .addComponent(maleRadio)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(femaleRadio)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(otherRadio))
                                .addComponent(patientAgeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(patientDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                        .addComponent(patientCommunityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(communityComboBoxPatient, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(135, 135, 135))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientRegistrationPageLayout.createSequentialGroup()
                        .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, patientRegistrationPageLayout.createSequentialGroup()
                                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientUsernameLabel)
                                    .addComponent(patientPasswordLabel))
                                .addGap(78, 78, 78)
                                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                                        .addComponent(patientRegisterBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                                        .addComponent(cancelPatientRegistration)
                                        .addGap(129, 129, 129))
                                    .addComponent(patientSetUsernameTxtField)
                                    .addComponent(patientSetPasswordTxtField)
                                    .addComponent(patientConfirmsPasswordTxtField)))
                            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                                .addComponent(patientHouseLabel)
                                .addGap(38, 38, 38)
                                .addComponent(houseComboBoxPatient, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, patientRegistrationPageLayout.createSequentialGroup()
                                .addComponent(patientCityLabel)
                                .addGap(52, 52, 52)
                                .addComponent(cityComboBoxPatient, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(44, 44, 44))
                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                        .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                                .addComponent(patientPhoneLabel)
                                .addGap(18, 18, 18)
                                .addComponent(patientPhoneTxtField))
                            .addComponent(patientConfirmPasswordLabel)
                            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientInsuranceLabel)
                                    .addComponent(patientEmailLabel))
                                .addGap(33, 33, 33)
                                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientEmailTxtField)
                                    .addComponent(patientInsuranceTxtField))))
                        .addGap(70, 70, 70))))
        );
        patientRegistrationPageLayout.setVerticalGroup(
            patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientNameLabel)
                    .addComponent(patientNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientAgeLabel)
                    .addComponent(patientAgeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientGenderLabel)
                    .addComponent(maleRadio)
                    .addComponent(femaleRadio)
                    .addComponent(otherRadio))
                .addGap(9, 9, 9)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(patientDOBLabel)
                    .addComponent(patientDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientPhoneLabel)
                    .addComponent(patientPhoneTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientEmailLabel)
                    .addComponent(patientEmailTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientInsuranceLabel)
                    .addComponent(patientInsuranceTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientCityLabel)
                    .addComponent(cityComboBoxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientCommunityLabel)
                    .addComponent(communityComboBoxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientHouseLabel)
                    .addComponent(houseComboBoxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientSetUsernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientUsernameLabel))
                .addGap(18, 18, 18)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(patientPasswordLabel)
                    .addComponent(patientSetPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientConfirmPasswordLabel)
                    .addComponent(patientConfirmsPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelPatientRegistration)
                    .addComponent(patientRegisterBtn))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        MainFrame.add(patientRegistrationPage, "card3");

        manageCityBtn.setText("Manage Cities");
        manageCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageCityBtnActionPerformed(evt);
            }
        });

        manageHouseBtn.setText("Manage Houses");
        manageHouseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageHouseBtnActionPerformed(evt);
            }
        });

        manageCommunityBtn.setText("Manage Communities");
        manageCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageCommunityBtnActionPerformed(evt);
            }
        });

        manageDoctorBtn.setText("Manage Doctors");
        manageDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageDoctorBtnActionPerformed(evt);
            }
        });

        manageHospitalBtn.setText("Manage Hospitals");
        manageHospitalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageHospitalBtnActionPerformed(evt);
            }
        });

        managePatientBtn.setText("Manage Patients");

        adminLogOut.setText("Log Out");
        adminLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminLogOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlAdminLayout = new javax.swing.GroupLayout(controlAdmin);
        controlAdmin.setLayout(controlAdminLayout);
        controlAdminLayout.setHorizontalGroup(
            controlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlAdminLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(manageCommunityBtn)
                .addContainerGap())
            .addGroup(controlAdminLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(controlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(managePatientBtn)
                    .addComponent(manageDoctorBtn)
                    .addGroup(controlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(manageHospitalBtn)
                        .addGroup(controlAdminLayout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(manageHouseBtn)))
                    .addGroup(controlAdminLayout.createSequentialGroup()
                        .addComponent(adminLogOut)
                        .addGap(27, 27, 27)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(controlAdminLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(manageCityBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(23, 23, 23))
        );
        controlAdminLayout.setVerticalGroup(
            controlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlAdminLayout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(manageCityBtn)
                .addGap(18, 18, 18)
                .addComponent(manageCommunityBtn)
                .addGap(12, 12, 12)
                .addComponent(manageHouseBtn)
                .addGap(18, 18, 18)
                .addComponent(manageHospitalBtn)
                .addGap(18, 18, 18)
                .addComponent(manageDoctorBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(managePatientBtn)
                .addGap(35, 35, 35)
                .addComponent(adminLogOut)
                .addContainerGap(300, Short.MAX_VALUE))
        );

        adminSplit.setLeftComponent(controlAdmin);

        viewAdmin.setLayout(new java.awt.CardLayout());

        welcomeAdmin.setText("Welcome Admin");
        viewAdmin.add(welcomeAdmin, "card2");

        adminSplit.setRightComponent(viewAdmin);

        javax.swing.GroupLayout systemAdminHomeLayout = new javax.swing.GroupLayout(systemAdminHome);
        systemAdminHome.setLayout(systemAdminHomeLayout);
        systemAdminHomeLayout.setHorizontalGroup(
            systemAdminHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminSplit, javax.swing.GroupLayout.DEFAULT_SIZE, 716, Short.MAX_VALUE)
        );
        systemAdminHomeLayout.setVerticalGroup(
            systemAdminHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminSplit, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        MainFrame.add(systemAdminHome, "card4");

        addCityLabel.setText("Add a new City");

        addNewCityBtn.setText("Add");
        addNewCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewCityBtnActionPerformed(evt);
            }
        });

        cititsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sn No.", "Cities"
            }
        ));
        jScrollPane1.setViewportView(cititsTable);

        updateCityNameBtn.setText("Update City Name");
        updateCityNameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCityNameBtnActionPerformed(evt);
            }
        });

        deleteCityBtn.setText("Delete City");
        deleteCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCityBtnActionPerformed(evt);
            }
        });

        updateCityNameLabel.setText("Update City Name");

        updateCityBtn.setText("Update");
        updateCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCityBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageCitiesPanelLayout = new javax.swing.GroupLayout(manageCitiesPanel);
        manageCitiesPanel.setLayout(manageCitiesPanelLayout);
        manageCitiesPanelLayout.setHorizontalGroup(
            manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                        .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(updateCityNameLabel)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(deleteCityBtn))
                            .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateCityNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(updateCityBtn))
                            .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(updateCityNameBtn))))
                    .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                        .addComponent(addCityLabel)
                        .addGap(18, 18, 18)
                        .addComponent(addNewCityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addNewCityBtn)))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        manageCitiesPanelLayout.setVerticalGroup(
            manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNewCityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addNewCityBtn)
                    .addComponent(addCityLabel))
                .addGap(18, 18, 18)
                .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(updateCityNameBtn)
                        .addGap(18, 18, 18)
                        .addComponent(deleteCityBtn)))
                .addGap(14, 14, 14)
                .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateCityNameLabel)
                    .addComponent(updateCityNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateCityBtn))
                .addContainerGap(368, Short.MAX_VALUE))
        );

        MainFrame.add(manageCitiesPanel, "card6");

        welcomePatient.setText("Welcome");

        javax.swing.GroupLayout patientHomeLayout = new javax.swing.GroupLayout(patientHome);
        patientHome.setLayout(patientHomeLayout);
        patientHomeLayout.setHorizontalGroup(
            patientHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientHomeLayout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(welcomePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(475, Short.MAX_VALUE))
        );
        patientHomeLayout.setVerticalGroup(
            patientHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientHomeLayout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(welcomePatient)
                .addContainerGap(530, Short.MAX_VALUE))
        );

        MainFrame.add(patientHome, "card5");

        addCommunityLabel.setText("Community Name");

        addCommunityAdminUsernameLabel.setText("Community Admin Username");

        addCommunityAdminPasswordLabel.setText("Community Admin Password");

        citiesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        citiesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                citiesComboBoxActionPerformed(evt);
            }
        });

        addCommunityBtn.setText("Add a new Community");
        addCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCommunityBtnActionPerformed(evt);
            }
        });

        communityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sn No.", "Community"
            }
        ));
        communityTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                communityTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(communityTable);

        updateCommunityBtn.setText("Update");
        updateCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCommunityBtnActionPerformed(evt);
            }
        });

        deleteCommunityBtn.setText("Delete");
        deleteCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCommunityBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageCommunitiesPanelLayout = new javax.swing.GroupLayout(manageCommunitiesPanel);
        manageCommunitiesPanel.setLayout(manageCommunitiesPanelLayout);
        manageCommunitiesPanelLayout.setHorizontalGroup(
            manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                        .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                                .addComponent(addCommunityAdminPasswordLabel)
                                .addGap(18, 18, 18)
                                .addComponent(communityAdminPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(addCommunityBtn))
                            .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                                .addComponent(addCommunityAdminUsernameLabel)
                                .addGap(18, 18, 18)
                                .addComponent(addCommunityAdminUsernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(citiesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                        .addComponent(addCommunityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addComponent(addCommunityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(311, 311, 311))
                    .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                        .addComponent(updateCommunityBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteCommunityBtn)
                        .addGap(207, 207, 207))))
        );
        manageCommunitiesPanelLayout.setVerticalGroup(
            manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageCommunitiesPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                        .addComponent(citiesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addCommunityLabel)
                            .addComponent(addCommunityTxtField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(addCommunityAdminUsernameLabel))
                    .addComponent(addCommunityAdminUsernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCommunityAdminPasswordLabel)
                    .addComponent(communityAdminPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCommunityBtn))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateCommunityBtn)
                    .addComponent(deleteCommunityBtn))
                .addContainerGap(297, Short.MAX_VALUE))
        );

        MainFrame.add(manageCommunitiesPanel, "card7");

        cityComboBoxHospital.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cityComboBoxHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxHospitalActionPerformed(evt);
            }
        });

        communityComboBoxHospital.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        communityComboBoxHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboBoxHospitalActionPerformed(evt);
            }
        });

        hospitalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sn No.", "Hospital"
            }
        ));
        hospitalTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hospitalTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(hospitalTable);

        addHospitalLabel.setText("Hospital Name");

        addHospitalBtn.setText("Add a hospital");
        addHospitalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHospitalBtnActionPerformed(evt);
            }
        });

        updateHospitalBtn.setText("Update");
        updateHospitalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateHospitalBtnActionPerformed(evt);
            }
        });

        hospitalDeleteBtn.setText("Delete");
        hospitalDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalDeleteBtnActionPerformed(evt);
            }
        });

        addHospitalAdminUsernameLabel.setText("Hospital Admin Username");

        addHospitalAdminPasswordLabel.setText("Hospital Admin Password");

        javax.swing.GroupLayout manageHospitalsPanelLayout = new javax.swing.GroupLayout(manageHospitalsPanel);
        manageHospitalsPanel.setLayout(manageHospitalsPanelLayout);
        manageHospitalsPanelLayout.setHorizontalGroup(
            manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(communityComboBoxHospital, javax.swing.GroupLayout.Alignment.LEADING, 0, 350, Short.MAX_VALUE)
                            .addComponent(cityComboBoxHospital, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                                .addComponent(addHospitalAdminPasswordLabel)
                                .addGap(18, 18, 18)
                                .addComponent(addHospitalAdminPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                                .addComponent(addHospitalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addHospitalTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(addHospitalBtn))
                            .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(addHospitalAdminUsernameLabel)
                                    .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                                        .addComponent(updateHospitalBtn)
                                        .addGap(65, 65, 65)))
                                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                                        .addGap(116, 116, 116)
                                        .addComponent(hospitalDeleteBtn))
                                    .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(addHospitalAdminUsernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(154, Short.MAX_VALUE))
        );
        manageHospitalsPanelLayout.setVerticalGroup(
            manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(cityComboBoxHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(communityComboBoxHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHospitalLabel)
                    .addComponent(addHospitalTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addHospitalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHospitalAdminUsernameLabel)
                    .addComponent(addHospitalAdminUsernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHospitalAdminPasswordLabel)
                    .addComponent(addHospitalAdminPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateHospitalBtn)
                    .addComponent(hospitalDeleteBtn))
                .addContainerGap(203, Short.MAX_VALUE))
        );

        MainFrame.add(manageHospitalsPanel, "card8");

        addHouseLabel.setText("House Name");

        addHouseBtn.setText("Add a house");
        addHouseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHouseBtnActionPerformed(evt);
            }
        });

        cityComboBoxHouse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cityComboBoxHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxHouseActionPerformed(evt);
            }
        });

        communityComboBoxHouse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        communityComboBoxHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboBoxHouseActionPerformed(evt);
            }
        });

        houseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sn No.", "House"
            }
        ));
        houseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                houseTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(houseTable);

        houseUpdateBtn.setText("Update");
        houseUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseUpdateBtnActionPerformed(evt);
            }
        });

        houseDeleteBtn.setText("Delete");
        houseDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseDeleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageHousesPanelLayout = new javax.swing.GroupLayout(manageHousesPanel);
        manageHousesPanel.setLayout(manageHousesPanelLayout);
        manageHousesPanelLayout.setHorizontalGroup(
            manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageHousesPanelLayout.createSequentialGroup()
                .addGroup(manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageHousesPanelLayout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addGroup(manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(communityComboBoxHouse, javax.swing.GroupLayout.Alignment.LEADING, 0, 350, Short.MAX_VALUE)
                            .addComponent(cityComboBoxHouse, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(manageHousesPanelLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageHousesPanelLayout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addGroup(manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageHousesPanelLayout.createSequentialGroup()
                                .addComponent(houseUpdateBtn)
                                .addGap(176, 176, 176)
                                .addComponent(houseDeleteBtn))
                            .addGroup(manageHousesPanelLayout.createSequentialGroup()
                                .addComponent(addHouseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addHouseTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(addHouseBtn)))))
                .addContainerGap(154, Short.MAX_VALUE))
        );
        manageHousesPanelLayout.setVerticalGroup(
            manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageHousesPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(cityComboBoxHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(communityComboBoxHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHouseLabel)
                    .addComponent(addHouseTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addHouseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(houseUpdateBtn)
                    .addComponent(houseDeleteBtn))
                .addContainerGap(254, Short.MAX_VALUE))
        );

        MainFrame.add(manageHousesPanel, "card9");

        cityComboBoxDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cityComboBoxDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxDoctorActionPerformed(evt);
            }
        });

        communityComboBoxDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        communityComboBoxDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboBoxDoctorActionPerformed(evt);
            }
        });

        doctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sn No.", "Doctor Name"
            }
        ));
        doctorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctorTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(doctorTable);

        hospitalComboBoxDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        hospitalComboBoxDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalComboBoxDoctorActionPerformed(evt);
            }
        });

        addDoctorBtn.setText("Add");
        addDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDoctorBtnActionPerformed(evt);
            }
        });

        addDoctorLabel.setText("Doctor");

        updateDoctorBtn.setText("Update");
        updateDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDoctorBtnActionPerformed(evt);
            }
        });

        deleteDoctorBtn.setText("Delete");
        deleteDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDoctorBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageDoctorsPanelLayout = new javax.swing.GroupLayout(manageDoctorsPanel);
        manageDoctorsPanel.setLayout(manageDoctorsPanelLayout);
        manageDoctorsPanelLayout.setHorizontalGroup(
            manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hospitalComboBoxDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(communityComboBoxDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cityComboBoxDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(addDoctorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addDoctorTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(addDoctorBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageDoctorsPanelLayout.createSequentialGroup()
                .addContainerGap(144, Short.MAX_VALUE)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addComponent(updateDoctorBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteDoctorBtn))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(120, 120, 120))
        );
        manageDoctorsPanelLayout.setVerticalGroup(
            manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(cityComboBoxDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(communityComboBoxDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(hospitalComboBoxDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addDoctorBtn)
                    .addComponent(addDoctorTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addDoctorLabel))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateDoctorBtn)
                    .addComponent(deleteDoctorBtn))
                .addContainerGap(255, Short.MAX_VALUE))
        );

        MainFrame.add(manageDoctorsPanel, "card10");

        javax.swing.GroupLayout manageEncounterHistoryLayout = new javax.swing.GroupLayout(manageEncounterHistory);
        manageEncounterHistory.setLayout(manageEncounterHistoryLayout);
        manageEncounterHistoryLayout.setHorizontalGroup(
            manageEncounterHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 716, Short.MAX_VALUE)
        );
        manageEncounterHistoryLayout.setVerticalGroup(
            manageEncounterHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );

        MainFrame.add(manageEncounterHistory, "card11");

        javax.swing.GroupLayout managePatientsPanelLayout = new javax.swing.GroupLayout(managePatientsPanel);
        managePatientsPanel.setLayout(managePatientsPanelLayout);
        managePatientsPanelLayout.setHorizontalGroup(
            managePatientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 716, Short.MAX_VALUE)
        );
        managePatientsPanelLayout.setVerticalGroup(
            managePatientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );

        MainFrame.add(managePatientsPanel, "card12");

        manageCommunityBttn.setText("Manage Community");

        manageHospitalBtnn.setText("Manage Hospital");

        manageHospitalBttn.setText("Manage Houses");

        logoutCommunityAdmin.setText("Logout");
        logoutCommunityAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutCommunityAdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlCommunityPanelLayout = new javax.swing.GroupLayout(controlCommunityPanel);
        controlCommunityPanel.setLayout(controlCommunityPanelLayout);
        controlCommunityPanelLayout.setHorizontalGroup(
            controlCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlCommunityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlCommunityPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(manageCommunityBttn))
                    .addGroup(controlCommunityPanelLayout.createSequentialGroup()
                        .addGroup(controlCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(manageHospitalBtnn)
                            .addComponent(manageHospitalBttn)
                            .addGroup(controlCommunityPanelLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(logoutCommunityAdmin)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        controlCommunityPanelLayout.setVerticalGroup(
            controlCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlCommunityPanelLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(manageCommunityBttn)
                .addGap(39, 39, 39)
                .addComponent(manageHospitalBtnn)
                .addGap(32, 32, 32)
                .addComponent(manageHospitalBttn)
                .addGap(29, 29, 29)
                .addComponent(logoutCommunityAdmin)
                .addContainerGap(366, Short.MAX_VALUE))
        );

        communityAdminSplit.setLeftComponent(controlCommunityPanel);

        welcomecommunityAdmin.setText("Welcome");

        javax.swing.GroupLayout viewCommunityAdminPanelLayout = new javax.swing.GroupLayout(viewCommunityAdminPanel);
        viewCommunityAdminPanel.setLayout(viewCommunityAdminPanelLayout);
        viewCommunityAdminPanelLayout.setHorizontalGroup(
            viewCommunityAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewCommunityAdminPanelLayout.createSequentialGroup()
                .addGap(213, 213, 213)
                .addComponent(welcomecommunityAdmin)
                .addContainerGap(299, Short.MAX_VALUE))
        );
        viewCommunityAdminPanelLayout.setVerticalGroup(
            viewCommunityAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewCommunityAdminPanelLayout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(welcomecommunityAdmin)
                .addContainerGap(498, Short.MAX_VALUE))
        );

        communityAdminSplit.setRightComponent(viewCommunityAdminPanel);

        javax.swing.GroupLayout communityAdminHouseLayout = new javax.swing.GroupLayout(communityAdminHouse);
        communityAdminHouse.setLayout(communityAdminHouseLayout);
        communityAdminHouseLayout.setHorizontalGroup(
            communityAdminHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(communityAdminSplit)
        );
        communityAdminHouseLayout.setVerticalGroup(
            communityAdminHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(communityAdminSplit, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        MainFrame.add(communityAdminHouse, "card13");

        getContentPane().add(MainFrame, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userTypeSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTypeSelectActionPerformed
        // TODO add your handling code here:
        userType = userTypeSelect.getSelectedItem().toString();
    }//GEN-LAST:event_userTypeSelectActionPerformed
     Patient loggedInPatient;
     Admin loggedInAdmin ;
    
    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        // TODO add your handling code here:

        if ("System Admin".equals(userType)){
            if (usernameTxtField.getText().equals("admin")&& passwordTxtField.getText().equals("admin") )    {
                changePanel(systemAdminHome);
            }
                
//        if("Patient".equals(userType)){
//            for(Patient p : patientList.getPatientList()){
//                if (usernameTxtField.getText().equals(p.getUsername())&& passwordTxtField.getText().equals(p.getPassword()) ){
//                 
//        
//                changePanel(patientHome); 
//                welcomePatient.setText("Welcome " + p.getName());
//        
//                }
//            }
//        }
//        else if ("System Admin".equals(userType)){
//            if (usernameTxtField.getText().equals("admin")&& passwordTxtField.getText().equals("admin") )    {
//                changePanel(systemAdminHome);
//            }
//  
//           
//             
//        }
//        else if ("Community Admin".equals(userType)){
//            for (City city :cityList.getCitytList()){
//            for (Community cm : city.getCommunityList()){
//            
//             if (usernameTxtField.getText().equals("A")&& passwordTxtField.getText().equals("A") )    {
//                 changePanel(communityAdminHouse);
//                 loggedInAdmin=cm.getAdmin();
//                 welcomecommunityAdmin.setText(cm.getCommunityName());
//            }
//             
//         }
//            }
//
//            
//  
//           
//            
//        }
        }
    }//GEN-LAST:event_loginBtnActionPerformed
    private void changePanel(javax.swing.JPanel j){
        MainFrame.removeAll();
        MainFrame.add(j);
        MainFrame.repaint();
        MainFrame.revalidate(); 
    }
    private void registrationLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registrationLinkMouseClicked
        // TODO add your handling code here:
        MainFrame.removeAll();
        MainFrame.add(patientRegistrationPage);
        MainFrame.repaint();
        MainFrame.revalidate();
        cityComboBoxPatient.removeAllItems();
        cityComboBoxPatient.addItem("City");
        cityComboBoxPatient.setSelectedItem("City"); 
        for (City c : cityList.getCitytList()){
             cityComboBoxPatient.addItem(c.getCityName());   
         }
        communityComboBoxPatient.removeAllItems();
        communityComboBoxPatient.addItem("Community");
        communityComboBoxPatient.setSelectedItem("Community"); 
        houseComboBoxPatient.removeAllItems();
        houseComboBoxPatient.addItem("Houses");
        houseComboBoxPatient.setSelectedItem("Houses"); 
    }//GEN-LAST:event_registrationLinkMouseClicked
    private void populateTable(){
         
         DefaultTableModel model = (DefaultTableModel) cititsTable.getModel();
         model.setRowCount(0);
         int i =1;
         for (City c : cityList.getCitytList()){
           
           Object [] row = new Object[2];
             row[0] = i;
             row[1] = c;
            
              model.addRow(row);
              i++;
        }
             
             
             
            
            
             
         }
    private boolean validation(String input, String regexPattern){
    Pattern pattern = Pattern.compile(regexPattern,Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(input);
        return matcher.find();}
    private void patientRegisterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientRegisterBtnActionPerformed
        // TODO add your handling code here:
        try{
            String name = patientNameTxtField.getText();
            if(name.length()==0 || !validation(name,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Name");
             return;
            }
            int age = Integer.parseInt( patientAgeTxtField.getText());
             if(!(age >= 18)){
             JOptionPane.showMessageDialog(this,"Invalid Age. Age should be above 18 yrs"); 
             return;
            }
            String gender;
            if(maleRadio.isSelected()){
                gender= "Male";
            }
            else if(femaleRadio.isSelected()){
                gender= "Female";
            }
            else if(otherRadio.isSelected()){
                    gender = "Other";
                }
             else {
                 gender = "";
             }
            if(gender.length()==0 ){
             JOptionPane.showMessageDialog(this,"Please select your gender. ");
             return;
            }
             Date dob= patientDOB.getDate();
              if(dob==null){
             JOptionPane.showMessageDialog(this,"Please select your date of birth.");
             return;
            }
             String phone=patientPhoneTxtField.getText();
             if(!validation(phone,"^\\d{10}$")){
             JOptionPane.showMessageDialog(this,"Invalid Phone Number");
             return;
            }
             String email =patientEmailTxtField.getText();
             if(email.length()==0 || !validation(email,"^(.+)@(\\S+)$")){
             JOptionPane.showMessageDialog(this,"Invalid Email");
             return;
            }
             
             String insurance = patientInsuranceTxtField.getText();
             if(insurance.length()==0 || !validation(insurance,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Insurance");
             return;
            }
             String username=patientSetUsernameTxtField.getText();
             if(username.length()==0 || !validation(insurance,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Usernam.No special character and numbers allowed ");
             return;
            }
            for(Person p:personList.getPersonList()){
                if(p.getUsername().equals(username)){
                  JOptionPane.showMessageDialog(this,"Invalid Usernam.This username already exists.");
                  return;  
                }
            }
             String password = patientSetPasswordTxtField.getText();
             if(password.length()==0 || !validation(password,"^(?![\\s.]+$)[a-zA-Z0-9@#$]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Password.Only A-Z,a-z,0-9,@,and # are allowed ");
             return;
            }
            String confirmPassword = patientConfirmsPasswordTxtField.getText();
            if(!(confirmPassword.equals(password))){
             JOptionPane.showMessageDialog(this,"Confirm Password does not match the set password");
             return;
            }
            String selectedcity = String.valueOf(cityComboBoxPatient.getSelectedItem());
            String selectedcommunity = String.valueOf(communityComboBoxPatient.getSelectedItem());
            String selectedhouse = String.valueOf(houseComboBoxPatient.getSelectedItem());
            if("City".equals(selectedcity)||"Community".equals(selectedcommunity)||"House".equals(selectedhouse)){
            JOptionPane.showMessageDialog(this,"Invalid Address. Select all the field of address.");
             return;
            }
//            
              Person person = new Person(name,age,gender,phone,email,insurance,patientHouse,dob,username,password);
              personList.addNewPerson(person);
              Patient patient = new Patient(person);
              patientList.addNewPatient(patient);
              
            
           
            JOptionPane.showMessageDialog(this,"Your patient account is successfully registered.");
            patientNameTxtField.setText("");
            patientAgeTxtField.setText("");
            buttonGroupGender.clearSelection();
            patientDOB.setCalendar(null);
            patientPhoneTxtField.setText("");
            patientEmailTxtField.setText("");
            patientInsuranceTxtField.setText("");
            patientSetUsernameTxtField.setText("");
            patientSetPasswordTxtField.setText("");
            patientConfirmsPasswordTxtField.setText("");
            changePanel(loginPage);
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, "Invalid Input. Error creating patient account");
            System.out.print(e);
           
            
        }

    }//GEN-LAST:event_patientRegisterBtnActionPerformed

    private void cancelPatientRegistrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelPatientRegistrationActionPerformed
        // TODO add your handling code here:
            patientNameTxtField.setText("");
            patientAgeTxtField.setText("");
            buttonGroupGender.clearSelection();
            patientDOB.setCalendar(null);
            patientPhoneTxtField.setText("");
            patientEmailTxtField.setText("");
            patientInsuranceTxtField.setText("");
            patientSetUsernameTxtField.setText("");
            patientSetPasswordTxtField.setText("");
            patientConfirmsPasswordTxtField.setText("");
            changePanel(loginPage);
    }//GEN-LAST:event_cancelPatientRegistrationActionPerformed

    private void manageCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageCityBtnActionPerformed
        // TODO add your handling code here:
        viewAdmin.removeAll();
        viewAdmin.add(manageCitiesPanel);
        viewAdmin.repaint();
        viewAdmin.revalidate();
        populateTable();
        updateCityNameLabel.setVisible(false);
         updateCityNameTxtField.setVisible(false);
//        adminSplit.setRightComponent(manageCitiesPanel);
    }//GEN-LAST:event_manageCityBtnActionPerformed

    private void addNewCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewCityBtnActionPerformed
        // TODO add your handling code here:
        City city = cityList.addNewCity();
        city.setCityName(addNewCityTxtField.getText());
        addNewCityTxtField.setText("");
         populateTable();
//        for (City c : cityList.getCitytList()){
//           System.out.print(c.getCityName()); 
//        }
//        Community community = city.addNewCommunity();
//        community.setCommunityName(addCommunityTxtField.getText());
//        House house = community.addNewHouse();
//        house.setHouseName();
        
        
    }//GEN-LAST:event_addNewCityBtnActionPerformed

    private void deleteCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = cititsTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to delete."); 
           return;
        }
         DefaultTableModel model = (DefaultTableModel) cititsTable.getModel();
         City selectedcity = (City)model.getValueAt(selectedRowIndex, 1);
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         cityList.deleteCity(selectedcity);
         JOptionPane.showMessageDialog(this, "City Deleted");
          populateTable();
           
         }
        
    }//GEN-LAST:event_deleteCityBtnActionPerformed
    City selectedupdatecityname;
    private void updateCityNameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCityNameBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = cititsTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to update."); 
           return;
        }
         DefaultTableModel model = (DefaultTableModel) cititsTable.getModel();
         selectedupdatecityname = (City)model.getValueAt(selectedRowIndex, 1);
         updateCityNameLabel.setVisible(true);
         updateCityNameTxtField.setVisible(true);
         updateCityNameTxtField.setText(selectedupdatecityname.getCityName());
          
        
    }//GEN-LAST:event_updateCityNameBtnActionPerformed

    private void updateCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCityBtnActionPerformed
        // TODO add your handling code here:
        selectedupdatecityname.setCityName(updateCityNameTxtField.getText());
        updateCityNameTxtField.setText("");
        populateTable();
    }//GEN-LAST:event_updateCityBtnActionPerformed
City cityCombo= new City();
    private void manageCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageCommunityBtnActionPerformed
        // TODO add your handling code here:
        viewAdmin.removeAll();
        viewAdmin.add(manageCommunitiesPanel);
        viewAdmin.repaint();
        viewAdmin.revalidate();
        citiesComboBox.removeAllItems();
        citiesComboBox.addItem("Select any city yo add a community");
        populateTable2();
         for (City c : cityList.getCitytList()){
             citiesComboBox.addItem(c.getCityName());
            
         }
          citiesComboBox.setSelectedItem("Select any city yo add a community");
        
        
    }//GEN-LAST:event_manageCommunityBtnActionPerformed
    private void populateTable2(){
    
    String selectedcity = String.valueOf(citiesComboBox.getSelectedItem());
    DefaultTableModel model = (DefaultTableModel) communityTable.getModel();
         model.setRowCount(0);
         int i =1;
         for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
        for(Community cm:cityCombo.getCommunityList()){
            Object [] row = new Object[2];
             row[0] = i;
             row[1] = cm;
            
              model.addRow(row);
              i++; 
        }
        
}
    
 
    private void addCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCommunityBtnActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(citiesComboBox.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        Community community = city.addNewCommunity();
        community.setCommunityName(addCommunityTxtField.getText());
       // Person person = new Person("A",2,"A","A","A","A");
       // Admin communityAdmin = new Admin(community,person);
        populateTable2();
       
        
    }//GEN-LAST:event_addCommunityBtnActionPerformed

    private void adminLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminLogOutActionPerformed
        // TODO add your handling code here:
        changePanel(loginPage);
    }//GEN-LAST:event_adminLogOutActionPerformed

    private void logoutCommunityAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutCommunityAdminActionPerformed
        // TODO add your handling code here:
          changePanel(loginPage);
    }//GEN-LAST:event_logoutCommunityAdminActionPerformed

    private void citiesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_citiesComboBoxActionPerformed
        // TODO add your handling code here:
        populateTable2();
    }//GEN-LAST:event_citiesComboBoxActionPerformed

    private void updateCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCommunityBtnActionPerformed
        // TODO add your handling code here:
       selectedupdatecommunity.setCommunityName(addCommunityTxtField.getText());
       populateTable2();
    }//GEN-LAST:event_updateCommunityBtnActionPerformed
 Community selectedupdatecommunity;
    private void communityTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_communityTableMouseClicked
        // TODO add your handling code here:
       int selectedRowIndex = communityTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to update."); 
           return;
        }
         DefaultTableModel model = (DefaultTableModel) communityTable.getModel();
         selectedupdatecommunity = (Community)model.getValueAt(selectedRowIndex, 1);
         addCommunityTxtField.setText(selectedupdatecommunity.getCommunityName());
         
         
    }//GEN-LAST:event_communityTableMouseClicked

    private void deleteCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCommunityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = communityTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to delete."); 
           return;
        }
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         cityCombo.deleteCommunity(selectedupdatecommunity);
         JOptionPane.showMessageDialog(this, "Community Deleted");
          populateTable2();
           
         }
        
    }//GEN-LAST:event_deleteCommunityBtnActionPerformed

    private void manageHouseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageHouseBtnActionPerformed
        // TODO add your handling code here:
        viewAdmin.removeAll();
        viewAdmin.add(manageHousesPanel);
        viewAdmin.repaint();
        viewAdmin.revalidate();
        cityComboBoxHouse.removeAllItems();
        communityComboBoxHouse.removeAllItems();
        cityComboBoxHouse.addItem("Select any city");
        communityComboBoxHouse.addItem("Select any community");
        
        
         for (City c : cityList.getCitytList()){
             cityComboBoxHouse.addItem(c.getCityName());
            
         }
          cityComboBoxHouse.setSelectedItem("Select any city");
          communityComboBoxHouse.setSelectedItem("Select any community");
    }//GEN-LAST:event_manageHouseBtnActionPerformed
    
    private void cityComboBoxHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxHouseActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxHouse.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        communityComboBoxHouse.removeAllItems();
        communityComboBoxHouse.addItem("Select any community");
        communityComboBoxHouse.setSelectedItem("Select any community");
        for (Community cm :city.getCommunityList()){
             communityComboBoxHouse.addItem(cm.getCommunityName()); 
         }
    }//GEN-LAST:event_cityComboBoxHouseActionPerformed

    private void communityComboBoxHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboBoxHouseActionPerformed
        populateTable3();
        
    }//GEN-LAST:event_communityComboBoxHouseActionPerformed

    private void addHouseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHouseBtnActionPerformed
        // TODO add your handling code here:
        String selectedcommunity = String.valueOf(communityComboBoxHouse.getSelectedItem());
        String selectedcity = String.valueOf(cityComboBoxHouse.getSelectedItem());
        for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
         Community community = new Community();
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             community=cm;
             
           }
        }
        House h = community.addNewHouse();
        h.setHouseName(addHouseTxtField.getText());
        populateTable3();
    }//GEN-LAST:event_addHouseBtnActionPerformed
    House selectedupdatehouse;
    private void houseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_houseTableMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = houseTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a house to update."); 
           return;
        }
         DefaultTableModel model = (DefaultTableModel) houseTable.getModel();
         selectedupdatehouse = (House)model.getValueAt(selectedRowIndex, 1);
         addHouseTxtField.setText(selectedupdatehouse.getHouseName());
        
    }//GEN-LAST:event_houseTableMouseClicked

    private void houseUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseUpdateBtnActionPerformed
        // TODO add your handling code here:
        selectedupdatehouse.setHouseName(addHouseTxtField.getText());
       populateTable3();
    }//GEN-LAST:event_houseUpdateBtnActionPerformed

    private void houseDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseDeleteBtnActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = houseTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to delete."); 
           return;
        }
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         communityCombo.deleteHouse(selectedupdatehouse);
         JOptionPane.showMessageDialog(this, "House Deleted");
          populateTable3();
           
         }
         
    }//GEN-LAST:event_houseDeleteBtnActionPerformed

    private void manageHospitalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageHospitalBtnActionPerformed
        // TODO add your handling code here:
        viewAdmin.removeAll();
        viewAdmin.add(manageHospitalsPanel);
        viewAdmin.repaint();
        viewAdmin.revalidate();
        cityComboBoxHospital.removeAllItems();
        communityComboBoxHospital.removeAllItems();
        cityComboBoxHospital.addItem("Select any city");
        communityComboBoxHospital.addItem("Select any community");
        
        
         for (City c : cityList.getCitytList()){
             cityComboBoxHospital.addItem(c.getCityName());
            
         }
          cityComboBoxHospital.setSelectedItem("Select any city");
          communityComboBoxHospital.setSelectedItem("Select any community");
    
    }//GEN-LAST:event_manageHospitalBtnActionPerformed

    private void cityComboBoxHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxHospitalActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxHospital.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        communityComboBoxHospital.removeAllItems();
        communityComboBoxHospital.addItem("Select any community");
        communityComboBoxHospital.setSelectedItem("Select any community");
        for (Community cm :city.getCommunityList()){
             communityComboBoxHospital.addItem(cm.getCommunityName()); 
         }
       
    }//GEN-LAST:event_cityComboBoxHospitalActionPerformed

    private void communityComboBoxHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboBoxHospitalActionPerformed
        // TODO add your handling code here:
        populateTable4();
    }//GEN-LAST:event_communityComboBoxHospitalActionPerformed
    Hospital selectedupdatehospital=new Hospital();
    private void hospitalTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hospitalTableMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = hospitalTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a hospital to update."); 
           return;
        }
         DefaultTableModel model = (DefaultTableModel) hospitalTable.getModel();
         selectedupdatehospital = (Hospital)model.getValueAt(selectedRowIndex, 1);
         addHospitalTxtField.setText(selectedupdatehospital.getHospitalName());
    }//GEN-LAST:event_hospitalTableMouseClicked

    private void addHospitalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHospitalBtnActionPerformed
        // TODO add your handling code here:
        String selectedcommunity = String.valueOf(communityComboBoxHospital.getSelectedItem());
        String selectedcity = String.valueOf(cityComboBoxHospital.getSelectedItem());
        for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
         Community community = new Community();
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             community=cm;
             
           }
        }
        HospitalCatalogue hospitalList = community.getHospitalList();
        Hospital h=hospitalList.addNewHospital();
        h.setHospitalName(addHospitalTxtField.getText());
        populateTable4();
        
    }//GEN-LAST:event_addHospitalBtnActionPerformed

    private void updateHospitalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateHospitalBtnActionPerformed
        // TODO add your handling code here:
         selectedupdatehospital.setHospitalName(addHospitalTxtField.getText());
       populateTable4();
    }//GEN-LAST:event_updateHospitalBtnActionPerformed

    private void hospitalDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalDeleteBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = hospitalTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to delete."); 
           return;
        }
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         HospitalCatalogue hospitalList = communityCombo.getHospitalList();
         hospitalList.deleteHospital(selectedupdatehospital);
         
         JOptionPane.showMessageDialog(this, "Hospital Deleted");
          populateTable4();
           
         }
         
    
    }//GEN-LAST:event_hospitalDeleteBtnActionPerformed

    private void manageDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageDoctorBtnActionPerformed
        // TODO add your handling code here:
        viewAdmin.removeAll();
        viewAdmin.add(manageDoctorsPanel);
        viewAdmin.repaint();
        viewAdmin.revalidate();
        cityComboBoxDoctor.removeAllItems();
        communityComboBoxDoctor.removeAllItems();
        hospitalComboBoxDoctor.removeAllItems();
        
        cityComboBoxDoctor.addItem("Select any city");
        communityComboBoxDoctor.addItem("Select any community");
        hospitalComboBoxDoctor.addItem("Select any hospital");
        
         for (City c : cityList.getCitytList()){
             cityComboBoxDoctor.addItem(c.getCityName());
            
         }
          cityComboBoxDoctor.setSelectedItem("Select any city");
          communityComboBoxDoctor.setSelectedItem("Select any community");
          hospitalComboBoxDoctor.setSelectedItem("Select any hospital");
    
        
    }//GEN-LAST:event_manageDoctorBtnActionPerformed

    private void cityComboBoxDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxDoctorActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxDoctor.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        communityComboBoxDoctor.removeAllItems();
        communityComboBoxDoctor.addItem("Select any community");
        communityComboBoxDoctor.setSelectedItem("Select any community");
        for (Community cm :city.getCommunityList()){
             communityComboBoxDoctor.addItem(cm.getCommunityName()); 
         }
    }//GEN-LAST:event_cityComboBoxDoctorActionPerformed

    private void communityComboBoxDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboBoxDoctorActionPerformed
        // TODO add your handling code here:
         String selectedcity = String.valueOf(cityComboBoxDoctor.getSelectedItem());
         String selectedcommunity = String.valueOf(communityComboBoxDoctor.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        Community community = new Community();
        for (Community cm :city.getCommunityList()){
            if(cm.getCommunityName().equals(selectedcommunity)){
             community = cm;
         }
        hospitalComboBoxDoctor.removeAllItems();
        hospitalComboBoxDoctor.addItem("Select any hospital");
        hospitalComboBoxDoctor.setSelectedItem("Select any hospital");
        HospitalCatalogue hospitalList = community.getHospitalList();
//        Hospital h=hospitalList.addNewHospital();
        for (Hospital h :hospitalList.getHospitalList()){
             hospitalComboBoxDoctor.addItem(h.getHospitalName()); 
         }
        }
    }//GEN-LAST:event_communityComboBoxDoctorActionPerformed
    Doctor selectedupdatedoctor;
    private void doctorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorTableMouseClicked
        // TODO add your handling code here:
     int selectedRowIndex = doctorTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a Doctor to update."); 
           return;
        }
         DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
         selectedupdatedoctor = (Doctor)model.getValueAt(selectedRowIndex, 1);
         addDoctorTxtField.setText(selectedupdatedoctor.getName());   
        
    }//GEN-LAST:event_doctorTableMouseClicked

    private void hospitalComboBoxDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalComboBoxDoctorActionPerformed
        // TODO add your handling code here:
        populateTable5();
    }//GEN-LAST:event_hospitalComboBoxDoctorActionPerformed

    private void updateDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDoctorBtnActionPerformed
        // TODO add your handling code here:
       selectedupdatedoctor.setName(addDoctorTxtField.getText());
       populateTable5();
    }//GEN-LAST:event_updateDoctorBtnActionPerformed

    private void deleteDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDoctorBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = doctorTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to delete."); 
           return;
        }
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         DoctorDirectory doctorList = hospitalCombo.getDoctorList();
         doctorList.deleteDoctor(selectedupdatedoctor);
         
         JOptionPane.showMessageDialog(this, "Hospital Deleted");
          populateTable5();
           
         }
    }//GEN-LAST:event_deleteDoctorBtnActionPerformed

    private void addDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDoctorBtnActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxDoctor.getSelectedItem());
        String selectedcommunity = String.valueOf(communityComboBoxDoctor.getSelectedItem());
        String selectedhospital = String.valueOf(hospitalComboBoxDoctor.getSelectedItem());
        
        for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
         Community community = new Community();
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             community=cm;
             
           }
        }
        HospitalCatalogue hospitalList = community.getHospitalList();
        
        
        for (Hospital h :hospitalList.getHospitalList()){
             if(selectedhospital.equals(h.getHospitalName())){
             hospitalCombo=h;
             
           }
         }
          DoctorDirectory doctorList= hospitalCombo.getDoctorList();
          Doctor doctor = doctorList.addNewDoctor();
          doctor.setName(addDoctorTxtField.getText());
         populateTable5();
    }//GEN-LAST:event_addDoctorBtnActionPerformed

    private void patientEmailTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientEmailTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientEmailTxtFieldActionPerformed

    private void cityComboBoxPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxPatientActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxPatient.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        communityComboBoxPatient.removeAllItems();
        communityComboBoxPatient.addItem("Community");
        communityComboBoxPatient.setSelectedItem("Community");
        for (Community cm :city.getCommunityList()){
             communityComboBoxPatient.addItem(cm.getCommunityName()); 
         }
        
    }//GEN-LAST:event_cityComboBoxPatientActionPerformed

    private void communityComboBoxPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboBoxPatientActionPerformed
        // TODO add your handling code here:
         String selectedcity = String.valueOf(cityComboBoxPatient.getSelectedItem());
         String selectedcommunity = String.valueOf(communityComboBoxPatient.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        Community community = new Community();
        for (Community cm :city.getCommunityList()){
            if(cm.getCommunityName().equals(selectedcommunity)){
             community = cm;
         }
        houseComboBoxPatient.removeAllItems();
        houseComboBoxPatient.addItem("House");
        houseComboBoxPatient.setSelectedItem("House");
      
        for (House h :community.getHouseList()){
             houseComboBoxPatient.addItem(h.getHouseName()); 
         }
        } 
    }//GEN-LAST:event_communityComboBoxPatientActionPerformed

    private void houseComboBoxPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseComboBoxPatientActionPerformed
        // TODO add your handling code here:
        String selectedhouse = String.valueOf(houseComboBoxPatient.getSelectedItem());
        for(City c : cityList.getCitytList()){
           for (Community cm :c.getCommunityList()){ 
                  for (House h :cm.getHouseList()){
                      if(selectedhouse.equals(h.getHouseName())){
                           patientHouse= h;
                      }
                  }
           }
        }
       
    }//GEN-LAST:event_houseComboBoxPatientActionPerformed
    Community communityCombo = new Community();
    private void populateTable3(){
    
    // TODO add your handling code here:
        String selectedcommunity = String.valueOf(communityComboBoxHouse.getSelectedItem());
        String selectedcity = String.valueOf(cityComboBoxHouse.getSelectedItem());
        DefaultTableModel model = (DefaultTableModel) houseTable.getModel();
         model.setRowCount(0);
         int i =1;
         for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
        
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             communityCombo=cm;
             
           }
        } 
          for(House h:communityCombo.getHouseList()){
          Object [] row = new Object[2];
             row[0] = i;
             row[1] = h;
            
              model.addRow(row);
              i++;  
        }
            
        
        
}
    private void populateTable4(){
    
    // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxHospital.getSelectedItem());
        String selectedcommunity = String.valueOf(communityComboBoxHospital.getSelectedItem());
        DefaultTableModel model = (DefaultTableModel) hospitalTable.getModel();
         model.setRowCount(0);
         int i =1;
         for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
        
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             communityCombo=cm;
             
           }
        } 
        HospitalCatalogue hospitalList = communityCombo.getHospitalList();
          for(Hospital h : hospitalList.getHospitalList()){
          Object [] row = new Object[2];
             row[0] = i;
             row[1] = h;
            
              model.addRow(row);
              i++;  
        }
    }
    Hospital hospitalCombo = new Hospital();
       private void populateTable5(){
    
    // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxDoctor.getSelectedItem());
        String selectedcommunity = String.valueOf(communityComboBoxDoctor.getSelectedItem());
        String selectedhospital = String.valueOf(hospitalComboBoxDoctor.getSelectedItem());
        DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
         model.setRowCount(0);
         int i =1;
         for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
        
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             communityCombo=cm;
             
           }
        } 
        HospitalCatalogue hospitalList = communityCombo.getHospitalList();
        
        
        for (Hospital h :hospitalList.getHospitalList()){
             if(selectedhospital.equals(h.getHospitalName())){
             hospitalCombo=h;
             
           }
         }
        
          DoctorDirectory doctorList= hospitalCombo.getDoctorList();
          
          for(Doctor doctor : doctorList.getDoctorList()){
          Object [] row = new Object[2];
             row[0] = i;
             row[1] = doctor;
            
              model.addRow(row);
              i++;  
        }     
        
        
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MainFrame;
    private javax.swing.JLabel addCityLabel;
    private javax.swing.JLabel addCommunityAdminPasswordLabel;
    private javax.swing.JLabel addCommunityAdminUsernameLabel;
    private javax.swing.JTextField addCommunityAdminUsernameTxtField;
    private javax.swing.JButton addCommunityBtn;
    private javax.swing.JLabel addCommunityLabel;
    private javax.swing.JTextField addCommunityTxtField;
    private javax.swing.JButton addDoctorBtn;
    private javax.swing.JLabel addDoctorLabel;
    private javax.swing.JTextField addDoctorTxtField;
    private javax.swing.JLabel addHospitalAdminPasswordLabel;
    private javax.swing.JTextField addHospitalAdminPasswordTxtField;
    private javax.swing.JLabel addHospitalAdminUsernameLabel;
    private javax.swing.JTextField addHospitalAdminUsernameTxtField;
    private javax.swing.JButton addHospitalBtn;
    private javax.swing.JLabel addHospitalLabel;
    private javax.swing.JTextField addHospitalTxtField;
    private javax.swing.JButton addHouseBtn;
    private javax.swing.JLabel addHouseLabel;
    private javax.swing.JTextField addHouseTxtField;
    private javax.swing.JButton addNewCityBtn;
    private javax.swing.JTextField addNewCityTxtField;
    private javax.swing.JButton adminLogOut;
    private javax.swing.JSplitPane adminSplit;
    private javax.swing.ButtonGroup buttonGroupGender;
    private javax.swing.JButton cancelPatientRegistration;
    private javax.swing.JComboBox<String> citiesComboBox;
    private javax.swing.JTable cititsTable;
    private javax.swing.JComboBox<String> cityComboBoxDoctor;
    private javax.swing.JComboBox<String> cityComboBoxHospital;
    private javax.swing.JComboBox<String> cityComboBoxHouse;
    private javax.swing.JComboBox<String> cityComboBoxPatient;
    private javax.swing.JPanel communityAdminHouse;
    private javax.swing.JPasswordField communityAdminPasswordTxtField;
    private javax.swing.JSplitPane communityAdminSplit;
    private javax.swing.JComboBox<String> communityComboBoxDoctor;
    private javax.swing.JComboBox<String> communityComboBoxHospital;
    private javax.swing.JComboBox<String> communityComboBoxHouse;
    private javax.swing.JComboBox<String> communityComboBoxPatient;
    private javax.swing.JTable communityTable;
    private javax.swing.JPanel controlAdmin;
    private javax.swing.JPanel controlCommunityPanel;
    private javax.swing.JButton deleteCityBtn;
    private javax.swing.JButton deleteCommunityBtn;
    private javax.swing.JButton deleteDoctorBtn;
    private javax.swing.JTable doctorTable;
    private javax.swing.JRadioButton femaleRadio;
    private javax.swing.JComboBox<String> hospitalComboBoxDoctor;
    private javax.swing.JButton hospitalDeleteBtn;
    private javax.swing.JTable hospitalTable;
    private javax.swing.JComboBox<String> houseComboBoxPatient;
    private javax.swing.JButton houseDeleteBtn;
    private javax.swing.JTable houseTable;
    private javax.swing.JButton houseUpdateBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton loginBtn;
    private javax.swing.JPanel loginPage;
    private javax.swing.JButton logoutCommunityAdmin;
    private javax.swing.JRadioButton maleRadio;
    private javax.swing.JPanel manageCitiesPanel;
    private javax.swing.JButton manageCityBtn;
    private javax.swing.JPanel manageCommunitiesPanel;
    private javax.swing.JButton manageCommunityBtn;
    private javax.swing.JButton manageCommunityBttn;
    private javax.swing.JButton manageDoctorBtn;
    private javax.swing.JPanel manageDoctorsPanel;
    private javax.swing.JPanel manageEncounterHistory;
    private javax.swing.JButton manageHospitalBtn;
    private javax.swing.JButton manageHospitalBtnn;
    private javax.swing.JButton manageHospitalBttn;
    private javax.swing.JPanel manageHospitalsPanel;
    private javax.swing.JButton manageHouseBtn;
    private javax.swing.JPanel manageHousesPanel;
    private javax.swing.JButton managePatientBtn;
    private javax.swing.JPanel managePatientsPanel;
    private javax.swing.JRadioButton otherRadio;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTxtField;
    private javax.swing.JLabel patientAgeLabel;
    private javax.swing.JTextField patientAgeTxtField;
    private javax.swing.JLabel patientCityLabel;
    private javax.swing.JLabel patientCommunityLabel;
    private javax.swing.JLabel patientConfirmPasswordLabel;
    private javax.swing.JPasswordField patientConfirmsPasswordTxtField;
    private com.toedter.calendar.JDateChooser patientDOB;
    private javax.swing.JLabel patientDOBLabel;
    private javax.swing.JLabel patientEmailLabel;
    private javax.swing.JTextField patientEmailTxtField;
    private javax.swing.JLabel patientGenderLabel;
    private javax.swing.JPanel patientHome;
    private javax.swing.JLabel patientHouseLabel;
    private javax.swing.JLabel patientInsuranceLabel;
    private javax.swing.JTextField patientInsuranceTxtField;
    private javax.swing.JLabel patientNameLabel;
    private javax.swing.JTextField patientNameTxtField;
    private javax.swing.JLabel patientPasswordLabel;
    private javax.swing.JLabel patientPhoneLabel;
    private javax.swing.JTextField patientPhoneTxtField;
    private javax.swing.JButton patientRegisterBtn;
    private javax.swing.JPanel patientRegistrationPage;
    private javax.swing.JPasswordField patientSetPasswordTxtField;
    private javax.swing.JTextField patientSetUsernameTxtField;
    private javax.swing.JLabel patientUsernameLabel;
    private javax.swing.JLabel registrationLink;
    private javax.swing.JPanel systemAdminHome;
    private javax.swing.JButton updateCityBtn;
    private javax.swing.JButton updateCityNameBtn;
    private javax.swing.JLabel updateCityNameLabel;
    private javax.swing.JTextField updateCityNameTxtField;
    private javax.swing.JButton updateCommunityBtn;
    private javax.swing.JButton updateDoctorBtn;
    private javax.swing.JButton updateHospitalBtn;
    private javax.swing.JLabel userTypeLabel;
    private javax.swing.JComboBox<String> userTypeSelect;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTxtField;
    private javax.swing.JPanel viewAdmin;
    private javax.swing.JPanel viewCommunityAdminPanel;
    private javax.swing.JLabel welcomeAdmin;
    private javax.swing.JLabel welcomePatient;
    private javax.swing.JLabel welcomecommunityAdmin;
    // End of variables declaration//GEN-END:variables
}
