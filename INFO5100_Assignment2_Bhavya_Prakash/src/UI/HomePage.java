/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import Business.Admin;
import Business.City;
import Business.CityCatalogue;
import Business.Community;
import Business.Doctor;
import Business.DoctorDirectory;
import Business.Encounter;
import Business.EncounterHistory;
import Business.Hospital;
import Business.HospitalDirectory;
import Business.House;
import Business.Initializer;
import Business.Patient;
import Business.PatientDirectory;
import Business.Person;
import Business.PersonDirectory;
import Business.SystemClass;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author BHAVYA PRAKASH
 */
public class HomePage extends javax.swing.JFrame {

    /**
     * Creates new form HomePage
     */
   
    String userType = "Select any user type";
   
    SystemClass system = Initializer.initialize();
    PatientDirectory patientList = system.getPatientList();
    PersonDirectory personList =  system.getPersonList();
    CityCatalogue cityList = system.getCityList();
    DoctorDirectory doctorList = system.getDoctorList();
    House patientHouse;
    HospitalDirectory patientHospitalList = new HospitalDirectory() ;
    Patient loggedInPatient;
    Doctor loggedInDoctor;
    Admin loggedInAdmin ;
    int loggedAdmin=0;
    DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    public HomePage() {
        initComponents();
       userTypeSelect.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupGender = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        MainFrame = new javax.swing.JPanel();
        loginPage = new javax.swing.JPanel();
        userTypeLabel = new javax.swing.JLabel();
        userTypeSelect = new javax.swing.JComboBox<>();
        usernameLabel = new javax.swing.JLabel();
        usernameTxtField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        loginBtn = new javax.swing.JButton();
        registrationLink = new javax.swing.JLabel();
        passwordTxtField = new javax.swing.JPasswordField();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        patientRegistrationPage = new javax.swing.JPanel();
        patientNameTxtField = new javax.swing.JTextField();
        patientRegisterBtn = new javax.swing.JButton();
        patientCityLabel = new javax.swing.JLabel();
        patientAgeTxtField = new javax.swing.JTextField();
        maleRadio = new javax.swing.JRadioButton();
        patientNameLabel = new javax.swing.JLabel();
        femaleRadio = new javax.swing.JRadioButton();
        patientAgeLabel = new javax.swing.JLabel();
        otherRadio = new javax.swing.JRadioButton();
        patientDOBLabel = new javax.swing.JLabel();
        patientDOB = new com.toedter.calendar.JDateChooser();
        patientGenderLabel = new javax.swing.JLabel();
        patientUsernameLabel = new javax.swing.JLabel();
        patientPasswordLabel = new javax.swing.JLabel();
        patientSetUsernameTxtField = new javax.swing.JTextField();
        cancelPatientRegistration = new javax.swing.JButton();
        patientSetPasswordTxtField = new javax.swing.JPasswordField();
        patientCommunityLabel = new javax.swing.JLabel();
        patientHouseLabel = new javax.swing.JLabel();
        cityComboBoxPatient = new javax.swing.JComboBox<>();
        communityComboBoxPatient = new javax.swing.JComboBox<>();
        houseComboBoxPatient = new javax.swing.JComboBox<>();
        patientConfirmPasswordLabel = new javax.swing.JLabel();
        patientConfirmsPasswordTxtField = new javax.swing.JPasswordField();
        patientEmailLabel = new javax.swing.JLabel();
        patientPhoneTxtField = new javax.swing.JTextField();
        patientPhoneLabel = new javax.swing.JLabel();
        patientEmailTxtField = new javax.swing.JTextField();
        patientInsuranceLabel = new javax.swing.JLabel();
        patientInsuranceTxtField = new javax.swing.JTextField();
        registrationLabel = new javax.swing.JLabel();
        registrationLabel1 = new javax.swing.JLabel();
        registrationLabel2 = new javax.swing.JLabel();
        patientHome = new javax.swing.JPanel();
        patientHomeSplitPane = new javax.swing.JSplitPane();
        patientControlPanel = new javax.swing.JPanel();
        updatePatientProfileBtn = new javax.swing.JButton();
        searchDoctorPatientBtn = new javax.swing.JButton();
        deletePatientProfileBtn = new javax.swing.JButton();
        patientLogOutBtn = new javax.swing.JButton();
        patientHomeBtn = new javax.swing.JButton();
        jLabel39 = new javax.swing.JLabel();
        patientViewPanel = new javax.swing.JPanel();
        patientHomePanel = new javax.swing.JPanel();
        welcomePatient = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        appointmentListTable = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        patientViewEncounterId = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        patientViewBloodPressure = new javax.swing.JLabel();
        patientViewPulseRate = new javax.swing.JLabel();
        patientEncounterDate = new javax.swing.JLabel();
        patientViewSymptoms = new javax.swing.JLabel();
        patientViewAppointmentDetails = new javax.swing.JLabel();
        patientViewBodyTemperature = new javax.swing.JLabel();
        patientViewRespirationRate = new javax.swing.JLabel();
        patientViewEncounterTime = new javax.swing.JLabel();
        patientViewDiagnosis = new javax.swing.JLabel();
        appointmentDeleteBtn = new javax.swing.JButton();
        viewAppointmentDetailsBtn = new javax.swing.JButton();
        searchDoctorPanel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        bookAppointmentBtn = new javax.swing.JButton();
        hospitalComboBoxPatient = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        patientAddressDoctorSearchLabel = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        patientAddressDoctorSearchLabel1 = new javax.swing.JLabel();
        updatePatientProfilePanel = new javax.swing.JPanel();
        patientNameLabel2 = new javax.swing.JLabel();
        patientNameTxtField1 = new javax.swing.JTextField();
        patientAgeLabel2 = new javax.swing.JLabel();
        patientAgeTxtField1 = new javax.swing.JTextField();
        patientGenderLabel2 = new javax.swing.JLabel();
        maleRadio2 = new javax.swing.JRadioButton();
        femaleRadio2 = new javax.swing.JRadioButton();
        otherRadio2 = new javax.swing.JRadioButton();
        patientDOBLabel2 = new javax.swing.JLabel();
        patientDOB1 = new com.toedter.calendar.JDateChooser();
        patientPhoneLabel3 = new javax.swing.JLabel();
        patientPhoneTxtField1 = new javax.swing.JTextField();
        patientEmailLabel2 = new javax.swing.JLabel();
        patientEmailTxtField1 = new javax.swing.JTextField();
        patientInsuranceLabel1 = new javax.swing.JLabel();
        patientInsuranceTxtField1 = new javax.swing.JTextField();
        patientCityLabel1 = new javax.swing.JLabel();
        cityComboBoxPatient1 = new javax.swing.JComboBox<>();
        patientCommunityLabel1 = new javax.swing.JLabel();
        communityComboBoxPatient1 = new javax.swing.JComboBox<>();
        patientHouseLabel1 = new javax.swing.JLabel();
        houseComboBoxPatient1 = new javax.swing.JComboBox<>();
        patientUsernameLabel2 = new javax.swing.JLabel();
        patientPasswordLabel2 = new javax.swing.JLabel();
        patientSetPasswordTxtField1 = new javax.swing.JPasswordField();
        patientConfirmPasswordLabel2 = new javax.swing.JLabel();
        patientConfirmsPasswordTxtField1 = new javax.swing.JPasswordField();
        patientUpdateBtn = new javax.swing.JButton();
        viewPatientProfileBtn = new javax.swing.JButton();
        patientSetUsernameTxtField1 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        systemAdminHome = new javax.swing.JPanel();
        adminSplit = new javax.swing.JSplitPane();
        controlAdmin = new javax.swing.JPanel();
        manageCityBtn = new javax.swing.JButton();
        manageHouseBtn = new javax.swing.JButton();
        manageCommunityBtn = new javax.swing.JButton();
        manageDoctorBtn = new javax.swing.JButton();
        manageHospitalBtn = new javax.swing.JButton();
        managePatientBtn = new javax.swing.JButton();
        adminLogOut = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel42 = new javax.swing.JLabel();
        viewAdmin = new javax.swing.JPanel();
        systemAdminHomePage = new javax.swing.JPanel();
        welcomeAdmin = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        doctorTable1 = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        patientManageTable1 = new javax.swing.JTable();
        welcomeAdmin1 = new javax.swing.JLabel();
        welcomeAdmin2 = new javax.swing.JLabel();
        welcomeAdmin3 = new javax.swing.JLabel();
        manageCitiesPanel = new javax.swing.JPanel();
        addCityLabel = new javax.swing.JLabel();
        addNewCityTxtField = new javax.swing.JTextField();
        addNewCityBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        cititsTable = new javax.swing.JTable();
        deleteCityBtn = new javax.swing.JButton();
        updateCityNameLabel = new javax.swing.JLabel();
        updateCityNameTxtField = new javax.swing.JTextField();
        updateCityBtn = new javax.swing.JButton();
        jLabel35 = new javax.swing.JLabel();
        manageCommunitiesPanel = new javax.swing.JPanel();
        addCommunityLabel = new javax.swing.JLabel();
        addCommunityTxtField = new javax.swing.JTextField();
        addCommunityAdminUsernameLabel = new javax.swing.JLabel();
        addCommunityAdminUsernameTxtField = new javax.swing.JTextField();
        addCommunityAdminPasswordLabel = new javax.swing.JLabel();
        communityAdminPasswordTxtField = new javax.swing.JPasswordField();
        citiesComboBox = new javax.swing.JComboBox<>();
        addCommunityBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        communityTable = new javax.swing.JTable();
        updateCommunityBtn = new javax.swing.JButton();
        deleteCommunityBtn = new javax.swing.JButton();
        communityAdminPasswordTxtField1 = new javax.swing.JPasswordField();
        addCommunityAdminPasswordLabel1 = new javax.swing.JLabel();
        manageHospitalsPanel = new javax.swing.JPanel();
        cityComboBoxHospital = new javax.swing.JComboBox<>();
        communityComboBoxHospital = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        hospitalTable = new javax.swing.JTable();
        addHospitalLabel = new javax.swing.JLabel();
        addHospitalTxtField = new javax.swing.JTextField();
        addHospitalBtn = new javax.swing.JButton();
        updateHospitalBtn = new javax.swing.JButton();
        hospitalDeleteBtn = new javax.swing.JButton();
        addHospitalAdminUsernameLabel = new javax.swing.JLabel();
        addHospitalAdminUsernameTxtField = new javax.swing.JTextField();
        addHospitalAdminPasswordLabel = new javax.swing.JLabel();
        addHospitalAdminPasswordTxtField1 = new javax.swing.JPasswordField();
        addHospitalAdminPasswordTxtField = new javax.swing.JPasswordField();
        addHospitalAdminPasswordLabel1 = new javax.swing.JLabel();
        manageHousesPanel = new javax.swing.JPanel();
        addHouseLabel = new javax.swing.JLabel();
        addHouseTxtField = new javax.swing.JTextField();
        addHouseBtn = new javax.swing.JButton();
        cityComboBoxHouse = new javax.swing.JComboBox<>();
        communityComboBoxHouse = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        houseTable = new javax.swing.JTable();
        houseUpdateBtn = new javax.swing.JButton();
        houseDeleteBtn = new javax.swing.JButton();
        manageDoctorsPanel = new javax.swing.JPanel();
        cityComboBoxDoctor = new javax.swing.JComboBox<>();
        communityComboBoxDoctor = new javax.swing.JComboBox<>();
        hospitalComboBoxDoctor = new javax.swing.JComboBox<>();
        addDoctorBtn = new javax.swing.JButton();
        updateDoctorBtn = new javax.swing.JButton();
        deleteDoctorBtn = new javax.swing.JButton();
        patientNameLabel1 = new javax.swing.JLabel();
        doctorNameTxtField = new javax.swing.JTextField();
        patientAgeLabel1 = new javax.swing.JLabel();
        doctorAgeTxtField = new javax.swing.JTextField();
        patientGenderLabel1 = new javax.swing.JLabel();
        maleRadio1 = new javax.swing.JRadioButton();
        femaleRadio1 = new javax.swing.JRadioButton();
        otherRadio1 = new javax.swing.JRadioButton();
        patientDOBLabel1 = new javax.swing.JLabel();
        doctorDOB = new com.toedter.calendar.JDateChooser();
        patientPhoneLabel1 = new javax.swing.JLabel();
        doctorPhoneTxtField = new javax.swing.JTextField();
        patientEmailLabel1 = new javax.swing.JLabel();
        doctorEmailTxtField = new javax.swing.JTextField();
        patientUsernameLabel1 = new javax.swing.JLabel();
        doctorSetUsernameTxtField = new javax.swing.JTextField();
        patientPasswordLabel1 = new javax.swing.JLabel();
        doctorSetPasswordTxtField = new javax.swing.JPasswordField();
        patientConfirmPasswordLabel1 = new javax.swing.JLabel();
        doctorConfirmsPasswordTxtField = new javax.swing.JPasswordField();
        patientPhoneLabel2 = new javax.swing.JLabel();
        doctorDegreeTxtField = new javax.swing.JTextField();
        doctorSpeciality = new javax.swing.JLabel();
        doctorSpecialityTxtField = new javax.swing.JTextField();
        doctorSpeciality1 = new javax.swing.JLabel();
        doctorAvailabilityTxtField = new javax.swing.JTextField();
        jScrollPane13 = new javax.swing.JScrollPane();
        doctorTable = new javax.swing.JTable();
        communityAdminHouse = new javax.swing.JPanel();
        communityAdminSplit = new javax.swing.JSplitPane();
        controlCommunityPanel = new javax.swing.JPanel();
        manageCommunityBttn = new javax.swing.JButton();
        manageHospitalBtnn = new javax.swing.JButton();
        manageHospitalBttn = new javax.swing.JButton();
        logoutCommunityAdmin = new javax.swing.JButton();
        jLabel43 = new javax.swing.JLabel();
        viewCommunityAdminPanel = new javax.swing.JPanel();
        welcomecommunityAdmin = new javax.swing.JLabel();
        doctorHome = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        doctorControlPanel = new javax.swing.JPanel();
        addEncounterDetailsBtn = new javax.swing.JButton();
        manageProfileBtn = new javax.swing.JButton();
        doctorLogOutBtn = new javax.swing.JButton();
        jLabel44 = new javax.swing.JLabel();
        doctorViewPanel = new javax.swing.JPanel();
        doctorHomePanel = new javax.swing.JPanel();
        welcomeDoctor = new javax.swing.JLabel();
        doctorViewProfilePanel = new javax.swing.JPanel();
        patientNameLabel3 = new javax.swing.JLabel();
        patientAgeLabel3 = new javax.swing.JLabel();
        patientGenderLabel3 = new javax.swing.JLabel();
        patientDOBLabel3 = new javax.swing.JLabel();
        doctorSpeciality2 = new javax.swing.JLabel();
        patientPhoneLabel4 = new javax.swing.JLabel();
        patientPhoneLabel5 = new javax.swing.JLabel();
        patientEmailLabel3 = new javax.swing.JLabel();
        patientUsernameLabel3 = new javax.swing.JLabel();
        patientPasswordLabel3 = new javax.swing.JLabel();
        patientConfirmPasswordLabel3 = new javax.swing.JLabel();
        doctorSpeciality3 = new javax.swing.JLabel();
        doctorUsernameViewLabel = new javax.swing.JLabel();
        doctorNameViewLabel = new javax.swing.JLabel();
        doctorAgeViewLabel = new javax.swing.JLabel();
        doctorEmailViewLabel = new javax.swing.JLabel();
        doctorGenderViewLabel = new javax.swing.JLabel();
        doctorDOBViewLabel = new javax.swing.JLabel();
        doctorSpecialityViewLabel = new javax.swing.JLabel();
        doctorDegreeViewLabel = new javax.swing.JLabel();
        doctorContactViewLabel = new javax.swing.JLabel();
        doctorConfirmPassViewLabel = new javax.swing.JPasswordField();
        doctorPasswordViewLabel = new javax.swing.JPasswordField();
        doctorChangePassword = new javax.swing.JButton();
        doctorAvailabilityViewLabel = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        doctorManageAppointmentsPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        encounterTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        patientDetailsNameLabel = new javax.swing.JLabel();
        patientDetailsAgeLabel = new javax.swing.JLabel();
        patientDetailsGenderLabel = new javax.swing.JLabel();
        patientDetailsInsuranceLabel = new javax.swing.JLabel();
        patientDetailsPhoneLabel = new javax.swing.JLabel();
        patientDetailsEmailLabel = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        patientEncounterSaveBtn = new javax.swing.JButton();
        patientBloodPressureTxtField = new javax.swing.JTextField();
        patientBodyTempTxtField = new javax.swing.JTextField();
        patientSymptomsTxtField = new javax.swing.JTextField();
        patientPulseTxtField = new javax.swing.JTextField();
        patientRespRateTxtField = new javax.swing.JTextField();
        patientDiagnosisTxtField = new javax.swing.JTextField();
        encounterDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel26 = new javax.swing.JLabel();
        hrComboBox = new javax.swing.JComboBox<>();
        minComboBox = new javax.swing.JComboBox<>();
        timeComboBox = new javax.swing.JComboBox<>();
        jLabel27 = new javax.swing.JLabel();
        communityAdminHome = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        communityAdminControlPanel = new javax.swing.JPanel();
        communityAdminLogOutBtn = new javax.swing.JButton();
        communityAdminManageHousesBtn = new javax.swing.JButton();
        communityAdminManageHosbitalBtn = new javax.swing.JButton();
        jLabel45 = new javax.swing.JLabel();
        communityViewControlPanel = new javax.swing.JPanel();
        hospitalAdminHome = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        hospitalAdminLogOutBtn = new javax.swing.JButton();
        jLabel46 = new javax.swing.JLabel();
        hospitalAdminViewPanel = new javax.swing.JPanel();
        adminManagePatientPanel = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        patientManageTable = new javax.swing.JTable();
        patientNameLabel4 = new javax.swing.JLabel();
        patientNameTxtField2 = new javax.swing.JTextField();
        patientAgeLabel4 = new javax.swing.JLabel();
        patientAgeTxtField2 = new javax.swing.JTextField();
        patientGenderLabel4 = new javax.swing.JLabel();
        maleRadio3 = new javax.swing.JRadioButton();
        femaleRadio3 = new javax.swing.JRadioButton();
        otherRadio3 = new javax.swing.JRadioButton();
        patientDOBLabel4 = new javax.swing.JLabel();
        patientDOB2 = new com.toedter.calendar.JDateChooser();
        patientPhoneLabel6 = new javax.swing.JLabel();
        patientPhoneTxtField2 = new javax.swing.JTextField();
        patientEmailLabel4 = new javax.swing.JLabel();
        patientEmailTxtField2 = new javax.swing.JTextField();
        patientInsuranceLabel2 = new javax.swing.JLabel();
        patientInsuranceTxtField2 = new javax.swing.JTextField();
        patientCityLabel2 = new javax.swing.JLabel();
        cityComboBoxPatient2 = new javax.swing.JComboBox<>();
        patientCommunityLabel2 = new javax.swing.JLabel();
        communityComboBoxPatient2 = new javax.swing.JComboBox<>();
        patientHouseLabel2 = new javax.swing.JLabel();
        houseComboBoxPatient2 = new javax.swing.JComboBox<>();
        patientUsernameLabel4 = new javax.swing.JLabel();
        patientPasswordLabel4 = new javax.swing.JLabel();
        patientSetPasswordTxtField2 = new javax.swing.JPasswordField();
        patientConfirmsPasswordTxtField2 = new javax.swing.JPasswordField();
        patientConfirmPasswordLabel4 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        updatePatientAdminBtn = new javax.swing.JButton();
        patientSetUsernameTxtField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        patientConfirmPasswordLabel5 = new javax.swing.JLabel();
        patientConfirmPasswordLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MainFrame.setLayout(new java.awt.CardLayout());

        loginPage.setBackground(new java.awt.Color(255, 255, 255));

        userTypeLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        userTypeLabel.setText("Choose you user type");

        userTypeSelect.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        userTypeSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Patient", "Doctor", "System Admin", "Hospital Admin", "Community Admin" }));
        userTypeSelect.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        userTypeSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTypeSelectActionPerformed(evt);
            }
        });

        usernameLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        usernameLabel.setText("Username");

        usernameTxtField.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N

        passwordLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        passwordLabel.setText("Password");

        loginBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        loginBtn.setText("Login");
        loginBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        loginBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        registrationLink.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        registrationLink.setForeground(new java.awt.Color(0, 153, 153));
        registrationLink.setText("Are you a new patient?  Click here to create a new account");
        registrationLink.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        registrationLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                registrationLinkMouseClicked(evt);
            }
        });

        passwordTxtField.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N

        jLabel37.setBackground(new java.awt.Color(0, 0, 0));
        jLabel37.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        jLabel37.setText("Massachusetts Health Care System");

        jLabel38.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/logo.jpg"))); // NOI18N

        javax.swing.GroupLayout loginPageLayout = new javax.swing.GroupLayout(loginPage);
        loginPage.setLayout(loginPageLayout);
        loginPageLayout.setHorizontalGroup(
            loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPageLayout.createSequentialGroup()
                .addGap(251, 251, 251)
                .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPageLayout.createSequentialGroup()
                        .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(passwordLabel)
                            .addComponent(userTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(usernameLabel))
                        .addGap(123, 123, 123)
                        .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userTypeSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(usernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPageLayout.createSequentialGroup()
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPageLayout.createSequentialGroup()
                        .addComponent(jLabel38)
                        .addGap(205, 205, 205))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPageLayout.createSequentialGroup()
                        .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(loginBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(registrationLink, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(69, 69, 69)))
                .addContainerGap(748, Short.MAX_VALUE))
        );

        loginPageLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {passwordTxtField, userTypeSelect, usernameTxtField});

        loginPageLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {passwordLabel, userTypeLabel, usernameLabel});

        loginPageLayout.setVerticalGroup(
            loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPageLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userTypeLabel)
                    .addComponent(userTypeSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel))
                .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginPageLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(usernameLabel))
                    .addGroup(loginPageLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(50, 50, 50)
                .addComponent(loginBtn)
                .addGap(28, 28, 28)
                .addComponent(registrationLink)
                .addContainerGap(348, Short.MAX_VALUE))
        );

        MainFrame.add(loginPage, "card2");

        patientRegistrationPage.setBackground(new java.awt.Color(255, 255, 255));

        patientRegisterBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientRegisterBtn.setText("Save");
        patientRegisterBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        patientRegisterBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        patientRegisterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientRegisterBtnActionPerformed(evt);
            }
        });

        patientCityLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientCityLabel.setText("Select Your City");

        buttonGroupGender.add(maleRadio);
        maleRadio.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        maleRadio.setText("Male");

        patientNameLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientNameLabel.setText("Name");

        buttonGroupGender.add(femaleRadio);
        femaleRadio.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        femaleRadio.setText("Female");

        patientAgeLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientAgeLabel.setText("Age");

        buttonGroupGender.add(otherRadio);
        otherRadio.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        otherRadio.setText("Other");

        patientDOBLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientDOBLabel.setText("DOB");

        patientGenderLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientGenderLabel.setText("Gender");

        patientUsernameLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientUsernameLabel.setText("Username");

        patientPasswordLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientPasswordLabel.setText("Password");

        cancelPatientRegistration.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        cancelPatientRegistration.setText("Cancel");
        cancelPatientRegistration.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cancelPatientRegistration.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelPatientRegistration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelPatientRegistrationActionPerformed(evt);
            }
        });

        patientCommunityLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientCommunityLabel.setText("Select Your Community");

        patientHouseLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientHouseLabel.setText("Select Your House");

        cityComboBoxPatient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cityComboBoxPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxPatientActionPerformed(evt);
            }
        });

        communityComboBoxPatient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        communityComboBoxPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboBoxPatientActionPerformed(evt);
            }
        });

        houseComboBoxPatient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        houseComboBoxPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseComboBoxPatientActionPerformed(evt);
            }
        });

        patientConfirmPasswordLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientConfirmPasswordLabel.setText("Confirm Password");

        patientEmailLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientEmailLabel.setText("Contact Email");

        patientPhoneLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientPhoneLabel.setText("Contact Number");

        patientEmailTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientEmailTxtFieldActionPerformed(evt);
            }
        });

        patientInsuranceLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientInsuranceLabel.setText("Health Insurance Plan");

        registrationLabel.setBackground(new java.awt.Color(255, 255, 255));
        registrationLabel.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        registrationLabel.setText("Enter you personal information :");

        registrationLabel1.setBackground(new java.awt.Color(255, 255, 255));
        registrationLabel1.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        registrationLabel1.setText("Patient Registration Form");

        registrationLabel2.setBackground(new java.awt.Color(255, 255, 255));
        registrationLabel2.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        registrationLabel2.setText("Set you username and password :");

        javax.swing.GroupLayout patientRegistrationPageLayout = new javax.swing.GroupLayout(patientRegistrationPage);
        patientRegistrationPage.setLayout(patientRegistrationPageLayout);
        patientRegistrationPageLayout.setHorizontalGroup(
            patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientRegistrationPageLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registrationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                        .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientNameLabel)
                            .addComponent(patientAgeLabel)
                            .addComponent(patientGenderLabel)
                            .addComponent(patientDOBLabel)
                            .addComponent(patientPhoneLabel))
                        .addGap(6, 6, 6)
                        .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(patientAgeTxtField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(patientNameTxtField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(patientDOB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                                .addComponent(maleRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(femaleRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(otherRadio))
                            .addComponent(patientPhoneTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(154, 154, 154)
                        .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientInsuranceLabel)
                            .addComponent(patientCityLabel)
                            .addComponent(patientCommunityLabel)
                            .addComponent(patientHouseLabel)
                            .addComponent(patientEmailLabel))
                        .addGap(18, 18, 18)
                        .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(houseComboBoxPatient, javax.swing.GroupLayout.Alignment.LEADING, 0, 243, Short.MAX_VALUE)
                            .addComponent(communityComboBoxPatient, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cityComboBoxPatient, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(patientInsuranceTxtField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientEmailTxtField)))
                    .addComponent(patientUsernameLabel)
                    .addComponent(patientPasswordLabel)
                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                        .addComponent(patientConfirmPasswordLabel)
                        .addGap(24, 24, 24)
                        .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientConfirmsPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientSetPasswordTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                            .addComponent(patientSetUsernameTxtField)))
                    .addComponent(registrationLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(85, 85, 85))
            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                        .addGap(293, 293, 293)
                        .addComponent(patientRegisterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(99, 99, 99)
                        .addComponent(cancelPatientRegistration, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                        .addGap(333, 333, 333)
                        .addComponent(registrationLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        patientRegistrationPageLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {patientConfirmsPasswordTxtField, patientSetPasswordTxtField, patientSetUsernameTxtField});

        patientRegistrationPageLayout.setVerticalGroup(
            patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(registrationLabel1)
                .addGap(25, 25, 25)
                .addComponent(registrationLabel)
                .addGap(38, 38, 38)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                        .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patientInsuranceLabel)
                            .addComponent(patientInsuranceTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientRegistrationPageLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(patientNameLabel)
                            .addComponent(patientNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(21, 21, 21)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientAgeLabel)
                    .addComponent(patientAgeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientCityLabel)
                    .addComponent(cityComboBoxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientGenderLabel)
                    .addComponent(maleRadio)
                    .addComponent(femaleRadio)
                    .addComponent(otherRadio)
                    .addComponent(patientCommunityLabel)
                    .addComponent(communityComboBoxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientDOBLabel)
                    .addComponent(patientDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientHouseLabel)
                    .addComponent(houseComboBoxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientPhoneLabel)
                    .addComponent(patientPhoneTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientEmailLabel)
                    .addComponent(patientEmailTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(registrationLabel2)
                .addGap(18, 18, 18)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientUsernameLabel)
                    .addComponent(patientSetUsernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientPasswordLabel)
                    .addComponent(patientSetPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientConfirmPasswordLabel)
                    .addComponent(patientConfirmsPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientRegisterBtn)
                    .addComponent(cancelPatientRegistration))
                .addContainerGap(256, Short.MAX_VALUE))
        );

        MainFrame.add(patientRegistrationPage, "card3");

        patientControlPanel.setBackground(new java.awt.Color(0, 0, 0));

        updatePatientProfileBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        updatePatientProfileBtn.setText("Manage Profile");
        updatePatientProfileBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        updatePatientProfileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePatientProfileBtnActionPerformed(evt);
            }
        });

        searchDoctorPatientBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        searchDoctorPatientBtn.setText("Search Doctors");
        searchDoctorPatientBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        searchDoctorPatientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDoctorPatientBtnActionPerformed(evt);
            }
        });

        deletePatientProfileBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        deletePatientProfileBtn.setText("Deactivate Account");
        deletePatientProfileBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deletePatientProfileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePatientProfileBtnActionPerformed(evt);
            }
        });

        patientLogOutBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientLogOutBtn.setText("Log Out");
        patientLogOutBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        patientLogOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientLogOutBtnActionPerformed(evt);
            }
        });

        patientHomeBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientHomeBtn.setText("Home");
        patientHomeBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        patientHomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientHomeBtnActionPerformed(evt);
            }
        });

        jLabel39.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/logo.jpg"))); // NOI18N
        jLabel39.setText("jLabel39");

        javax.swing.GroupLayout patientControlPanelLayout = new javax.swing.GroupLayout(patientControlPanel);
        patientControlPanel.setLayout(patientControlPanelLayout);
        patientControlPanelLayout.setHorizontalGroup(
            patientControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientControlPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(patientControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientHomeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchDoctorPatientBtn)
                    .addComponent(updatePatientProfileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deletePatientProfileBtn)
                    .addComponent(patientLogOutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        patientControlPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deletePatientProfileBtn, patientHomeBtn, patientLogOutBtn, searchDoctorPatientBtn, updatePatientProfileBtn});

        patientControlPanelLayout.setVerticalGroup(
            patientControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientControlPanelLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel39)
                .addGap(109, 109, 109)
                .addComponent(patientHomeBtn)
                .addGap(30, 30, 30)
                .addComponent(searchDoctorPatientBtn)
                .addGap(30, 30, 30)
                .addComponent(updatePatientProfileBtn)
                .addGap(30, 30, 30)
                .addComponent(deletePatientProfileBtn)
                .addGap(28, 28, 28)
                .addComponent(patientLogOutBtn)
                .addContainerGap(265, Short.MAX_VALUE))
        );

        patientControlPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {deletePatientProfileBtn, patientHomeBtn, patientLogOutBtn, searchDoctorPatientBtn, updatePatientProfileBtn});

        patientHomeSplitPane.setLeftComponent(patientControlPanel);

        patientViewPanel.setLayout(new java.awt.CardLayout());

        patientHomePanel.setBackground(new java.awt.Color(255, 255, 255));

        welcomePatient.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        welcomePatient.setText("Welcome");
        welcomePatient.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel2.setText("Your Appointment Request List");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        appointmentListTable.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        appointmentListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Encounter Id", "Appointment Details", "Appointement Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        appointmentListTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        appointmentListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appointmentListTableMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(appointmentListTable);

        jLabel16.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel16.setText("Encounter Id");
        jLabel16.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel18.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel18.setText("Blood Pressure");
        jLabel18.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel19.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel19.setText("Diagnosis");
        jLabel19.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel20.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel20.setText("Encounter Time");
        jLabel20.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel21.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel21.setText("Respiration Rate");
        jLabel21.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel22.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel22.setText("Body Temperature");
        jLabel22.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel28.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel28.setText("Pulse Rate");
        jLabel28.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel29.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel29.setText("Appointment Details");
        jLabel29.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel31.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel31.setText("Symptoms");
        jLabel31.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel32.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel32.setText("Encounter Date");
        jLabel32.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        appointmentDeleteBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        appointmentDeleteBtn.setText("Delete Pending Appointment Request");
        appointmentDeleteBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        appointmentDeleteBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        appointmentDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentDeleteBtnActionPerformed(evt);
            }
        });

        viewAppointmentDetailsBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        viewAppointmentDetailsBtn.setText("View Past Appointment Details");
        viewAppointmentDetailsBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        viewAppointmentDetailsBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        viewAppointmentDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAppointmentDetailsBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout patientHomePanelLayout = new javax.swing.GroupLayout(patientHomePanel);
        patientHomePanel.setLayout(patientHomePanelLayout);
        patientHomePanelLayout.setHorizontalGroup(
            patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientHomePanelLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(patientHomePanelLayout.createSequentialGroup()
                        .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel18)
                            .addComponent(jLabel28)
                            .addComponent(jLabel32)
                            .addComponent(jLabel31))
                        .addGap(28, 28, 28)
                        .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientEncounterDate, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(patientViewPulseRate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(patientViewEncounterId, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientViewBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientViewSymptoms, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel29)
                            .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(patientViewDiagnosis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(patientViewBodyTemperature, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(patientViewRespirationRate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(patientViewEncounterTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(patientViewAppointmentDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, patientHomePanelLayout.createSequentialGroup()
                            .addComponent(viewAppointmentDetailsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(appointmentDeleteBtn))
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(618, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientHomePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(welcomePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(231, 231, 231))
        );

        patientHomePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {patientEncounterDate, patientViewBloodPressure, patientViewEncounterId, patientViewPulseRate, patientViewSymptoms});

        patientHomePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {appointmentDeleteBtn, viewAppointmentDetailsBtn});

        patientHomePanelLayout.setVerticalGroup(
            patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientHomePanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(welcomePatient)
                .addGap(46, 46, 46)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(viewAppointmentDetailsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(appointmentDeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel16)
                    .addComponent(patientViewEncounterId)
                    .addComponent(jLabel29)
                    .addComponent(patientViewAppointmentDetails))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel18)
                    .addComponent(patientViewBloodPressure)
                    .addComponent(jLabel22)
                    .addComponent(patientViewBodyTemperature))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel28)
                    .addComponent(patientViewPulseRate)
                    .addComponent(jLabel21)
                    .addComponent(patientViewRespirationRate))
                .addGap(18, 18, 18)
                .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel32)
                    .addComponent(patientEncounterDate)
                    .addComponent(jLabel20)
                    .addComponent(patientViewEncounterTime))
                .addGap(18, 18, 18)
                .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(jLabel19)
                    .addComponent(patientViewSymptoms)
                    .addComponent(patientViewDiagnosis))
                .addContainerGap())
        );

        patientViewPanel.add(patientHomePanel, "card5");

        searchDoctorPanel.setBackground(new java.awt.Color(255, 255, 255));

        patientTable.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Sn No.", "Doctor", "Speciality", "Degree", "Availability", "Contact"
            }
        ));
        patientTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane6.setViewportView(patientTable);

        bookAppointmentBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        bookAppointmentBtn.setText("Request Apppointment");
        bookAppointmentBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bookAppointmentBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bookAppointmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookAppointmentBtnActionPerformed(evt);
            }
        });

        hospitalComboBoxPatient.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        hospitalComboBoxPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalComboBoxPatientActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel1.setText("List of nearby hospitals from your location");

        patientAddressDoctorSearchLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientAddressDoctorSearchLabel.setText("You address :");

        jLabel30.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel30.setText("Please select a doctor from the selected hospital to request an appointment");

        patientAddressDoctorSearchLabel1.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        patientAddressDoctorSearchLabel1.setText("Search doctors in your nearby hospitals");

        javax.swing.GroupLayout searchDoctorPanelLayout = new javax.swing.GroupLayout(searchDoctorPanel);
        searchDoctorPanel.setLayout(searchDoctorPanelLayout);
        searchDoctorPanelLayout.setHorizontalGroup(
            searchDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchDoctorPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(searchDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bookAppointmentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(searchDoctorPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(28, 28, 28)
                        .addComponent(hospitalComboBoxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(patientAddressDoctorSearchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 781, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientAddressDoctorSearchLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(145, 145, 145))
        );
        searchDoctorPanelLayout.setVerticalGroup(
            searchDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchDoctorPanelLayout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(patientAddressDoctorSearchLabel1)
                .addGap(32, 32, 32)
                .addComponent(patientAddressDoctorSearchLabel)
                .addGap(29, 29, 29)
                .addGroup(searchDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hospitalComboBoxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jLabel30)
                .addGap(39, 39, 39)
                .addComponent(bookAppointmentBtn)
                .addContainerGap(329, Short.MAX_VALUE))
        );

        patientViewPanel.add(searchDoctorPanel, "card3");

        updatePatientProfilePanel.setBackground(new java.awt.Color(255, 255, 255));

        patientNameLabel2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientNameLabel2.setText("Name");

        patientAgeLabel2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientAgeLabel2.setText("Age");

        patientGenderLabel2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientGenderLabel2.setText("Gender");

        buttonGroupGender.add(maleRadio2);
        maleRadio2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        maleRadio2.setText("Male");

        buttonGroupGender.add(femaleRadio2);
        femaleRadio2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        femaleRadio2.setText("Female");

        buttonGroup2.add(otherRadio2);
        otherRadio2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        otherRadio2.setText("Other");

        patientDOBLabel2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientDOBLabel2.setText("DOB");

        patientPhoneLabel3.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientPhoneLabel3.setText("Contact Number");

        patientEmailLabel2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientEmailLabel2.setText("Contact Email");

        patientEmailTxtField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientEmailTxtField1ActionPerformed(evt);
            }
        });

        patientInsuranceLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientInsuranceLabel1.setText("Health Insurance Plan");

        patientCityLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientCityLabel1.setText("Select your city");

        cityComboBoxPatient1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cityComboBoxPatient1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxPatient1ActionPerformed(evt);
            }
        });

        patientCommunityLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientCommunityLabel1.setText("Select your community");

        communityComboBoxPatient1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        communityComboBoxPatient1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboBoxPatient1ActionPerformed(evt);
            }
        });

        patientHouseLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientHouseLabel1.setText("Select your house");

        houseComboBoxPatient1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        houseComboBoxPatient1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseComboBoxPatient1ActionPerformed(evt);
            }
        });

        patientUsernameLabel2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientUsernameLabel2.setText("Username");

        patientPasswordLabel2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientPasswordLabel2.setText("Password");

        patientConfirmPasswordLabel2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientConfirmPasswordLabel2.setText("Confirm Password");

        patientUpdateBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientUpdateBtn.setText("Update");
        patientUpdateBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        patientUpdateBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        patientUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientUpdateBtnActionPerformed(evt);
            }
        });

        viewPatientProfileBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        viewPatientProfileBtn.setText("View Profile");
        viewPatientProfileBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        viewPatientProfileBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        viewPatientProfileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPatientProfileBtnActionPerformed(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel33.setText("Username cannot be updated");

        jLabel40.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        jLabel40.setText("Manage Profile");

        jLabel41.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        jLabel41.setText("Change your Password");

        javax.swing.GroupLayout updatePatientProfilePanelLayout = new javax.swing.GroupLayout(updatePatientProfilePanel);
        updatePatientProfilePanel.setLayout(updatePatientProfilePanelLayout);
        updatePatientProfilePanelLayout.setHorizontalGroup(
            updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updatePatientProfilePanelLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updatePatientProfilePanelLayout.createSequentialGroup()
                        .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(updatePatientProfilePanelLayout.createSequentialGroup()
                                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientAgeLabel2)
                                    .addComponent(patientNameLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(patientAgeTxtField1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                                    .addComponent(patientNameTxtField1))
                                .addGap(204, 204, 204)
                                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientCityLabel1)
                                    .addComponent(patientInsuranceLabel1)))
                            .addGroup(updatePatientProfilePanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientConfirmPasswordLabel2)
                                    .addComponent(patientUsernameLabel2))
                                .addGap(42, 42, 42)
                                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(patientSetUsernameTxtField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(patientSetPasswordTxtField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(updatePatientProfilePanelLayout.createSequentialGroup()
                                .addGap(424, 424, 424)
                                .addComponent(jLabel33))
                            .addGroup(updatePatientProfilePanelLayout.createSequentialGroup()
                                .addGap(166, 166, 166)
                                .addComponent(patientConfirmsPasswordTxtField1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(updatePatientProfilePanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(patientPasswordLabel2))
                            .addGroup(updatePatientProfilePanelLayout.createSequentialGroup()
                                .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(162, 162, 162)
                                .addComponent(patientUpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(updatePatientProfilePanelLayout.createSequentialGroup()
                                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(updatePatientProfilePanelLayout.createSequentialGroup()
                                        .addComponent(patientDOBLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(patientDOB1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(updatePatientProfilePanelLayout.createSequentialGroup()
                                        .addComponent(patientPhoneLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(patientPhoneTxtField1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(188, 188, 188)
                                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientEmailLabel2)
                                    .addComponent(patientHouseLabel1))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(updatePatientProfilePanelLayout.createSequentialGroup()
                        .addComponent(patientGenderLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maleRadio2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(femaleRadio2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(otherRadio2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(patientCommunityLabel1)))
                .addGap(46, 46, 46)
                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cityComboBoxPatient1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(patientInsuranceTxtField1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(communityComboBoxPatient1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(houseComboBoxPatient1, 0, 240, Short.MAX_VALUE)
                    .addComponent(patientEmailTxtField1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(126, 126, 126))
            .addGroup(updatePatientProfilePanelLayout.createSequentialGroup()
                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updatePatientProfilePanelLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(viewPatientProfileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(updatePatientProfilePanelLayout.createSequentialGroup()
                        .addGap(369, 369, 369)
                        .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        updatePatientProfilePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cityComboBoxPatient1, communityComboBoxPatient1, houseComboBoxPatient1, patientEmailTxtField1, patientInsuranceTxtField1});

        updatePatientProfilePanelLayout.setVerticalGroup(
            updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updatePatientProfilePanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel40)
                .addGap(36, 36, 36)
                .addComponent(viewPatientProfileBtn)
                .addGap(18, 18, 18)
                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientNameTxtField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientInsuranceLabel1)
                    .addComponent(patientInsuranceTxtField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientNameLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientAgeLabel2)
                    .addComponent(patientAgeTxtField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(patientCityLabel1)
                        .addComponent(cityComboBoxPatient1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientGenderLabel2)
                    .addComponent(maleRadio2)
                    .addComponent(femaleRadio2)
                    .addComponent(otherRadio2)
                    .addComponent(patientCommunityLabel1)
                    .addComponent(communityComboBoxPatient1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientDOBLabel2)
                    .addComponent(patientDOB1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(patientHouseLabel1)
                        .addComponent(houseComboBoxPatient1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientPhoneLabel3)
                    .addComponent(patientPhoneTxtField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientEmailLabel2)
                    .addComponent(patientEmailTxtField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(jLabel41)
                .addGap(22, 22, 22)
                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(patientUsernameLabel2)
                    .addComponent(patientSetUsernameTxtField1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updatePatientProfilePanelLayout.createSequentialGroup()
                        .addComponent(patientSetPasswordTxtField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(patientConfirmsPasswordTxtField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updatePatientProfilePanelLayout.createSequentialGroup()
                        .addComponent(patientPasswordLabel2)
                        .addGap(11, 11, 11)
                        .addComponent(patientConfirmPasswordLabel2)))
                .addGap(17, 17, 17)
                .addComponent(patientUpdateBtn)
                .addContainerGap(278, Short.MAX_VALUE))
        );

        patientViewPanel.add(updatePatientProfilePanel, "card4");

        patientHomeSplitPane.setRightComponent(patientViewPanel);

        javax.swing.GroupLayout patientHomeLayout = new javax.swing.GroupLayout(patientHome);
        patientHome.setLayout(patientHomeLayout);
        patientHomeLayout.setHorizontalGroup(
            patientHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(patientHomeSplitPane)
        );
        patientHomeLayout.setVerticalGroup(
            patientHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(patientHomeSplitPane)
        );

        MainFrame.add(patientHome, "card5");

        controlAdmin.setBackground(new java.awt.Color(0, 0, 0));
        controlAdmin.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        controlAdmin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        controlAdmin.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N

        manageCityBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        manageCityBtn.setText("Manage Cities");
        manageCityBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        manageCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageCityBtnActionPerformed(evt);
            }
        });

        manageHouseBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        manageHouseBtn.setText("Manage Houses");
        manageHouseBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        manageHouseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageHouseBtnActionPerformed(evt);
            }
        });

        manageCommunityBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        manageCommunityBtn.setText("Manage Communities");
        manageCommunityBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        manageCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageCommunityBtnActionPerformed(evt);
            }
        });

        manageDoctorBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        manageDoctorBtn.setText("Manage Doctors");
        manageDoctorBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        manageDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageDoctorBtnActionPerformed(evt);
            }
        });

        manageHospitalBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        manageHospitalBtn.setText("Manage Hospitals");
        manageHospitalBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        manageHospitalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageHospitalBtnActionPerformed(evt);
            }
        });

        managePatientBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        managePatientBtn.setText("Manage Patients");
        managePatientBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        managePatientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managePatientBtnActionPerformed(evt);
            }
        });

        adminLogOut.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        adminLogOut.setText("Log Out");
        adminLogOut.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        adminLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminLogOutActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jButton1.setText("Home");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel42.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel42.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/logo.jpg"))); // NOI18N
        jLabel42.setText("jLabel39");
        jLabel42.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout controlAdminLayout = new javax.swing.GroupLayout(controlAdmin);
        controlAdmin.setLayout(controlAdminLayout);
        controlAdminLayout.setHorizontalGroup(
            controlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlAdminLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(controlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageCityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageCommunityBtn)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageHouseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageHospitalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageDoctorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(managePatientBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adminLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        controlAdminLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {adminLogOut, jButton1, jLabel42, manageCityBtn, manageCommunityBtn, manageDoctorBtn, manageHospitalBtn, manageHouseBtn, managePatientBtn});

        controlAdminLayout.setVerticalGroup(
            controlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlAdminLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel42)
                .addGap(31, 31, 31)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(manageCityBtn)
                .addGap(18, 18, 18)
                .addComponent(manageCommunityBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(manageHouseBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(manageHospitalBtn)
                .addGap(18, 18, 18)
                .addComponent(manageDoctorBtn)
                .addGap(18, 18, 18)
                .addComponent(managePatientBtn)
                .addGap(18, 18, 18)
                .addComponent(adminLogOut)
                .addContainerGap(308, Short.MAX_VALUE))
        );

        adminSplit.setLeftComponent(controlAdmin);

        viewAdmin.setLayout(new java.awt.CardLayout());

        systemAdminHomePage.setBackground(new java.awt.Color(255, 255, 255));

        welcomeAdmin.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        welcomeAdmin.setText("Welcome System Admin");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sn No.", "List of Cities"
            }
        ));
        jScrollPane10.setViewportView(jTable1);

        doctorTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Sn No.", "Doctor Id", "Doctor Name"
            }
        ));
        doctorTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctorTable1MouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(doctorTable1);
        doctorTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        patientManageTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Patient Id", "Patient Name", "Appointment Details"
            }
        ));
        patientManageTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientManageTable1MouseClicked(evt);
            }
        });
        jScrollPane12.setViewportView(patientManageTable1);

        welcomeAdmin1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        welcomeAdmin1.setText("List of cities");

        welcomeAdmin2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        welcomeAdmin2.setText("List of Patients");

        welcomeAdmin3.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        welcomeAdmin3.setText("List of Doctors");

        javax.swing.GroupLayout systemAdminHomePageLayout = new javax.swing.GroupLayout(systemAdminHomePage);
        systemAdminHomePage.setLayout(systemAdminHomePageLayout);
        systemAdminHomePageLayout.setHorizontalGroup(
            systemAdminHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemAdminHomePageLayout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(systemAdminHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(welcomeAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(welcomeAdmin1)
                    .addGroup(systemAdminHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
                        .addComponent(jScrollPane11)
                        .addComponent(jScrollPane10))
                    .addComponent(welcomeAdmin2)
                    .addComponent(welcomeAdmin3))
                .addContainerGap(794, Short.MAX_VALUE))
        );
        systemAdminHomePageLayout.setVerticalGroup(
            systemAdminHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemAdminHomePageLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(welcomeAdmin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(welcomeAdmin1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(welcomeAdmin3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(welcomeAdmin2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(223, Short.MAX_VALUE))
        );

        viewAdmin.add(systemAdminHomePage, "card3");

        adminSplit.setRightComponent(viewAdmin);

        javax.swing.GroupLayout systemAdminHomeLayout = new javax.swing.GroupLayout(systemAdminHome);
        systemAdminHome.setLayout(systemAdminHomeLayout);
        systemAdminHomeLayout.setHorizontalGroup(
            systemAdminHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminSplit)
        );
        systemAdminHomeLayout.setVerticalGroup(
            systemAdminHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminSplit, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        MainFrame.add(systemAdminHome, "card4");

        manageCitiesPanel.setBackground(new java.awt.Color(255, 255, 255));

        addCityLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        addCityLabel.setText("Add a new City");

        addNewCityBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        addNewCityBtn.setText("Add");
        addNewCityBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addNewCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewCityBtnActionPerformed(evt);
            }
        });

        cititsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sn No.", "Cities"
            }
        ));
        cititsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cititsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cititsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(cititsTable);

        deleteCityBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        deleteCityBtn.setText("Delete City");
        deleteCityBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deleteCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCityBtnActionPerformed(evt);
            }
        });

        updateCityNameLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        updateCityNameLabel.setText("Update City");

        updateCityBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        updateCityBtn.setText("Update");
        updateCityBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        updateCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCityBtnActionPerformed(evt);
            }
        });

        jLabel35.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        jLabel35.setText("List of Cities");

        javax.swing.GroupLayout manageCitiesPanelLayout = new javax.swing.GroupLayout(manageCitiesPanel);
        manageCitiesPanel.setLayout(manageCitiesPanelLayout);
        manageCitiesPanelLayout.setHorizontalGroup(
            manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                        .addGap(255, 255, 255)
                        .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                                .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                                        .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                                                .addComponent(addCityLabel)
                                                .addGap(44, 44, 44)
                                                .addComponent(addNewCityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                                                .addComponent(updateCityNameLabel)
                                                .addGap(62, 62, 62)
                                                .addComponent(updateCityNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(54, 54, 54))
                                    .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                                        .addComponent(addNewCityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(updateCityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(82, 82, 82)))
                                .addGap(4, 4, 4)
                                .addComponent(deleteCityBtn))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                        .addGap(257, 257, 257)
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(852, Short.MAX_VALUE))
        );

        manageCitiesPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addNewCityBtn, deleteCityBtn, updateCityBtn});

        manageCitiesPanelLayout.setVerticalGroup(
            manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel35)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCityLabel)
                    .addComponent(addNewCityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateCityNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateCityNameLabel))
                .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(addNewCityBtn))
                    .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateCityBtn)
                            .addComponent(deleteCityBtn))))
                .addContainerGap(413, Short.MAX_VALUE))
        );

        MainFrame.add(manageCitiesPanel, "card6");

        manageCommunitiesPanel.setBackground(new java.awt.Color(255, 255, 255));

        addCommunityLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        addCommunityLabel.setText("Community Name");

        addCommunityAdminUsernameLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        addCommunityAdminUsernameLabel.setText("Community Admin Username");

        addCommunityAdminPasswordLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        addCommunityAdminPasswordLabel.setText("Community Admin Password");

        citiesComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        citiesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        citiesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                citiesComboBoxActionPerformed(evt);
            }
        });

        addCommunityBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addCommunityBtn.setText("Add a new Community");
        addCommunityBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addCommunityBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCommunityBtnActionPerformed(evt);
            }
        });

        communityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sn No.", "Community"
            }
        ));
        communityTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                communityTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(communityTable);

        updateCommunityBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        updateCommunityBtn.setText("Update");
        updateCommunityBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        updateCommunityBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCommunityBtnActionPerformed(evt);
            }
        });

        deleteCommunityBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        deleteCommunityBtn.setText("Delete");
        deleteCommunityBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deleteCommunityBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCommunityBtnActionPerformed(evt);
            }
        });

        addCommunityAdminPasswordLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        addCommunityAdminPasswordLabel1.setText("Confirm Password");

        javax.swing.GroupLayout manageCommunitiesPanelLayout = new javax.swing.GroupLayout(manageCommunitiesPanel);
        manageCommunitiesPanel.setLayout(manageCommunitiesPanelLayout);
        manageCommunitiesPanelLayout.setHorizontalGroup(
            manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addCommunityAdminPasswordLabel)
                    .addComponent(addCommunityLabel)
                    .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                        .addComponent(addCommunityBtn)
                        .addGap(50, 50, 50)
                        .addComponent(updateCommunityBtn)
                        .addGap(71, 71, 71)
                        .addComponent(deleteCommunityBtn))
                    .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                        .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addCommunityAdminUsernameLabel)
                            .addComponent(addCommunityAdminPasswordLabel1))
                        .addGap(27, 27, 27)
                        .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addCommunityTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                            .addComponent(addCommunityAdminUsernameTxtField)
                            .addComponent(communityAdminPasswordTxtField)
                            .addComponent(communityAdminPasswordTxtField1)))
                    .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2)
                        .addComponent(citiesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        manageCommunitiesPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addCommunityBtn, deleteCommunityBtn, updateCommunityBtn});

        manageCommunitiesPanelLayout.setVerticalGroup(
            manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageCommunitiesPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(citiesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCommunityLabel)
                    .addComponent(addCommunityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCommunityAdminUsernameLabel)
                    .addComponent(addCommunityAdminUsernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addCommunityAdminPasswordLabel)
                    .addComponent(communityAdminPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(communityAdminPasswordTxtField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCommunityAdminPasswordLabel1))
                .addGap(24, 24, 24)
                .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCommunityBtn)
                    .addComponent(updateCommunityBtn)
                    .addComponent(deleteCommunityBtn))
                .addContainerGap(405, Short.MAX_VALUE))
        );

        MainFrame.add(manageCommunitiesPanel, "card7");

        manageHospitalsPanel.setBackground(new java.awt.Color(255, 255, 255));

        cityComboBoxHospital.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cityComboBoxHospital.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cityComboBoxHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxHospitalActionPerformed(evt);
            }
        });

        communityComboBoxHospital.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        communityComboBoxHospital.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        communityComboBoxHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboBoxHospitalActionPerformed(evt);
            }
        });

        hospitalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sn No.", "Hospital"
            }
        ));
        hospitalTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hospitalTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(hospitalTable);

        addHospitalLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        addHospitalLabel.setText("Hospital Name");

        addHospitalBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        addHospitalBtn.setText("Add New Hospital");
        addHospitalBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addHospitalBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addHospitalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHospitalBtnActionPerformed(evt);
            }
        });

        updateHospitalBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        updateHospitalBtn.setText("Update Hospital Details");
        updateHospitalBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        updateHospitalBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateHospitalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateHospitalBtnActionPerformed(evt);
            }
        });

        hospitalDeleteBtn.setText("Delete");
        hospitalDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalDeleteBtnActionPerformed(evt);
            }
        });

        addHospitalAdminUsernameLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        addHospitalAdminUsernameLabel.setText("Set Hospital Admin Username");

        addHospitalAdminPasswordLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        addHospitalAdminPasswordLabel.setText("Set Hospital Admin Password");

        addHospitalAdminPasswordLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        addHospitalAdminPasswordLabel1.setText("Confirm Password");

        javax.swing.GroupLayout manageHospitalsPanelLayout = new javax.swing.GroupLayout(manageHospitalsPanel);
        manageHospitalsPanel.setLayout(manageHospitalsPanelLayout);
        manageHospitalsPanelLayout.setHorizontalGroup(
            manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1214, Short.MAX_VALUE)
                    .addComponent(communityComboBoxHospital, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cityComboBoxHospital, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                        .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addHospitalAdminUsernameLabel)
                            .addComponent(addHospitalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addHospitalAdminUsernameTxtField)
                            .addComponent(addHospitalTxtField)))
                    .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                        .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                                .addComponent(addHospitalBtn)
                                .addGap(45, 45, 45)
                                .addComponent(updateHospitalBtn))
                            .addComponent(hospitalDeleteBtn))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                        .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addHospitalAdminPasswordLabel)
                            .addComponent(addHospitalAdminPasswordLabel1))
                        .addGap(12, 12, 12)
                        .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addHospitalAdminPasswordTxtField1)
                            .addComponent(addHospitalAdminPasswordTxtField))))
                .addGap(159, 159, 159))
        );

        manageHospitalsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addHospitalBtn, updateHospitalBtn});

        manageHospitalsPanelLayout.setVerticalGroup(
            manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(cityComboBoxHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(communityComboBoxHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHospitalLabel)
                    .addComponent(addHospitalTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHospitalAdminUsernameLabel)
                    .addComponent(addHospitalAdminUsernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHospitalAdminPasswordLabel)
                    .addComponent(addHospitalAdminPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHospitalAdminPasswordLabel1)
                    .addComponent(addHospitalAdminPasswordTxtField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(addHospitalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(updateHospitalBtn))
                    .addComponent(hospitalDeleteBtn))
                .addContainerGap(345, Short.MAX_VALUE))
        );

        MainFrame.add(manageHospitalsPanel, "card8");

        manageHousesPanel.setBackground(new java.awt.Color(255, 255, 255));

        addHouseLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        addHouseLabel.setText("Enter house details and Zipcode:");

        addHouseBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        addHouseBtn.setText("Add House Details");
        addHouseBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addHouseBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addHouseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHouseBtnActionPerformed(evt);
            }
        });

        cityComboBoxHouse.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cityComboBoxHouse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cityComboBoxHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxHouseActionPerformed(evt);
            }
        });

        communityComboBoxHouse.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        communityComboBoxHouse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        communityComboBoxHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboBoxHouseActionPerformed(evt);
            }
        });

        houseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sn No.", "House Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        houseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                houseTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(houseTable);

        houseUpdateBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        houseUpdateBtn.setText("Update House Details");
        houseUpdateBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        houseUpdateBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        houseUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseUpdateBtnActionPerformed(evt);
            }
        });

        houseDeleteBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        houseDeleteBtn.setText("Delete");
        houseDeleteBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        houseDeleteBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        houseDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseDeleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageHousesPanelLayout = new javax.swing.GroupLayout(manageHousesPanel);
        manageHousesPanel.setLayout(manageHousesPanelLayout);
        manageHousesPanelLayout.setHorizontalGroup(
            manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageHousesPanelLayout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(communityComboBoxHouse, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cityComboBoxHouse, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(manageHousesPanelLayout.createSequentialGroup()
                        .addGroup(manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(manageHousesPanelLayout.createSequentialGroup()
                                .addComponent(addHouseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(267, 267, 267)
                                .addComponent(houseUpdateBtn))
                            .addGroup(manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(manageHousesPanelLayout.createSequentialGroup()
                                    .addComponent(addHouseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(addHouseTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 226, Short.MAX_VALUE)
                        .addComponent(houseDeleteBtn)))
                .addContainerGap(513, Short.MAX_VALUE))
        );

        manageHousesPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {houseDeleteBtn, houseUpdateBtn});

        manageHousesPanelLayout.setVerticalGroup(
            manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageHousesPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(cityComboBoxHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(communityComboBoxHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHouseLabel)
                    .addComponent(addHouseTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(addHouseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(houseUpdateBtn)
                    .addComponent(houseDeleteBtn))
                .addContainerGap(396, Short.MAX_VALUE))
        );

        MainFrame.add(manageHousesPanel, "card9");

        manageDoctorsPanel.setBackground(new java.awt.Color(255, 255, 255));

        cityComboBoxDoctor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cityComboBoxDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cityComboBoxDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxDoctorActionPerformed(evt);
            }
        });

        communityComboBoxDoctor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        communityComboBoxDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        communityComboBoxDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboBoxDoctorActionPerformed(evt);
            }
        });

        hospitalComboBoxDoctor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        hospitalComboBoxDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        hospitalComboBoxDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalComboBoxDoctorActionPerformed(evt);
            }
        });

        addDoctorBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        addDoctorBtn.setText("Save New Doctor");
        addDoctorBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDoctorBtnActionPerformed(evt);
            }
        });

        updateDoctorBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        updateDoctorBtn.setText("Update Selected Doctor");
        updateDoctorBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        updateDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDoctorBtnActionPerformed(evt);
            }
        });

        deleteDoctorBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        deleteDoctorBtn.setText("Delete");
        deleteDoctorBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deleteDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDoctorBtnActionPerformed(evt);
            }
        });

        patientNameLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientNameLabel1.setText("Name");

        doctorNameTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorNameTxtFieldActionPerformed(evt);
            }
        });

        patientAgeLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientAgeLabel1.setText("Age");

        patientGenderLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientGenderLabel1.setText("Gender");

        buttonGroup1.add(maleRadio1);
        maleRadio1.setText("Male");

        buttonGroup1.add(femaleRadio1);
        femaleRadio1.setText("Female");

        buttonGroup1.add(otherRadio1);
        otherRadio1.setText("Other");

        patientDOBLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientDOBLabel1.setText("DOB");

        patientPhoneLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientPhoneLabel1.setText("Degree");

        patientEmailLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientEmailLabel1.setText("Contact Email");

        doctorEmailTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorEmailTxtFieldActionPerformed(evt);
            }
        });

        patientUsernameLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientUsernameLabel1.setText("Username");

        patientPasswordLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientPasswordLabel1.setText("Password");

        patientConfirmPasswordLabel1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientConfirmPasswordLabel1.setText("Confirm Password");

        patientPhoneLabel2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientPhoneLabel2.setText("Contact Number");

        doctorSpeciality.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        doctorSpeciality.setText("Speciality");

        doctorSpeciality1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        doctorSpeciality1.setText("Availability");

        doctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Sno", "Doctor Name", "Doctor Id"
            }
        ));
        doctorTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        doctorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctorTableMouseClicked(evt);
            }
        });
        jScrollPane13.setViewportView(doctorTable);

        javax.swing.GroupLayout manageDoctorsPanelLayout = new javax.swing.GroupLayout(manageDoctorsPanel);
        manageDoctorsPanel.setLayout(manageDoctorsPanelLayout);
        manageDoctorsPanelLayout.setHorizontalGroup(
            manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(cityComboBoxDoctor, javax.swing.GroupLayout.Alignment.LEADING, 0, 399, Short.MAX_VALUE)
                                .addComponent(communityComboBoxDoctor, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 812, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(hospitalComboBoxDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(patientPasswordLabel1))
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientAgeLabel1)
                                    .addComponent(patientNameLabel1)
                                    .addComponent(patientGenderLabel1)
                                    .addComponent(patientDOBLabel1)
                                    .addComponent(patientPhoneLabel2)
                                    .addComponent(patientConfirmPasswordLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(doctorConfirmsPasswordTxtField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doctorSetPasswordTxtField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doctorSetUsernameTxtField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doctorPhoneTxtField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doctorDOB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doctorNameTxtField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                            .addComponent(maleRadio1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(femaleRadio1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(otherRadio1))
                                        .addComponent(doctorAgeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(patientUsernameLabel1))
                        .addGap(125, 125, 125)
                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientEmailLabel1)
                                    .addComponent(doctorSpeciality1)
                                    .addComponent(patientPhoneLabel1)
                                    .addComponent(doctorSpeciality))
                                .addGap(28, 28, 28)
                                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(doctorEmailTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(doctorDegreeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doctorSpecialityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doctorAvailabilityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(addDoctorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateDoctorBtn)
                            .addComponent(deleteDoctorBtn))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        manageDoctorsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addDoctorBtn, deleteDoctorBtn, updateDoctorBtn});

        manageDoctorsPanelLayout.setVerticalGroup(
            manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(cityComboBoxDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(communityComboBoxDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(hospitalComboBoxDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientNameLabel1)
                    .addComponent(doctorNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doctorSpeciality)
                    .addComponent(doctorSpecialityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientAgeLabel1)
                    .addComponent(doctorAgeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientPhoneLabel1)
                    .addComponent(doctorDegreeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientGenderLabel1)
                    .addComponent(maleRadio1)
                    .addComponent(femaleRadio1)
                    .addComponent(otherRadio1)
                    .addComponent(doctorSpeciality1)
                    .addComponent(doctorAvailabilityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(patientDOBLabel1)
                    .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(patientEmailLabel1)
                        .addComponent(doctorEmailTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(doctorDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientPhoneLabel2)
                    .addComponent(doctorPhoneTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientUsernameLabel1)
                    .addComponent(doctorSetUsernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addDoctorBtn))
                .addGap(18, 18, 18)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientPasswordLabel1)
                    .addComponent(doctorSetPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateDoctorBtn))
                .addGap(23, 23, 23)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientConfirmPasswordLabel1)
                    .addComponent(doctorConfirmsPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteDoctorBtn))
                .addContainerGap(235, Short.MAX_VALUE))
        );

        MainFrame.add(manageDoctorsPanel, "card10");

        controlCommunityPanel.setBackground(new java.awt.Color(0, 0, 0));

        manageCommunityBttn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        manageCommunityBttn.setText("Manage Community");
        manageCommunityBttn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        manageHospitalBtnn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        manageHospitalBtnn.setText("Manage Hospital");
        manageHospitalBtnn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        manageHospitalBttn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        manageHospitalBttn.setText("Manage Houses");
        manageHospitalBttn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        logoutCommunityAdmin.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        logoutCommunityAdmin.setText("Logout");
        logoutCommunityAdmin.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        logoutCommunityAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutCommunityAdminActionPerformed(evt);
            }
        });

        jLabel43.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel43.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/logo.jpg"))); // NOI18N
        jLabel43.setText("jLabel39");
        jLabel43.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout controlCommunityPanelLayout = new javax.swing.GroupLayout(controlCommunityPanel);
        controlCommunityPanel.setLayout(controlCommunityPanelLayout);
        controlCommunityPanelLayout.setHorizontalGroup(
            controlCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlCommunityPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(controlCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(manageCommunityBttn)
                    .addComponent(manageHospitalBtnn)
                    .addComponent(manageHospitalBttn)
                    .addComponent(logoutCommunityAdmin))
                .addGap(18, 18, 18))
            .addGroup(controlCommunityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        controlCommunityPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {logoutCommunityAdmin, manageCommunityBttn, manageHospitalBtnn, manageHospitalBttn});

        controlCommunityPanelLayout.setVerticalGroup(
            controlCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlCommunityPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel43)
                .addGap(39, 39, 39)
                .addComponent(manageCommunityBttn)
                .addGap(18, 18, 18)
                .addComponent(manageHospitalBtnn)
                .addGap(18, 18, 18)
                .addComponent(manageHospitalBttn)
                .addGap(18, 18, 18)
                .addComponent(logoutCommunityAdmin)
                .addContainerGap(425, Short.MAX_VALUE))
        );

        communityAdminSplit.setLeftComponent(controlCommunityPanel);

        viewCommunityAdminPanel.setBackground(new java.awt.Color(255, 255, 255));

        welcomecommunityAdmin.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        welcomecommunityAdmin.setText("Welcome Community Admin");

        javax.swing.GroupLayout viewCommunityAdminPanelLayout = new javax.swing.GroupLayout(viewCommunityAdminPanel);
        viewCommunityAdminPanel.setLayout(viewCommunityAdminPanelLayout);
        viewCommunityAdminPanelLayout.setHorizontalGroup(
            viewCommunityAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewCommunityAdminPanelLayout.createSequentialGroup()
                .addGap(193, 193, 193)
                .addComponent(welcomecommunityAdmin)
                .addContainerGap(824, Short.MAX_VALUE))
        );
        viewCommunityAdminPanelLayout.setVerticalGroup(
            viewCommunityAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewCommunityAdminPanelLayout.createSequentialGroup()
                .addGap(207, 207, 207)
                .addComponent(welcomecommunityAdmin)
                .addContainerGap(550, Short.MAX_VALUE))
        );

        communityAdminSplit.setRightComponent(viewCommunityAdminPanel);

        javax.swing.GroupLayout communityAdminHouseLayout = new javax.swing.GroupLayout(communityAdminHouse);
        communityAdminHouse.setLayout(communityAdminHouseLayout);
        communityAdminHouseLayout.setHorizontalGroup(
            communityAdminHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(communityAdminSplit)
        );
        communityAdminHouseLayout.setVerticalGroup(
            communityAdminHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(communityAdminSplit, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        MainFrame.add(communityAdminHouse, "card13");

        doctorControlPanel.setBackground(new java.awt.Color(0, 0, 0));

        addEncounterDetailsBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        addEncounterDetailsBtn.setText("Manage Appointments");
        addEncounterDetailsBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addEncounterDetailsBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addEncounterDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEncounterDetailsBtnActionPerformed(evt);
            }
        });

        manageProfileBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        manageProfileBtn.setText("View Profile");
        manageProfileBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        manageProfileBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        manageProfileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageProfileBtnActionPerformed(evt);
            }
        });

        doctorLogOutBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        doctorLogOutBtn.setText("Log Out");
        doctorLogOutBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        doctorLogOutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        doctorLogOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorLogOutBtnActionPerformed(evt);
            }
        });

        jLabel44.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel44.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/logo.jpg"))); // NOI18N
        jLabel44.setText("jLabel39");
        jLabel44.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout doctorControlPanelLayout = new javax.swing.GroupLayout(doctorControlPanel);
        doctorControlPanel.setLayout(doctorControlPanelLayout);
        doctorControlPanelLayout.setHorizontalGroup(
            doctorControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doctorControlPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(doctorControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(doctorLogOutBtn)
                    .addComponent(manageProfileBtn)
                    .addComponent(addEncounterDetailsBtn)
                    .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(709, 709, 709))
        );

        doctorControlPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addEncounterDetailsBtn, doctorLogOutBtn, manageProfileBtn});

        doctorControlPanelLayout.setVerticalGroup(
            doctorControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorControlPanelLayout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jLabel44)
                .addGap(66, 66, 66)
                .addComponent(addEncounterDetailsBtn)
                .addGap(36, 36, 36)
                .addComponent(manageProfileBtn)
                .addGap(38, 38, 38)
                .addComponent(doctorLogOutBtn)
                .addContainerGap(115, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(doctorControlPanel);

        doctorViewPanel.setLayout(new java.awt.CardLayout());

        doctorHomePanel.setBackground(new java.awt.Color(255, 255, 255));

        welcomeDoctor.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        welcomeDoctor.setText("Welcom Doctor");

        javax.swing.GroupLayout doctorHomePanelLayout = new javax.swing.GroupLayout(doctorHomePanel);
        doctorHomePanel.setLayout(doctorHomePanelLayout);
        doctorHomePanelLayout.setHorizontalGroup(
            doctorHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorHomePanelLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(welcomeDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(168, Short.MAX_VALUE))
        );
        doctorHomePanelLayout.setVerticalGroup(
            doctorHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorHomePanelLayout.createSequentialGroup()
                .addGap(179, 179, 179)
                .addComponent(welcomeDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(551, Short.MAX_VALUE))
        );

        doctorViewPanel.add(doctorHomePanel, "card2");

        doctorViewProfilePanel.setBackground(new java.awt.Color(255, 255, 255));

        patientNameLabel3.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientNameLabel3.setText("Name");

        patientAgeLabel3.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientAgeLabel3.setText("Age");

        patientGenderLabel3.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientGenderLabel3.setText("Gender");

        patientDOBLabel3.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientDOBLabel3.setText("DOB");

        doctorSpeciality2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        doctorSpeciality2.setText("Speciality");

        patientPhoneLabel4.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientPhoneLabel4.setText("Degree");

        patientPhoneLabel5.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientPhoneLabel5.setText("Contact Number");

        patientEmailLabel3.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientEmailLabel3.setText("Contact Email");

        patientUsernameLabel3.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientUsernameLabel3.setText("Username");

        patientPasswordLabel3.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientPasswordLabel3.setText("Password");

        patientConfirmPasswordLabel3.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientConfirmPasswordLabel3.setText("Confirm Password");

        doctorSpeciality3.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        doctorSpeciality3.setText("Availability");

        doctorUsernameViewLabel.setText("a");

        doctorNameViewLabel.setText("a");

        doctorAgeViewLabel.setText("a");

        doctorEmailViewLabel.setText("a");

        doctorGenderViewLabel.setText("a");

        doctorDOBViewLabel.setText("a");

        doctorSpecialityViewLabel.setText("a");

        doctorDegreeViewLabel.setText("a");

        doctorContactViewLabel.setText("a");

        doctorChangePassword.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        doctorChangePassword.setText("Change Password");
        doctorChangePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorChangePasswordActionPerformed(evt);
            }
        });

        doctorAvailabilityViewLabel.setText("a");

        jLabel34.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel34.setText("Please contact hospital admin to edit you profile details. You can just change your password");

        javax.swing.GroupLayout doctorViewProfilePanelLayout = new javax.swing.GroupLayout(doctorViewProfilePanel);
        doctorViewProfilePanel.setLayout(doctorViewProfilePanelLayout);
        doctorViewProfilePanelLayout.setHorizontalGroup(
            doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorViewProfilePanelLayout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(doctorViewProfilePanelLayout.createSequentialGroup()
                        .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(doctorViewProfilePanelLayout.createSequentialGroup()
                                .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientConfirmPasswordLabel3)
                                    .addComponent(patientPasswordLabel3)
                                    .addComponent(patientUsernameLabel3)
                                    .addComponent(patientEmailLabel3)
                                    .addComponent(patientPhoneLabel5))
                                .addGap(33, 33, 33)
                                .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(doctorViewProfilePanelLayout.createSequentialGroup()
                                        .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(doctorAvailabilityViewLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(doctorContactViewLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(doctorEmailViewLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(doctorConfirmPassViewLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                                            .addComponent(doctorPasswordViewLabel))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(doctorChangePassword))
                                    .addGroup(doctorViewProfilePanelLayout.createSequentialGroup()
                                        .addComponent(doctorUsernameViewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(doctorViewProfilePanelLayout.createSequentialGroup()
                                .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientNameLabel3)
                                    .addComponent(patientAgeLabel3)
                                    .addComponent(patientGenderLabel3)
                                    .addComponent(patientDOBLabel3)
                                    .addComponent(doctorSpeciality2)
                                    .addComponent(patientPhoneLabel4))
                                .addGap(87, 87, 87)
                                .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(doctorSpecialityViewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doctorDegreeViewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doctorDOBViewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doctorAgeViewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doctorGenderViewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doctorNameViewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(81, 81, 81))
                    .addGroup(doctorViewProfilePanelLayout.createSequentialGroup()
                        .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel34)
                            .addComponent(doctorSpeciality3))
                        .addGap(0, 30, Short.MAX_VALUE))))
        );
        doctorViewProfilePanelLayout.setVerticalGroup(
            doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorViewProfilePanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel34)
                .addGap(18, 18, 18)
                .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientNameLabel3)
                    .addComponent(doctorNameViewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(doctorViewProfilePanelLayout.createSequentialGroup()
                        .addComponent(patientAgeLabel3)
                        .addGap(15, 15, 15)
                        .addComponent(patientGenderLabel3)
                        .addGap(9, 9, 9))
                    .addGroup(doctorViewProfilePanelLayout.createSequentialGroup()
                        .addComponent(doctorAgeViewLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(doctorGenderViewLabel)
                        .addGap(18, 18, 18)))
                .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientDOBLabel3)
                    .addComponent(doctorDOBViewLabel))
                .addGap(14, 14, 14)
                .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctorSpeciality2)
                    .addComponent(doctorSpecialityViewLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientPhoneLabel4)
                    .addComponent(doctorDegreeViewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctorSpeciality3)
                    .addComponent(doctorAvailabilityViewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientPhoneLabel5)
                    .addComponent(doctorContactViewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientEmailLabel3)
                    .addComponent(doctorEmailViewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(doctorViewProfilePanelLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(patientUsernameLabel3)
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doctorViewProfilePanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(doctorUsernameViewLabel)
                        .addGap(18, 18, 18)))
                .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientPasswordLabel3)
                    .addComponent(doctorPasswordViewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(doctorViewProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientConfirmPasswordLabel3)
                    .addComponent(doctorConfirmPassViewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doctorChangePassword))
                .addGap(389, 389, 389))
        );

        doctorViewPanel.add(doctorViewProfilePanel, "card4");

        doctorManageAppointmentsPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel3.setText("List of patients that have requested an appointment with you");

        encounterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Sn No.", "Patient Id", "Patient Name", "Encounter Id", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        encounterTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        encounterTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encounterTableMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(encounterTable);

        jLabel4.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel4.setText("Patient Details");

        jLabel5.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel5.setText("Name");

        jLabel11.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel11.setText("Insurance");

        jLabel7.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel7.setText("Age");

        jLabel13.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel13.setText("Phone");

        jLabel9.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel9.setText("Gender");

        jLabel14.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel14.setText("Email");

        jLabel17.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel17.setText("Enter Encounter Details");

        jLabel8.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel8.setText("Body Temperature");

        jLabel10.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel10.setText("Blood Pressure");

        jLabel12.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel12.setText("Pulse Rate");

        jLabel15.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel15.setText("Respiration Rate");

        jLabel23.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel23.setText("Encounter Date");

        jLabel24.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel24.setText("Diagnosis");

        jLabel25.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel25.setText("Symptoms");

        patientEncounterSaveBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientEncounterSaveBtn.setText("Save Encounter Details");
        patientEncounterSaveBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        patientEncounterSaveBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        patientEncounterSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientEncounterSaveBtnActionPerformed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel26.setText("Encounter Time");

        hrComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", " ", " " }));

        minComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60" }));

        timeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AM", "PM" }));

        jLabel27.setText("  :");

        javax.swing.GroupLayout doctorManageAppointmentsPanelLayout = new javax.swing.GroupLayout(doctorManageAppointmentsPanel);
        doctorManageAppointmentsPanel.setLayout(doctorManageAppointmentsPanelLayout);
        doctorManageAppointmentsPanelLayout.setHorizontalGroup(
            doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                        .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel25))
                                .addGap(18, 18, 18)
                                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                        .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(patientBodyTempTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(patientBloodPressureTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(encounterDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(patientSymptomsTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                                .addGap(42, 42, 42)
                                                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel15)
                                                    .addComponent(jLabel12)
                                                    .addComponent(jLabel24)))
                                            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                                .addGap(45, 45, 45)
                                                .addComponent(patientEncounterSaveBtn)))
                                        .addGap(18, 18, 18)
                                        .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(patientDiagnosisTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(patientPulseTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(patientRespRateTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                        .addComponent(hrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(minComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(timeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(patientDetailsGenderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                        .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel7))
                                        .addGap(18, 18, 18)
                                        .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(patientDetailsAgeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(patientDetailsNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(4, 4, 4)
                                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(patientDetailsEmailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(patientDetailsPhoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(18, 18, 18)
                                        .addComponent(patientDetailsInsuranceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                        .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23)
                            .addComponent(jLabel26))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        doctorManageAppointmentsPanelLayout.setVerticalGroup(
            doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel11)
                    .addComponent(patientDetailsNameLabel)
                    .addComponent(patientDetailsInsuranceLabel))
                .addGap(18, 18, 18)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel13)
                    .addComponent(patientDetailsAgeLabel)
                    .addComponent(patientDetailsPhoneLabel))
                .addGap(18, 18, 18)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel14)
                    .addComponent(patientDetailsGenderLabel)
                    .addComponent(patientDetailsEmailLabel))
                .addGap(24, 24, 24)
                .addComponent(jLabel17)
                .addGap(40, 40, 40)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientPulseTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(patientBodyTempTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel10)
                    .addComponent(patientBloodPressureTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(patientRespRateTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel23)
                    .addComponent(encounterDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24)
                    .addComponent(patientDiagnosisTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(hrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(minComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(patientSymptomsTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientEncounterSaveBtn))
                .addContainerGap(157, Short.MAX_VALUE))
        );

        doctorViewPanel.add(doctorManageAppointmentsPanel, "card3");

        jSplitPane1.setRightComponent(doctorViewPanel);

        javax.swing.GroupLayout doctorHomeLayout = new javax.swing.GroupLayout(doctorHome);
        doctorHome.setLayout(doctorHomeLayout);
        doctorHomeLayout.setHorizontalGroup(
            doctorHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1548, Short.MAX_VALUE)
        );
        doctorHomeLayout.setVerticalGroup(
            doctorHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
        );

        MainFrame.add(doctorHome, "card14");

        communityAdminControlPanel.setBackground(new java.awt.Color(0, 0, 0));

        communityAdminLogOutBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        communityAdminLogOutBtn.setText("Log Out");
        communityAdminLogOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityAdminLogOutBtnActionPerformed(evt);
            }
        });

        communityAdminManageHousesBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        communityAdminManageHousesBtn.setText("Manage Houses");
        communityAdminManageHousesBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        communityAdminManageHousesBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        communityAdminManageHousesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityAdminManageHousesBtnActionPerformed(evt);
            }
        });

        communityAdminManageHosbitalBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        communityAdminManageHosbitalBtn.setText("Manage Hospitals");
        communityAdminManageHosbitalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityAdminManageHosbitalBtnActionPerformed(evt);
            }
        });

        jLabel45.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel45.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/logo.jpg"))); // NOI18N
        jLabel45.setText("jLabel39");
        jLabel45.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout communityAdminControlPanelLayout = new javax.swing.GroupLayout(communityAdminControlPanel);
        communityAdminControlPanel.setLayout(communityAdminControlPanelLayout);
        communityAdminControlPanelLayout.setHorizontalGroup(
            communityAdminControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(communityAdminControlPanelLayout.createSequentialGroup()
                .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(communityAdminControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(communityAdminControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(communityAdminManageHousesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(communityAdminManageHosbitalBtn)
                    .addComponent(communityAdminLogOutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        communityAdminControlPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {communityAdminLogOutBtn, communityAdminManageHosbitalBtn, communityAdminManageHousesBtn});

        communityAdminControlPanelLayout.setVerticalGroup(
            communityAdminControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, communityAdminControlPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel45)
                .addGap(48, 48, 48)
                .addComponent(communityAdminManageHousesBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(communityAdminManageHosbitalBtn)
                .addGap(18, 18, 18)
                .addComponent(communityAdminLogOutBtn)
                .addContainerGap(449, Short.MAX_VALUE))
        );

        jSplitPane2.setLeftComponent(communityAdminControlPanel);

        communityViewControlPanel.setLayout(new java.awt.CardLayout());
        jSplitPane2.setRightComponent(communityViewControlPanel);

        javax.swing.GroupLayout communityAdminHomeLayout = new javax.swing.GroupLayout(communityAdminHome);
        communityAdminHome.setLayout(communityAdminHomeLayout);
        communityAdminHomeLayout.setHorizontalGroup(
            communityAdminHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1548, Short.MAX_VALUE)
        );
        communityAdminHomeLayout.setVerticalGroup(
            communityAdminHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2)
        );

        MainFrame.add(communityAdminHome, "card15");

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        hospitalAdminLogOutBtn.setBackground(new java.awt.Color(242, 242, 242));
        hospitalAdminLogOutBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        hospitalAdminLogOutBtn.setText("Log Out");
        hospitalAdminLogOutBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        hospitalAdminLogOutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        hospitalAdminLogOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalAdminLogOutBtnActionPerformed(evt);
            }
        });

        jLabel46.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel46.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/logo.jpg"))); // NOI18N
        jLabel46.setText("jLabel39");
        jLabel46.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(hospitalAdminLogOutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel46)
                .addGap(48, 48, 48)
                .addComponent(hospitalAdminLogOutBtn)
                .addContainerGap(516, Short.MAX_VALUE))
        );

        jSplitPane3.setLeftComponent(jPanel1);

        hospitalAdminViewPanel.setLayout(new java.awt.CardLayout());
        jSplitPane3.setRightComponent(hospitalAdminViewPanel);

        javax.swing.GroupLayout hospitalAdminHomeLayout = new javax.swing.GroupLayout(hospitalAdminHome);
        hospitalAdminHome.setLayout(hospitalAdminHomeLayout);
        hospitalAdminHomeLayout.setHorizontalGroup(
            hospitalAdminHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1548, Short.MAX_VALUE)
        );
        hospitalAdminHomeLayout.setVerticalGroup(
            hospitalAdminHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane3)
        );

        MainFrame.add(hospitalAdminHome, "card16");

        adminManagePatientPanel.setBackground(new java.awt.Color(255, 255, 255));

        patientManageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Patient Id", "Patient Name", "Appointment Details"
            }
        ));
        patientManageTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientManageTableMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(patientManageTable);

        patientNameLabel4.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientNameLabel4.setText("Name");

        patientAgeLabel4.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientAgeLabel4.setText("Age");

        patientGenderLabel4.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientGenderLabel4.setText("Gender");

        buttonGroup3.add(maleRadio3);
        maleRadio3.setText("Male");

        buttonGroup3.add(femaleRadio3);
        femaleRadio3.setText("Female");

        buttonGroup3.add(otherRadio3);
        otherRadio3.setText("Other");

        patientDOBLabel4.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientDOBLabel4.setText("DOB");

        patientPhoneLabel6.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientPhoneLabel6.setText("Contact Number");

        patientEmailLabel4.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientEmailLabel4.setText("Contact Email");

        patientEmailTxtField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientEmailTxtField2ActionPerformed(evt);
            }
        });

        patientInsuranceLabel2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientInsuranceLabel2.setText("Health Insurance Plan");

        patientCityLabel2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientCityLabel2.setText("Select your city");

        cityComboBoxPatient2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxPatient2ActionPerformed(evt);
            }
        });

        patientCommunityLabel2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientCommunityLabel2.setText("Select your community");

        communityComboBoxPatient2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboBoxPatient2ActionPerformed(evt);
            }
        });

        patientHouseLabel2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientHouseLabel2.setText("Select your house");

        houseComboBoxPatient2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseComboBoxPatient2ActionPerformed(evt);
            }
        });

        patientUsernameLabel4.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientUsernameLabel4.setText("Username");

        patientPasswordLabel4.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientPasswordLabel4.setText("Password");

        patientConfirmPasswordLabel4.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientConfirmPasswordLabel4.setText("Confirm Password");

        jLabel36.setText("username cannnot be updated");

        updatePatientAdminBtn.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        updatePatientAdminBtn.setText("Update Patient Details");
        updatePatientAdminBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        updatePatientAdminBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePatientAdminBtnActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jButton2.setText("Deactivate Patient Account");
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        patientConfirmPasswordLabel5.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientConfirmPasswordLabel5.setText("Username cannot be updated");

        patientConfirmPasswordLabel6.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        patientConfirmPasswordLabel6.setText("Select a patient from the table to edit thier details:");

        javax.swing.GroupLayout adminManagePatientPanelLayout = new javax.swing.GroupLayout(adminManagePatientPanel);
        adminManagePatientPanel.setLayout(adminManagePatientPanelLayout);
        adminManagePatientPanelLayout.setHorizontalGroup(
            adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminManagePatientPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel36)
                .addGap(14, 14, 14))
            .addGroup(adminManagePatientPanelLayout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adminManagePatientPanelLayout.createSequentialGroup()
                        .addComponent(updatePatientAdminBtn)
                        .addGap(43, 43, 43)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(adminManagePatientPanelLayout.createSequentialGroup()
                        .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientUsernameLabel4)
                            .addComponent(patientPasswordLabel4)
                            .addComponent(patientConfirmPasswordLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientSetUsernameTxtField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientSetPasswordTxtField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientConfirmsPasswordTxtField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(patientConfirmPasswordLabel5))
                    .addComponent(patientConfirmPasswordLabel6)
                    .addGroup(adminManagePatientPanelLayout.createSequentialGroup()
                        .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientNameLabel4)
                            .addComponent(patientAgeLabel4)
                            .addComponent(patientGenderLabel4)
                            .addComponent(patientDOBLabel4)
                            .addComponent(patientPhoneLabel6)
                            .addComponent(patientEmailLabel4))
                        .addGap(23, 23, 23)
                        .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientAgeTxtField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientNameTxtField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientDOB2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientPhoneTxtField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientEmailTxtField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientInsuranceLabel2)
                            .addComponent(patientCityLabel2)
                            .addComponent(patientCommunityLabel2)
                            .addComponent(patientHouseLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(houseComboBoxPatient2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(communityComboBoxPatient2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cityComboBoxPatient2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientInsuranceTxtField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(adminManagePatientPanelLayout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(maleRadio3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(femaleRadio3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(otherRadio3)))
                .addContainerGap(633, Short.MAX_VALUE))
        );

        adminManagePatientPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {patientAgeTxtField2, patientConfirmsPasswordTxtField2, patientDOB2, patientEmailTxtField2, patientNameTxtField2, patientPhoneTxtField2, patientSetPasswordTxtField2, patientSetUsernameTxtField2});

        adminManagePatientPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cityComboBoxPatient2, communityComboBoxPatient2, houseComboBoxPatient2, patientInsuranceTxtField2});

        adminManagePatientPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton2, updatePatientAdminBtn});

        adminManagePatientPanelLayout.setVerticalGroup(
            adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminManagePatientPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(patientConfirmPasswordLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientInsuranceLabel2)
                    .addComponent(patientNameLabel4)
                    .addComponent(patientNameTxtField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientInsuranceTxtField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientAgeLabel4)
                    .addComponent(patientAgeTxtField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientCityLabel2)
                    .addComponent(cityComboBoxPatient2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientGenderLabel4)
                    .addComponent(maleRadio3)
                    .addComponent(femaleRadio3)
                    .addComponent(otherRadio3)
                    .addComponent(patientCommunityLabel2)
                    .addComponent(communityComboBoxPatient2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(patientDOBLabel4)
                    .addComponent(patientDOB2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientHouseLabel2)
                    .addComponent(houseComboBoxPatient2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientPhoneLabel6)
                    .addComponent(patientPhoneTxtField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientEmailLabel4)
                    .addComponent(patientEmailTxtField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientSetUsernameTxtField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientUsernameLabel4)
                    .addComponent(patientConfirmPasswordLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(patientSetPasswordTxtField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientPasswordLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientConfirmPasswordLabel4)
                    .addComponent(patientConfirmsPasswordTxtField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(adminManagePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updatePatientAdminBtn)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 191, Short.MAX_VALUE)
                .addComponent(jLabel36)
                .addGap(73, 73, 73))
        );

        MainFrame.add(adminManagePatientPanel, "card17");

        getContentPane().add(MainFrame, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
           
    private void userTypeSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTypeSelectActionPerformed
        // TODO add your handling code here:

        userType = userTypeSelect.getSelectedItem().toString();
    }//GEN-LAST:event_userTypeSelectActionPerformed
     
    
    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        // TODO add your handling code here:
        int loginSuccess = 0;
        if("Select".equals(userType)){
          JOptionPane.showMessageDialog(this,"Please select your user type to log in.");
          loginSuccess = 1; 
        }
        else if(usernameTxtField.getText().length()==0 ||passwordTxtField.getText().length()==0){
          JOptionPane.showMessageDialog(this,"Username and Password are required fields");
          loginSuccess = 1;
        }
        else if("not".equals(usernameTxtField.getText())){
          JOptionPane.showMessageDialog(this,"Your account is deactivated. Please reach out to system for accessing again.");
          loginSuccess = 1;
        }
        else if ("System Admin".equals(userType) && usernameTxtField.getText().equals("admin")&& passwordTxtField.getText().equals("admin")){
              changePanel(systemAdminHome);
              loginSuccess = 1;
               populateTableAdmin();
            }
            
            else if ("Patient".equals(userType)){
               
                for(Patient pt : patientList.getPatientList()){
                            
                    Person p = pt.getPerson();
                    if (usernameTxtField.getText().equals(p.getUsername())&& passwordTxtField.getText().equals(p.getPassword()) ){
                         changePanel(patientHome); 
                         loggedInPatient=pt;
                         welcomePatient.setText("Welcome " + p.getPersonName());
                          
                          clearappointmentListTableFields();
                          populateTable6();
                          loginSuccess = 1;
                         break;
        
                    }
                    
                }
                
            }
             else if ("Doctor".equals(userType)){
                 
                for(Doctor d : doctorList.getDoctorList()){       
                    Person p = d.getPerson();
                    if (usernameTxtField.getText().equals(p.getUsername())&& passwordTxtField.getText().equals(p.getPassword()) ){
                         changePanel(doctorHome); 
                         loggedInDoctor=d;
                         welcomeDoctor.setText("Welcome " + p.getPersonName());
                        loginSuccess = 1;
                         break;
        
                }
                   
                
                }
            
            }
        else if ("Community Admin".equals(userType)){
           
                for (City city :cityList.getCitytList()){
                    for (Community cm : city.getCommunityList()){
                    if (usernameTxtField.getText().equals(cm.getAdmin().getPerson().getUsername())&& passwordTxtField.getText().equals(cm.getAdmin().getPerson().getPassword()) ){
                        loggedInAdmin=cm.getAdmin();
                        loggedAdmin=1;
                        loginSuccess = 1;
                        changePanel(communityAdminHome);
                        communityAdminHouseChangePanel(manageHousesPanel);
                        addHouseTxtField.setText("");
                        break;
                    }
                    
                        
                }
            
            }
        }
        else if ("Hospital Admin".equals(userType)){
           
                for (City city :cityList.getCitytList()){
                    for (Community cm : city.getCommunityList()){
                        for(Hospital h : cm.getHospitalList().getHospitalList()){
                    if (usernameTxtField.getText().equals(h.getHospitalAdmin().getPerson().getUsername())&& passwordTxtField.getText().equals(h.getHospitalAdmin().getPerson().getPassword()) ){
                        loggedInAdmin=h.getHospitalAdmin();
                        loggedAdmin=1;
                        loginSuccess = 1;
                        changePanel(hospitalAdminHome); 
                        hospitalAdminViewPanel.removeAll();
                        hospitalAdminViewPanel.add(manageDoctorsPanel);
                        hospitalAdminViewPanel.repaint();
                        hospitalAdminViewPanel.revalidate(); 
                        cityComboBoxDoctor.setVisible(false);
                        clearDoctorRegistrationFields();
                        communityComboBoxDoctor.setVisible(false);
                        
                        hospitalComboBoxDoctor.setVisible(false);
                        
                        populateTable5();
                        break;
                         
                    }
                    
                   
                }
            
                }
            
            }

        }
        

        if (loginSuccess == 0){
            JOptionPane.showMessageDialog(this,"Incorrect Credentials");
        }
        
        
        
           
        usernameTxtField.setText("");
        passwordTxtField.setText("");
        userTypeSelect.setSelectedIndex(0);
        
 
    }//GEN-LAST:event_loginBtnActionPerformed
    private void communityAdminHouseChangePanel(javax.swing.JPanel j){
                        communityViewControlPanel.removeAll();
                        communityViewControlPanel.add(j);
                        communityViewControlPanel.repaint();
                        communityViewControlPanel.revalidate(); 
                        cityComboBoxHouse.setVisible(false);
                        communityComboBoxHouse.setVisible(false);
                        cityComboBoxHospital.setVisible(false);
                        communityComboBoxHospital.setVisible(false);
                        populateTable3();
    }
    private void populateTable6(){
       DefaultTableModel model = (DefaultTableModel) appointmentListTable.getModel();
         model.setRowCount(0);
        
          EncounterHistory encounterHistory = loggedInPatient.getEncounterHistory();
          for(Encounter e:encounterHistory.getEncounterList()){
          Object [] row = new Object[3];
                                row[0] = e;
                                row[1] = "Doctor Id :"+e.getAppointmentDetails();
                                row[2] = e.getStatus();
                                model.addRow(row);
                               
          }

         
    }
    private void changePanel(javax.swing.JPanel j){
        MainFrame.removeAll();
        MainFrame.add(j);
        MainFrame.repaint();
        MainFrame.revalidate(); 
        usernameTxtField.setText("");
        passwordTxtField.setText("");
        userTypeSelect.setSelectedIndex(0);
    }
    private void registrationLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registrationLinkMouseClicked
        // TODO add your handling code here:
        changePanel(patientRegistrationPage);
        cityComboBoxPatient.removeAllItems();
        cityComboBoxPatient.addItem("Select");
        cityComboBoxPatient.setSelectedItem("Select"); 
        for (City c : cityList.getCitytList()){
             cityComboBoxPatient.addItem(c.getCityName());   
         }
        communityComboBoxPatient.removeAllItems();
        communityComboBoxPatient.addItem("Select");
        communityComboBoxPatient.setSelectedItem("Select"); 
        houseComboBoxPatient.removeAllItems();
        houseComboBoxPatient.addItem("Select");
        houseComboBoxPatient.setSelectedItem("Select"); 
        clearRegistrationPageFields();
        
    }//GEN-LAST:event_registrationLinkMouseClicked
    private void clearRegistrationPageFields(){
            patientNameTxtField.setText("");
            patientAgeTxtField.setText("");
            buttonGroupGender.clearSelection();
            patientDOB.setCalendar(null);
            patientPhoneTxtField.setText("");
            patientEmailTxtField.setText("");
            patientInsuranceTxtField.setText("");
            patientSetUsernameTxtField.setText("");
            patientSetPasswordTxtField.setText("");
            patientConfirmsPasswordTxtField.setText("");
            cityComboBoxPatient.setSelectedItem("Select");
            communityComboBoxPatient.setSelectedItem("Select");
            houseComboBoxPatient.setSelectedItem("Select");
    }
    private void clearUpdatePageFields(){
            patientNameTxtField1.setText("");
            patientAgeTxtField1.setText("");
            buttonGroup2.clearSelection();
            patientDOB1.setCalendar(null);
            patientPhoneTxtField1.setText("");
            patientEmailTxtField1.setText("");
            patientInsuranceTxtField1.setText("");
            patientSetUsernameTxtField1.setText("");
            patientSetPasswordTxtField1.setText("");
            patientConfirmsPasswordTxtField1.setText("");
            cityComboBoxPatient1.setSelectedItem("Select");
            communityComboBoxPatient1.setSelectedItem("Select");
            houseComboBoxPatient1.setSelectedItem("Select");
    }
    private void populateTable(){
         
         DefaultTableModel model = (DefaultTableModel) cititsTable.getModel();
         model.setRowCount(0);
         int i =1;
         for (City c : cityList.getCitytList()){
           
           Object [] row = new Object[2];
             row[0] = i;
             row[1] = c;
            
              model.addRow(row);
              i++;
        }
             
             
             
            
            
             
         }
    private boolean validation(String input, String regexPattern){
    Pattern pattern = Pattern.compile(regexPattern,Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(input);
        return matcher.find();
    }
    private void patientRegisterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientRegisterBtnActionPerformed
        // TODO add your handling code here:
       
        try{
            String name = patientNameTxtField.getText();
            if(name.length()==0 || !validation(name,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Name");
             return;
            }
            int age = Integer.parseInt( patientAgeTxtField.getText());
             if(!(age >= 18)){
             JOptionPane.showMessageDialog(this,"Invalid Age. Age should be above 18 yrs"); 
             return;
            }
            String gender;
            if(maleRadio.isSelected()){
                gender= "Male";
            }
            else if(femaleRadio.isSelected()){
                gender= "Female";
            }
            else if(otherRadio.isSelected()){
                    gender = "Other";
                }
             else {
                 gender = "";
             }
            if(gender.length()==0 ){
             JOptionPane.showMessageDialog(this,"Please select your gender");
             return;
            }
             Date dob= patientDOB.getDate();
              if(dob==null){
             JOptionPane.showMessageDialog(this,"Please select your date of birth");
             return;
            }
             String phone=patientPhoneTxtField.getText();
             if(phone.length()==0 ||!validation(phone,"^\\d{10}$")){
             JOptionPane.showMessageDialog(this,"Invalid Phone Number");
             return;
            }
             String email =patientEmailTxtField.getText();
             if(email.length()==0 || !validation(email,"^(.+)@(\\S+)$")){
             JOptionPane.showMessageDialog(this,"Invalid Email");
             return;
            }
             
             String insurance = patientInsuranceTxtField.getText();
             if(insurance.length()==0 || !validation(insurance,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Insurance");
             return;
            }
             String username=patientSetUsernameTxtField.getText();
             if(username.length()==0 || !validation(username,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Usernam.No special character and numbers allowed");
             return;
            }
            for(Person p:personList.getPersonList()){
                if(p.getUsername().equals(username)){
                  JOptionPane.showMessageDialog(this,"Invalid Usernam.This username already exists");
                  return;  
                }
            }
             String password = patientSetPasswordTxtField.getText();
             if(password.length()==0 || !validation(password,"^(?![\\s.]+$)[a-zA-Z0-9@#$]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Password.Only A-Z,a-z,0-9,@,and # are allowed");
             return;
            }
            String confirmPassword = patientConfirmsPasswordTxtField.getText();
            if(!(confirmPassword.equals(password))){
             JOptionPane.showMessageDialog(this,"Confirm Password does not match the set password");
             return;
            }
            String selectedcity = String.valueOf(cityComboBoxPatient.getSelectedItem());
            String selectedcommunity = String.valueOf(communityComboBoxPatient.getSelectedItem());
            String selectedhouse = String.valueOf(houseComboBoxPatient.getSelectedItem());
            if("Select".equals(selectedcity)||"Select".equals(selectedcommunity)||"Select".equals(selectedhouse)){
            JOptionPane.showMessageDialog(this,"Invalid Address. Select all the fields of address");
             return;
            }
            String address = selectedcity+","+selectedcommunity+","+selectedhouse;
//            
              Person person = new Person(name,age,gender,phone,email,insurance,address,patientHouse,dob,username,password);
              personList.addNewPerson(person);
              Patient patient = new Patient(person);
              patientList.addNewPatient(patient);
              
            
           
            JOptionPane.showMessageDialog(this,"Your patient account is successfully registered.");
            clearRegistrationPageFields();
            changePanel(loginPage);
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, "Invalid Input. Error creating patient account");
            System.out.print(e);
            
           
            
        }

    }//GEN-LAST:event_patientRegisterBtnActionPerformed

    private void cancelPatientRegistrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelPatientRegistrationActionPerformed
        // TODO add your handling code here:
            clearRegistrationPageFields();
            changePanel(loginPage);
    }//GEN-LAST:event_cancelPatientRegistrationActionPerformed

    private void manageCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageCityBtnActionPerformed
        // TODO add your handling code here:
        changeAdminPanel(manageCitiesPanel);
        addNewCityTxtField.setText("");
         updateCityNameTxtField.setText("");
        populateTable();
       
        
    }//GEN-LAST:event_manageCityBtnActionPerformed

    private void addNewCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewCityBtnActionPerformed
        // TODO add your handling code here:
        if(addNewCityTxtField.getText().length()==0 ||!validation(addNewCityTxtField.getText(),"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
            JOptionPane.showMessageDialog(this,"Please enter a valid city name"); 
           return;
        }
        for(City c: cityList.getCitytList()){
            if(addNewCityTxtField.getText().equalsIgnoreCase(c.getCityName())){
            JOptionPane.showMessageDialog(this,"City already exists"); 
            addNewCityTxtField.setText("");
         updateCityNameTxtField.setText("");
           return;
            }
                
        }
        
        City city = cityList.addNewCity();
        city.setCityName(addNewCityTxtField.getText());
        JOptionPane.showMessageDialog(this,"New city successfully added.");
        addNewCityTxtField.setText("");
         updateCityNameTxtField.setText("");
        populateTable();

        
        
    }//GEN-LAST:event_addNewCityBtnActionPerformed

    private void deleteCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = cititsTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to delete."); 
           return;
        }
         DefaultTableModel model = (DefaultTableModel) cititsTable.getModel();
         City selectedcity = (City)model.getValueAt(selectedRowIndex, 1);
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         cityList.deleteCity(selectedcity);
         JOptionPane.showMessageDialog(this, "City Deleted");
         addNewCityTxtField.setText("");
         updateCityNameTxtField.setText("");
         populateTable();
           
         }
        
    }//GEN-LAST:event_deleteCityBtnActionPerformed
    City selectedupdatecityname;
    private void updateCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = cititsTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to update."); 
           return;
        }
        else if(updateCityNameTxtField.getText().length()==0||!validation(updateCityNameTxtField.getText(),"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
            JOptionPane.showMessageDialog(this,"Please enter a valid city name"); 
           return;
        }
        for(City c: cityList.getCitytList()){
            if(updateCityNameTxtField.getText().equalsIgnoreCase(c.getCityName())){
            JOptionPane.showMessageDialog(this,"City already exists"); 
            addNewCityTxtField.setText("");
            updateCityNameTxtField.setText("");
            return;
            }
                
        }
        selectedupdatecityname.setCityName(updateCityNameTxtField.getText());
        JOptionPane.showMessageDialog(this,"City successfully updated"); 
        addNewCityTxtField.setText("");
         updateCityNameTxtField.setText("");
        populateTable();
    }//GEN-LAST:event_updateCityBtnActionPerformed
City cityCombo= new City();
    private void manageCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageCommunityBtnActionPerformed
        // TODO add your handling code here:
        changeAdminPanel(manageCommunitiesPanel);
        citiesComboBox.removeAllItems();
        citiesComboBox.addItem("Select any city to add communities");
        
         for (City c : cityList.getCitytList()){
             citiesComboBox.addItem(c.getCityName());
            
         }
         citiesComboBox.setSelectedIndex(0);
         populateTable2();
         addCommunityTxtField.setText("");
         addCommunityAdminUsernameTxtField.setText("");
         communityAdminPasswordTxtField.setText("");
         communityAdminPasswordTxtField1.setText("");
         addCommunityAdminUsernameTxtField.setEditable(true);
        
        
        
    }//GEN-LAST:event_manageCommunityBtnActionPerformed
    private void populateTable2(){
    
    String selectedcity = String.valueOf(citiesComboBox.getSelectedItem());
    DefaultTableModel model = (DefaultTableModel) communityTable.getModel();
    model.setRowCount(0);
    if(citiesComboBox.getSelectedIndex()==0){
    return;
    }
    
         int i =1;
         for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
        for(Community cm:cityCombo.getCommunityList()){
            Object [] row = new Object[2];
             row[0] = i;
             row[1] = cm;
            
              model.addRow(row);
              i++; 
        }
        
}
    
 
    private void addCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCommunityBtnActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(citiesComboBox.getSelectedItem());
        if("Select any city to add communities".equals(selectedcity)){
             JOptionPane.showMessageDialog(this,"Please select a city to add communities");
             return;
        }
        else if(addCommunityTxtField.getText().length()==0 || !validation(addCommunityTxtField.getText(),"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Please add a valid community name.");
             return;
        }
        
        
        for (City c : cityList.getCitytList()){
            for(Community cm :c.getCommunityList()){
             if(cm.getCommunityName().equalsIgnoreCase(addCommunityTxtField.getText())){
                 JOptionPane.showMessageDialog(this,"This community already exists.");
                 return;
             }
            }
         }
        if(addCommunityAdminUsernameTxtField.getText().length()==0 || !validation(addCommunityAdminUsernameTxtField.getText(),"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Please add a valid username for community Admin. Only alphabets are allowed.");
             return;
        }
         for(Person p:personList.getPersonList()){
                if(p.getUsername().equals(addCommunityAdminUsernameTxtField.getText())){
                  JOptionPane.showMessageDialog(this,"Invalid Usernam.This username already exists.");
                  return;  
                }
            }
             
             if(communityAdminPasswordTxtField.getText().length()==0 || !validation(communityAdminPasswordTxtField.getText(),"^(?![\\s.]+$)[a-zA-Z0-9@#$]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Password.Only A-Z,a-z,0-9,@,and # are allowed ");
             return;
            }
            
            if(!(communityAdminPasswordTxtField1.getText().equals(communityAdminPasswordTxtField.getText()))){
             JOptionPane.showMessageDialog(this,"Confirm Password does not match the set password");
             return;
            }
        
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        Community community = city.addNewCommunity();
        community.setCommunityName(addCommunityTxtField.getText());
        Person person = new Person(addCommunityAdminUsernameTxtField.getText(),communityAdminPasswordTxtField.getText());
        personList.addNewPerson(person);
        Admin communityAdmin = new Admin(community,person);
        community.setAdmin(communityAdmin);
        JOptionPane.showMessageDialog(this,"New community successfully created.");
            
         addCommunityTxtField.setText("");
         addCommunityAdminUsernameTxtField.setText("");
         communityAdminPasswordTxtField.setText("");
         communityAdminPasswordTxtField1.setText("");
         addCommunityAdminUsernameTxtField.setEditable(true);
         
        populateTable2();
       
        
    }//GEN-LAST:event_addCommunityBtnActionPerformed

    private void adminLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminLogOutActionPerformed
        // TODO add your handling code here:
       changeAdminPanel(systemAdminHomePage);
        changePanel(loginPage);
        
    }//GEN-LAST:event_adminLogOutActionPerformed
    public void changeAdminPanel(javax.swing.JPanel j){
        viewAdmin.removeAll();
        viewAdmin.add(j);
        viewAdmin.repaint();
        viewAdmin.revalidate();
    }
    private void logoutCommunityAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutCommunityAdminActionPerformed
        // TODO add your handling code here:
          changePanel(loginPage);
    }//GEN-LAST:event_logoutCommunityAdminActionPerformed

    private void citiesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_citiesComboBoxActionPerformed
        // TODO add your handling code here:
        populateTable2();
        addCommunityTxtField.setText("");
         addCommunityAdminUsernameTxtField.setText("");
         communityAdminPasswordTxtField.setText("");
         communityAdminPasswordTxtField1.setText("");
         addCommunityAdminUsernameTxtField.setEditable(true);
    }//GEN-LAST:event_citiesComboBoxActionPerformed

    private void updateCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCommunityBtnActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(citiesComboBox.getSelectedItem());
        if("Select any city to add communities".equals(selectedcity)){
             JOptionPane.showMessageDialog(this,"Please select a city to update communities");
             return;
        }
        int selectedRowIndex = communityTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to update."); 
           return;
        }
        if(addCommunityTxtField.getText().length()==0 || !validation(addCommunityTxtField.getText(),"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Please add a valid community name.");
             return;
        }
        for (City c : cityList.getCitytList()){
            for(Community cm :c.getCommunityList()){
             if(cm.getCommunityName().equalsIgnoreCase(addCommunityTxtField.getText())){
                 JOptionPane.showMessageDialog(this,"This community already exists.");
                 return;
             }
            }
         }
             
             if(communityAdminPasswordTxtField.getText().length()==0 || !validation(communityAdminPasswordTxtField.getText(),"^(?![\\s.]+$)[a-zA-Z0-9@#$]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Password.Only A-Z,a-z,0-9,@,and # are allowed ");
             return;
            }
            
            if(!(communityAdminPasswordTxtField1.getText().equals(communityAdminPasswordTxtField.getText()))){
             JOptionPane.showMessageDialog(this,"Confirm Password does not match the set password");
             return;
            }
        
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
         selectedupdatecommunity.setCommunityName(addCommunityTxtField.getText());
         selectedupdatecommunity.getAdmin().getPerson().setPassword(communityAdminPasswordTxtField.getText());
         JOptionPane.showMessageDialog(this,"Community successfully updated.");
         addCommunityTxtField.setText("");
         addCommunityAdminUsernameTxtField.setText("");
         communityAdminPasswordTxtField.setText("");
         communityAdminPasswordTxtField1.setText("");
         addCommunityAdminUsernameTxtField.setEditable(true);
         
        populateTable2();
      
       
    }//GEN-LAST:event_updateCommunityBtnActionPerformed
 Community selectedupdatecommunity;
    private void communityTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_communityTableMouseClicked
        // TODO add your handling code here:
       int selectedRowIndex = communityTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to update."); 
           return;
        }
         DefaultTableModel model = (DefaultTableModel) communityTable.getModel();
         selectedupdatecommunity = (Community)model.getValueAt(selectedRowIndex, 1);
         addCommunityTxtField.setText(selectedupdatecommunity.getCommunityName());
         addCommunityAdminUsernameTxtField.setText(selectedupdatecommunity.getAdmin().getPerson().getUsername());
         addCommunityAdminUsernameTxtField.setEditable(false);
         communityAdminPasswordTxtField.setText(selectedupdatecommunity.getAdmin().getPerson().getPassword());
         communityAdminPasswordTxtField1.setText(selectedupdatecommunity.getAdmin().getPerson().getPassword());
         
         
    }//GEN-LAST:event_communityTableMouseClicked

    private void deleteCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCommunityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = communityTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to delete."); 
           return;
        }
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         cityCombo.deleteCommunity(selectedupdatecommunity);
         personList.deletePerson(selectedupdatecommunity.getAdmin().getPerson());
         JOptionPane.showMessageDialog(this, "Community Deleted");
        
           
         }
         populateTable2();
         addCommunityTxtField.setText("");
         addCommunityAdminUsernameTxtField.setText("");
         communityAdminPasswordTxtField.setText("");
         communityAdminPasswordTxtField1.setText("");
         addCommunityAdminUsernameTxtField.setEditable(true);
        
    }//GEN-LAST:event_deleteCommunityBtnActionPerformed

    private void manageHouseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageHouseBtnActionPerformed
        // TODO add your handling code here:
        changeAdminPanel(manageHousesPanel);
        cityComboBoxHouse.setVisible(true);
        communityComboBoxHouse.setVisible(true);
        cityComboBoxHouse.removeAllItems();
        communityComboBoxHouse.removeAllItems();
        cityComboBoxHouse.addItem("Select any city");
        communityComboBoxHouse.addItem("Select any community");
        
        
         for (City c : cityList.getCitytList()){
             cityComboBoxHouse.addItem(c.getCityName());
            
         }
          cityComboBoxHouse.setSelectedItem("Select any city");
          communityComboBoxHouse.setSelectedItem("Select any community");
          populateTable3();
           addHouseTxtField.setText("");
    }//GEN-LAST:event_manageHouseBtnActionPerformed
    
    private void cityComboBoxHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxHouseActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxHouse.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        communityComboBoxHouse.removeAllItems();
        communityComboBoxHouse.addItem("Select any community");
        communityComboBoxHouse.setSelectedItem("Select any community");
        for (Community cm :city.getCommunityList()){
             communityComboBoxHouse.addItem(cm.getCommunityName()); 
         }
        addHouseTxtField.setText("");
    }//GEN-LAST:event_cityComboBoxHouseActionPerformed

    private void communityComboBoxHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboBoxHouseActionPerformed
        populateTable3();
        addHouseTxtField.setText("");
        
    }//GEN-LAST:event_communityComboBoxHouseActionPerformed

    private void addHouseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHouseBtnActionPerformed
        // TODO add your handling code here:
        
        String selectedcommunity = String.valueOf(communityComboBoxHouse.getSelectedItem());
        String selectedcity = String.valueOf(cityComboBoxHouse.getSelectedItem());
       
        if(loggedAdmin==0 && ( communityComboBoxHouse.getSelectedIndex()==0 ||cityComboBoxHouse.getSelectedIndex()==0) ){
        JOptionPane.showMessageDialog(this,"Please enter and select all the fieds. "); 
           return;
        }
        if(addHouseTxtField.getText().length()==0 ){
         JOptionPane.showMessageDialog(this,"Please enter and select all the fieds. "); 
           return;
        }
      
        for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
         Community community = new Community();
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             community=cm;
             
           }
        }
        for(City c: cityList.getCitytList()){
          for(Community cm:cityCombo.getCommunityList())
              for(House h : cm.getHouseList()){
                if(h.getHouseName().equalsIgnoreCase(addHouseTxtField.getText())){
                    JOptionPane.showMessageDialog(this,"This house already exists."); 
                    addHouseTxtField.setText("");
                    return;
                }
              }
        }
        if(loggedAdmin==1){
         community=loggedInAdmin.getCommunity();
        }
        House h = community.addNewHouse();
        h.setHouseName(addHouseTxtField.getText());
        JOptionPane.showMessageDialog(this,"New house successfully added."); 
        
        populateTable3();
        addHouseTxtField.setText("");
    }//GEN-LAST:event_addHouseBtnActionPerformed
    House selectedupdatehouse;
    private void houseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_houseTableMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = houseTable.getSelectedRow();
        
         DefaultTableModel model = (DefaultTableModel) houseTable.getModel();
         selectedupdatehouse = (House)model.getValueAt(selectedRowIndex, 1);
         addHouseTxtField.setText(selectedupdatehouse.getHouseName());
        
    }//GEN-LAST:event_houseTableMouseClicked

    private void houseUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseUpdateBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = houseTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a house to update."); 
           return;
        }
        if(addHouseTxtField.getText().length()==0){
        JOptionPane.showMessageDialog(this,"Please enter and select all the fieds. "); 
           return;
        }
          for(City c: cityList.getCitytList()){
          for(Community cm:cityCombo.getCommunityList())
              for(House h : cm.getHouseList()){
                if(h.getHouseName().equalsIgnoreCase(addHouseTxtField.getText())){
                    JOptionPane.showMessageDialog(this,"This house already exists."); 
                    addHouseTxtField.setText("");
                    return;
                }
              }
        }
       selectedupdatehouse.setHouseName(addHouseTxtField.getText());
       JOptionPane.showMessageDialog(this,"House details updated"); 
         
       addHouseTxtField.setText("");
       populateTable3();
    }//GEN-LAST:event_houseUpdateBtnActionPerformed

    private void houseDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseDeleteBtnActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = houseTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to delete."); 
           return;
        }
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         communityCombo.deleteHouse(selectedupdatehouse);
         JOptionPane.showMessageDialog(this, "House Deleted");
          populateTable3();
           addHouseTxtField.setText("");
           
         }
         
    }//GEN-LAST:event_houseDeleteBtnActionPerformed

    private void manageHospitalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageHospitalBtnActionPerformed
        // TODO add your handling code here:
        
        changeAdminPanel(manageHospitalsPanel);
         cityComboBoxHospital.setVisible(true);
         communityComboBoxHospital.setVisible(true);
        cityComboBoxHospital.removeAllItems();
        communityComboBoxHospital.removeAllItems();
        cityComboBoxHospital.addItem("Select any city");
        communityComboBoxHospital.addItem("Select any community");
        
        
         for (City c : cityList.getCitytList()){
             cityComboBoxHospital.addItem(c.getCityName());
            
         }
          cityComboBoxHospital.setSelectedItem("Select any city");
          communityComboBoxHospital.setSelectedItem("Select any community");
          addHospitalTxtField.setText("");
          addHospitalAdminUsernameTxtField.setText("");
          addHospitalAdminPasswordTxtField.setText("");
          addHospitalAdminPasswordTxtField1.setText("");
          addHospitalAdminUsernameTxtField.setEditable(true);
          populateTable4();
    
    }//GEN-LAST:event_manageHospitalBtnActionPerformed

    private void cityComboBoxHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxHospitalActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxHospital.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        communityComboBoxHospital.removeAllItems();
        communityComboBoxHospital.addItem("Select any community");
        communityComboBoxHospital.setSelectedItem("Select any community");
        for (Community cm :city.getCommunityList()){
             communityComboBoxHospital.addItem(cm.getCommunityName()); 
         }
       
    }//GEN-LAST:event_cityComboBoxHospitalActionPerformed

    private void communityComboBoxHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboBoxHospitalActionPerformed
        // TODO add your handling code here:
          addHospitalTxtField.setText("");
          addHospitalAdminUsernameTxtField.setText("");
          addHospitalAdminPasswordTxtField.setText("");
          addHospitalAdminPasswordTxtField1.setText("");
          addHospitalAdminUsernameTxtField.setEditable(true);
          populateTable4();
    }//GEN-LAST:event_communityComboBoxHospitalActionPerformed
    Hospital selectedupdatehospital=new Hospital();
    private void hospitalTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hospitalTableMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = hospitalTable.getSelectedRow();
       
         DefaultTableModel model = (DefaultTableModel) hospitalTable.getModel();
         selectedupdatehospital = (Hospital)model.getValueAt(selectedRowIndex, 1);
         addHospitalTxtField.setText(selectedupdatehospital.getHospitalName());
          addHospitalAdminUsernameTxtField.setText(selectedupdatehospital.getHospitalAdmin().getPerson().getUsername());
          addHospitalAdminPasswordTxtField.setText(selectedupdatehospital.getHospitalAdmin().getPerson().getPassword());
          addHospitalAdminPasswordTxtField1.setText(selectedupdatehospital.getHospitalAdmin().getPerson().getPassword());
          addHospitalAdminUsernameTxtField.setEditable(false);
    }//GEN-LAST:event_hospitalTableMouseClicked

    private void addHospitalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHospitalBtnActionPerformed
        // TODO add your handling code here:
        
        String selectedcommunity = String.valueOf(communityComboBoxHospital.getSelectedItem());
        String selectedcity = String.valueOf(cityComboBoxHospital.getSelectedItem());
        if( loggedAdmin==0&&(communityComboBoxHospital.getSelectedIndex()==0 || communityComboBoxHospital.getSelectedIndex()==0 )){
        JOptionPane.showMessageDialog(this,"Please select the city and coomunity fieds toadd a hospital. "); 
           return;
        }
        if(addHospitalTxtField.getText().length()==0 || !validation(addHospitalTxtField.getText(),"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Please add a valid hospital name.");
             return;
        }
        
        
       
        if(addHospitalAdminUsernameTxtField.getText().length()==0 || !validation(addHospitalAdminUsernameTxtField.getText(),"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Please add a valid username for community Admin. Only alphabets are allowed.");
             return;
        }
         
        for(Person p:personList.getPersonList()){
                if(p.getUsername().equals(addHospitalAdminUsernameTxtField.getText())){
                  JOptionPane.showMessageDialog(this,"Invalid Usernam.This username already exists.");
                  return;  
                }
            }
             
            if(addHospitalAdminPasswordTxtField.getText().length()==0 || !validation(addHospitalAdminPasswordTxtField.getText(),"^(?![\\s.]+$)[a-zA-Z0-9@#$]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Password.Only A-Z,a-z,0-9,@,and # are allowed ");
             return;
            }
            
            if(!(addHospitalAdminPasswordTxtField1.getText().equals(addHospitalAdminPasswordTxtField.getText()))){
             JOptionPane.showMessageDialog(this,"Confirm Password does not match the set password");
             return;
            }
            for (City c : cityList.getCitytList()){
            for(Community cm :c.getCommunityList()){
                for(Hospital h : cm.getHospitalList().getHospitalList()){
             if(h.getHospitalName().equalsIgnoreCase(addHospitalTxtField.getText())){
                 JOptionPane.showMessageDialog(this,"This hospital already exists.");
                 return;
             }}
            }
         }
        
        for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
         Community community = new Community();
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
               community=cm;
             
           }
        }
        if(loggedAdmin==1){
        community=loggedInAdmin.getCommunity();
        }
         
        HospitalDirectory hospitalList = community.getHospitalList();
        Hospital h=hospitalList.addNewHospital();
        Person person = new Person(addHospitalAdminUsernameTxtField.getText(),addHospitalAdminPasswordTxtField.getText());
        personList.addNewPerson(person);
        Admin admin = new Admin(person,h);
        h.setHospitalAdmin(admin);
        h.setHospitalName(addHospitalTxtField.getText());
        JOptionPane.showMessageDialog(this,"Hospital successfully created");
            
          populateTable4();
          addHospitalTxtField.setText("");
          addHospitalAdminUsernameTxtField.setText("");
          addHospitalAdminPasswordTxtField.setText("");
          addHospitalAdminPasswordTxtField1.setText("");
          addHospitalAdminUsernameTxtField.setEditable(true);
        
    }//GEN-LAST:event_addHospitalBtnActionPerformed

    private void updateHospitalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateHospitalBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = hospitalTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to update."); 
           return;
        }
         if(addHospitalTxtField.getText().length()==0 || !validation(addHospitalTxtField.getText(),"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Please add a valid hospital name.");
             return;
        }
        
        
       
        
        for (City c : cityList.getCitytList()){
            for(Community cm :c.getCommunityList()){
                for(Hospital h : cm.getHospitalList().getHospitalList()){
             if(h.getHospitalName().equalsIgnoreCase(addHospitalTxtField.getText())){
                 JOptionPane.showMessageDialog(this,"This hospital already exists.");
                 return;
             }}
            }
         }
         if(addHospitalAdminPasswordTxtField.getText().length()==0 || !validation(addHospitalAdminPasswordTxtField.getText(),"^(?![\\s.]+$)[a-zA-Z0-9@#$]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Password.Only A-Z,a-z,0-9,@,and # are allowed ");
             return;
            }
            
            if(!(addHospitalAdminPasswordTxtField1.getText().equals(addHospitalAdminPasswordTxtField.getText()))){
             JOptionPane.showMessageDialog(this,"Confirm Password does not match the set password");
             return;
            }
         selectedupdatehospital.setHospitalName(addHospitalTxtField.getText());
         selectedupdatehospital.getHospitalAdmin().getPerson().setUsername(addHospitalAdminUsernameTxtField.getText());
        selectedupdatehospital.getHospitalAdmin().getPerson().setPassword(addHospitalAdminPasswordTxtField.getText());
        JOptionPane.showMessageDialog(this,"Hospital successfully updated");
          addHospitalTxtField.setText("");
          addHospitalAdminUsernameTxtField.setText("");
          addHospitalAdminPasswordTxtField.setText("");
          addHospitalAdminPasswordTxtField1.setText("");
          addHospitalAdminUsernameTxtField.setEditable(true);
       populateTable4();
    }//GEN-LAST:event_updateHospitalBtnActionPerformed

    private void hospitalDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalDeleteBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = hospitalTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to delete."); 
           return;
        }
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         HospitalDirectory hospitalList = communityCombo.getHospitalList();
         hospitalList.deleteHospital(selectedupdatehospital);
         personList.deletePerson(selectedupdatehospital.getHospitalAdmin().getPerson());
         JOptionPane.showMessageDialog(this, "Hospital Deleted");
          populateTable4();
           
         }
          addHospitalTxtField.setText("");
          addHospitalAdminUsernameTxtField.setText("");
          addHospitalAdminPasswordTxtField.setText("");
          addHospitalAdminPasswordTxtField1.setText("");
          addHospitalAdminUsernameTxtField.setEditable(true);
         
    
    }//GEN-LAST:event_hospitalDeleteBtnActionPerformed

    private void manageDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageDoctorBtnActionPerformed
        // TODO add your handling code here:
        changeAdminPanel(manageDoctorsPanel);
        cityComboBoxDoctor.setVisible(true);
        communityComboBoxDoctor.setVisible(true);
        hospitalComboBoxDoctor.setVisible(true);
        cityComboBoxDoctor.removeAllItems();
        communityComboBoxDoctor.removeAllItems();
        hospitalComboBoxDoctor.removeAllItems();
        
        cityComboBoxDoctor.addItem("Select any city");
        communityComboBoxDoctor.addItem("Select any community");
        hospitalComboBoxDoctor.addItem("Select any hospital");
        
         for (City c : cityList.getCitytList()){
             cityComboBoxDoctor.addItem(c.getCityName());
            
         }
          cityComboBoxDoctor.setSelectedItem("Select any city");
          communityComboBoxDoctor.setSelectedItem("Select any community");
          hospitalComboBoxDoctor.setSelectedItem("Select any hospital");
          clearDoctorRegistrationFields();
          populateTable5();
        
    }//GEN-LAST:event_manageDoctorBtnActionPerformed

    private void clearDoctorRegistrationFields(){
            doctorNameTxtField.setText("");
            doctorAgeTxtField.setText("");
            buttonGroup1.clearSelection();
            doctorDOB.setCalendar(null);
            doctorPhoneTxtField.setText("");
            doctorSpecialityTxtField.setText("");
            doctorAvailabilityTxtField.setText("");
            doctorDegreeTxtField.setText("");
            doctorEmailTxtField.setText("");
            doctorSetUsernameTxtField.setText("");
            doctorSetPasswordTxtField.setText("");
            doctorConfirmsPasswordTxtField.setText("");
            doctorSetUsernameTxtField.setEditable(true);
    
    }
    private void cityComboBoxDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxDoctorActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxDoctor.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        communityComboBoxDoctor.removeAllItems();
        communityComboBoxDoctor.addItem("Select any community");
        communityComboBoxDoctor.setSelectedItem("Select any community");
        for (Community cm :city.getCommunityList()){
             communityComboBoxDoctor.addItem(cm.getCommunityName()); 
         }
    }//GEN-LAST:event_cityComboBoxDoctorActionPerformed

    private void communityComboBoxDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboBoxDoctorActionPerformed
        // TODO add your handling code here:
         String selectedcity = String.valueOf(cityComboBoxDoctor.getSelectedItem());
         String selectedcommunity = String.valueOf(communityComboBoxDoctor.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        Community community = new Community();
        for (Community cm :city.getCommunityList()){
            if(cm.getCommunityName().equals(selectedcommunity)){
             community = cm;
         }
        hospitalComboBoxDoctor.removeAllItems();
        hospitalComboBoxDoctor.addItem("Select any hospital");
        hospitalComboBoxDoctor.setSelectedItem("Select any hospital");
        HospitalDirectory hospitalList = community.getHospitalList();
//        Hospital h=hospitalList.addNewHospital();
        for (Hospital h :hospitalList.getHospitalList()){
             hospitalComboBoxDoctor.addItem(h.getHospitalName()); 
         }
        }
    }//GEN-LAST:event_communityComboBoxDoctorActionPerformed
    Doctor selectedupdatedoctor;
    private void hospitalComboBoxDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalComboBoxDoctorActionPerformed
        // TODO add your handling code here:
        populateTable5();
        clearDoctorRegistrationFields();
        
    }//GEN-LAST:event_hospitalComboBoxDoctorActionPerformed

    private void updateDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDoctorBtnActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxDoctor.getSelectedItem());
        String selectedcommunity = String.valueOf(communityComboBoxDoctor.getSelectedItem());
        String selectedhospital = String.valueOf(hospitalComboBoxDoctor.getSelectedItem());
       
        int selectedRowIndex = doctorTable.getSelectedRow();
        if (doctorNameTxtField.getText().length()==0){
           JOptionPane.showMessageDialog(this,"Please select a row to update."); 
           return;
        }
        try{
            String name = doctorNameTxtField.getText();
            if(name.length()==0 || !validation(name,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Name");
             return;
            }
           
            int age = Integer.parseInt( doctorAgeTxtField.getText());
             if(!(age >= 18)){
             JOptionPane.showMessageDialog(this,"Invalid Age. Age should be above 18 yrs"); 
             return;
            }
            String gender;
            if(maleRadio1.isSelected()){
                gender= "Male";
            }
            else if(femaleRadio1.isSelected()){
                gender= "Female";
            }
            else if(otherRadio1.isSelected()){
                    gender = "Other";
                }
             else {
                 gender = "";
             }
            if(gender.length()==0 ){
             JOptionPane.showMessageDialog(this,"Please select your gender. ");
             return;
            }
             Date dob= doctorDOB.getDate();
              if(dob==null){
             JOptionPane.showMessageDialog(this,"Please select your date of birth.");
             return;
            }
               String speciality =doctorSpecialityTxtField.getText();
             if(speciality.length()==0 ||!validation(speciality,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Speciality");
             return;
            }
             String degree =doctorDegreeTxtField.getText();
             if(degree.length()==0 ||!validation(degree,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Degree");
             return;
            }
              String availability =doctorAvailabilityTxtField.getText();
             if(availability.length()==0 ||!validation(availability,"^(?![\\s.]+$)[a-zA-Z0-9\\s.()]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Availability");
             return;
            }
             String phone=doctorPhoneTxtField.getText();
             if(phone.length()==0 ||!validation(phone,"^\\d{10}$")){
             JOptionPane.showMessageDialog(this,"Invalid Phone Number");
             return;
            }
             String email =doctorEmailTxtField.getText();
             if(email.length()==0 || !validation(email,"^(.+)@(\\S+)$")){
             JOptionPane.showMessageDialog(this,"Invalid Email");
             return;
            }
             
             
             
             String password = doctorSetPasswordTxtField.getText();
             if(password.length()==0 || !validation(password,"^(?![\\s.]+$)[a-zA-Z0-9@#$]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Password.Only A-Z,a-z,0-9,@,and # are allowed ");
             return;
            }
            String confirmPassword = doctorConfirmsPasswordTxtField.getText();
            if(!(confirmPassword.equals(password))){
             JOptionPane.showMessageDialog(this,"Confirm Password does not match the set password");
             return;
            }
            String address= selectedcity + " , " +selectedcommunity+ " , "+selectedhospital;
            for(Doctor d : doctorList.getDoctorList() ){
              if(d.getPerson().getUsername().equals(doctorSetUsernameTxtField))
              {
              JOptionPane.showMessageDialog(this,"Doctor account already exists");
              return;
              }
              }
       Person person = selectedupdatedoctor.getPerson();
       person.setPersonName(name);
       person.setPersonAge(age);
       person.setPersonGender(gender);
       person.setPersonDOB(dob);
       person.setPersonAddress(address);
       person.setPersonContactNo(phone);
       person.setPersonContactEmail(email);
       
       person.setPassword(password);
       selectedupdatedoctor.setDegree(degree);
       selectedupdatedoctor.setSpeciality(speciality);
       selectedupdatedoctor.setAvailability(availability);
  
              
            
           
            JOptionPane.showMessageDialog(this,"Doctor account is successfully updated.");
            clearDoctorRegistrationFields();
            doctorSetUsernameTxtField.setEditable(true);
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, "Invalid Input. Error updating account");
            System.out.print(e);
           
            
        }
     
       
       populateTable5();
    }//GEN-LAST:event_updateDoctorBtnActionPerformed

    private void deleteDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDoctorBtnActionPerformed
        // TODO add your handling code here:
        
        if (doctorNameTxtField.getText().length()==0){
           JOptionPane.showMessageDialog(this,"Please select a row to update."); 
           return;
        }
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         hospitalCombo.deleteDoctorHospital(selectedupdatedoctor);
         doctorList.deleteDoctor(selectedupdatedoctor);
         personList.deletePerson(selectedupdatedoctor.getPerson());
         
         JOptionPane.showMessageDialog(this, "Doctor account Deleted");
         populateTable5();
         clearDoctorRegistrationFields();
         doctorSetUsernameTxtField.setEditable(false);
           
         }
    }//GEN-LAST:event_deleteDoctorBtnActionPerformed

    private void addDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDoctorBtnActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxDoctor.getSelectedItem());
        String selectedcommunity = String.valueOf(communityComboBoxDoctor.getSelectedItem());
        String selectedhospital = String.valueOf(hospitalComboBoxDoctor.getSelectedItem());
        if(loggedAdmin ==0&&( "Select any city".equals(selectedcity)||"Select any community".equals(selectedcommunity)||"Select any hospital".equals(selectedhospital))){
            JOptionPane.showMessageDialog(this,"Select City,Community, and Hospital to add a doctor.");
             return;
            }
        for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
         Community community = new Community();
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             community=cm;
             
           }
        }
        HospitalDirectory hospitalList = community.getHospitalList();
        
        
        for (Hospital h :hospitalList.getHospitalList()){
             if(selectedhospital.equals(h.getHospitalName())){
             hospitalCombo=h;
             
           }
         }
         if(loggedAdmin==1){
        hospitalCombo=loggedInAdmin.getHospital();
        }
        try{
            String name = doctorNameTxtField.getText();
            if(name.length()==0 || !validation(name,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Name");
             return;
            }
            int age = Integer.parseInt( doctorAgeTxtField.getText());
             if(!(age >= 18)){
             JOptionPane.showMessageDialog(this,"Invalid Age. Age should be above 18 yrs"); 
             return;
            }
            String gender;
            if(maleRadio1.isSelected()){
                gender= "Male";
            }
            else if(femaleRadio1.isSelected()){
                gender= "Female";
            }
            else if(otherRadio1.isSelected()){
                    gender = "Other";
                }
             else {
                 gender = "";
             }
            if(gender.length()==0 ){
             JOptionPane.showMessageDialog(this,"Please select the gender. ");
             return;
            }
             Date dob= doctorDOB.getDate();
              if(dob==null){
             JOptionPane.showMessageDialog(this,"Please select the date of birth.");
             return;
            }
              String speciality =doctorSpecialityTxtField.getText();
             if(speciality.length()==0 ||!validation(speciality,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Speciality");
             return;
            }
             String degree =doctorDegreeTxtField.getText();
             if(degree.length()==0 ||!validation(degree,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Degree");
             return;
            }
             String availability =doctorAvailabilityTxtField.getText();
             if(availability.length()==0 ||!validation(availability,"^(?![\\s.]+$)[a-zA-Z0-9\\s.()]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Availability");
             return;
            }
             String phone=doctorPhoneTxtField.getText();
             if(phone.length()==0 ||!validation(phone,"^\\d{10}$")){
             JOptionPane.showMessageDialog(this,"Invalid Phone Number");
             return;
            }
             String email =doctorEmailTxtField.getText();
             if(email.length()==0 || !validation(email,"^(.+)@(\\S+)$")){
             JOptionPane.showMessageDialog(this,"Invalid Email");
             return;
            }
             
             
             String username=doctorSetUsernameTxtField.getText();
             if(username.length()==0 || !validation(username,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Usernam.No special character and numbers allowed ");
             return;
            }
            for(Person p:personList.getPersonList()){
                if(p.getUsername().equals(username)){
                  JOptionPane.showMessageDialog(this,"Invalid Usernam.This username already exists.");
                  return;  
                }
            }
             String password = doctorSetPasswordTxtField.getText();
             if(password.length()==0 || !validation(password,"^(?![\\s.]+$)[a-zA-Z0-9@#$]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Password.Only A-Z,a-z,0-9,@,and # are allowed ");
             return;
            }
            String confirmPassword = doctorConfirmsPasswordTxtField.getText();
            if(!(confirmPassword.equals(password))){
             JOptionPane.showMessageDialog(this,"Confirm Password does not match the set password");
             return;
            }
            String address= selectedcity + " , " +selectedcommunity+ " , "+selectedhospital;
              for(Doctor d : doctorList.getDoctorList() ){
              if(d.getPerson().getUsername().equals(username))
              {
              JOptionPane.showMessageDialog(this,"Doctor account already exists");
              return;
              }
              }
//            
              Person person = new Person(name,age,gender,phone,email,dob,address,username,password);
              personList.addNewPerson(person);
              Doctor doctor = new Doctor(person,speciality,degree,availability);
              hospitalCombo.addDoctorHospital(doctor);
              doctorList.addNewDoctor(doctor);
              
            
           
            JOptionPane.showMessageDialog(this,"Doctor account is successfully registered.");
            clearDoctorRegistrationFields();
            populateTable5();
            
            
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, "Invalid Input. Error adding doctor");
            System.out.print(e);
           
            
        }
        
       
         
    }//GEN-LAST:event_addDoctorBtnActionPerformed

    private void patientEmailTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientEmailTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientEmailTxtFieldActionPerformed

    private void cityComboBoxPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxPatientActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxPatient.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        communityComboBoxPatient.removeAllItems();
        communityComboBoxPatient.addItem("Select");
        communityComboBoxPatient.setSelectedItem("Select");
        for (Community cm :city.getCommunityList()){
             communityComboBoxPatient.addItem(cm.getCommunityName()); 
         }
        
    }//GEN-LAST:event_cityComboBoxPatientActionPerformed

    private void communityComboBoxPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboBoxPatientActionPerformed
        // TODO add your handling code here:
         String selectedcity = String.valueOf(cityComboBoxPatient.getSelectedItem());
         String selectedcommunity = String.valueOf(communityComboBoxPatient.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        Community community = new Community();
        for (Community cm :city.getCommunityList()){
            if(cm.getCommunityName().equals(selectedcommunity)){
             community = cm;
         }
        houseComboBoxPatient.removeAllItems();
        houseComboBoxPatient.addItem("Select");
        houseComboBoxPatient.setSelectedItem("Select");
      
        for (House h :community.getHouseList()){
             houseComboBoxPatient.addItem(h.getHouseName()); 
         }
        } 
    }//GEN-LAST:event_communityComboBoxPatientActionPerformed

    private void houseComboBoxPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseComboBoxPatientActionPerformed
        // TODO add your handling code here:
        String selectedhouse = String.valueOf(houseComboBoxPatient.getSelectedItem());
        for(City c : cityList.getCitytList()){
           for (Community cm :c.getCommunityList()){ 
                  for (House h :cm.getHouseList()){
                      if(selectedhouse.equals(h.getHouseName())){
                           patientHouse= h;
                      }
                  }
           }
        }
       
    }//GEN-LAST:event_houseComboBoxPatientActionPerformed

    private void doctorEmailTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorEmailTxtFieldActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_doctorEmailTxtFieldActionPerformed

    private void patientLogOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientLogOutBtnActionPerformed
        // TODO add your handling code here:
        changePatientPanel(patientHomePanel);
        changePanel(loginPage);
    }//GEN-LAST:event_patientLogOutBtnActionPerformed
String selectedhospitalByPatient;
    private void hospitalComboBoxPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalComboBoxPatientActionPerformed
        // TODO add your handling code here:
        selectedhospitalByPatient = String.valueOf(hospitalComboBoxPatient.getSelectedItem());
        DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
        model.setRowCount(0);
        if("Select".equals(selectedhospitalByPatient)){
           
            return;
        }
        
         int i =1;
         Hospital patientSelectedHospital = new Hospital();
         for(Hospital h : patientHospitalList.getHospitalList()){
             if(selectedhospitalByPatient.equals(h.getHospitalName())){
                  patientSelectedHospital=h;
                  
             
           }
            
        }
        DoctorDirectory patientDoctorList = patientSelectedHospital.getDoctorList() ;
         for(Doctor doctor:patientDoctorList.getDoctorList()){
          Object [] row = new Object[6];
             row[0] = i;
             row[1] = doctor;
             row[2] = doctor.getSpeciality();
             row[3] = doctor.getDegree();
             row[4] = doctor.getAvailability();
             row[5] = doctor.getPerson().getPersonContactNo();
              model.addRow(row);
              i++;  
        }
        
    }//GEN-LAST:event_hospitalComboBoxPatientActionPerformed

    private void searchDoctorPatientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDoctorPatientBtnActionPerformed
        // TODO add your handling code here:
        changePatientPanel(searchDoctorPanel);
        hospitalComboBoxPatient.removeAllItems(); 
        hospitalComboBoxPatient.addItem("Select");
        hospitalComboBoxPatient.setSelectedItem("Select");
        Community patientCommunity = new Community();
        for(City c : cityList.getCitytList()){
           for (Community cm :c.getCommunityList()){ 
                  for (House h :cm.getHouseList()){
                      if(h.getHouseName().equals(loggedInPatient.getPerson().getHouse().getHouseName())){
                          patientCommunity = cm;
                          break;
                      }
                  }
           }
        }
       patientHospitalList = patientCommunity.getHospitalList();
        for(Hospital h : patientHospitalList.getHospitalList()){
             hospitalComboBoxPatient.addItem(h.getHospitalName());
        }
        patientAddressDoctorSearchLabel.setText("Your loction (City, Community, House ): "+loggedInPatient.getPerson().getPersonAddress());
        
    }//GEN-LAST:event_searchDoctorPatientBtnActionPerformed
      
    private void bookAppointmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookAppointmentBtnActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = patientTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a Doctor to request appointment."); 
           return;
        }
          DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
        
          Doctor selectedDoctor = (Doctor)model.getValueAt(selectedRowIndex, 1);
          String doctorName = selectedDoctor.getPerson().getPersonName();
          String doctorId = selectedDoctor.getPerson().getPersonId();
          int flag=0;
          for(Patient p : selectedDoctor.getPatientList().getPatientList()){
              if(p.getPerson().getPersonId().equals(loggedInPatient.getPerson().getPersonId())){
               
               flag=1;
               break;
              }
              
              }
          if(flag==1){
          Encounter encounter = new Encounter(doctorId+ ","+doctorName+ ", " + selectedhospitalByPatient);
          loggedInPatient.getEncounterHistory().addNewEncounter(encounter);
          JOptionPane.showMessageDialog(this,"Your appointment is succeefully requested with the doctor.");
          
//        
          }
          else{
            selectedDoctor.getPatientList().addNewPatient(loggedInPatient);
          Encounter encounter = new Encounter(doctorId+ ","+doctorName+ ", " + selectedhospitalByPatient);
          loggedInPatient.getEncounterHistory().addNewEncounter(encounter);
          JOptionPane.showMessageDialog(this,"Your appointmentis succeefully requested with the doctor.");
          
          }
        
          model.setRowCount(0);
          hospitalComboBoxPatient.setSelectedIndex(0);
        
    }//GEN-LAST:event_bookAppointmentBtnActionPerformed

    private void doctorLogOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorLogOutBtnActionPerformed
        // TODO add your handling code here:
        doctorViewPanel.removeAll();
        doctorViewPanel.add(doctorHomePanel);
        doctorViewPanel.repaint();
        doctorViewPanel.revalidate();
        changePanel(loginPage);
        
    }//GEN-LAST:event_doctorLogOutBtnActionPerformed
       public void changePatientPanel(javax.swing.JPanel j){
        patientViewPanel.removeAll();
        patientViewPanel.add(j);
        patientViewPanel.repaint();
        patientViewPanel.revalidate();
       }
    private void deletePatientProfileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePatientProfileBtnActionPerformed
        // TODO add your handling code here:
        int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to deactivate you account. Your patient records will not be deleted.", "Deactivate", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
        loggedInPatient.getPerson().setUsername("not");
        JOptionPane.showMessageDialog(this,"You account is deactivated");
        changePanel(loginPage);
           
         }
        
        
    }//GEN-LAST:event_deletePatientProfileBtnActionPerformed

    private void patientHomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientHomeBtnActionPerformed
        // TODO add your handling code here:
        changePatientPanel(patientHomePanel);
        populateTable6();
        clearappointmentListTableFields();
    }//GEN-LAST:event_patientHomeBtnActionPerformed

    private void addEncounterDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEncounterDetailsBtnActionPerformed
        // TODO add your handling code here:

        doctorViewPanel.removeAll();
        doctorViewPanel.add(doctorManageAppointmentsPanel);
        doctorViewPanel.repaint();
        doctorViewPanel.revalidate();
        clearDoctorEncounterFields();
                    
        populateEncounterTable();   
        
        
    }//GEN-LAST:event_addEncounterDetailsBtnActionPerformed
    public void populateEncounterTable(){
        
        DefaultTableModel model = (DefaultTableModel) encounterTable.getModel();
        model.setRowCount(0);
        int i =1;
        PatientDirectory doctorpatientList = loggedInDoctor.getPatientList();
        for(Patient p : doctorpatientList.getPatientList()){
            for(Encounter e : p.getEncounterHistory().getEncounterList())  {
               
                if(e.getEncounterUniqueId().equals(loggedInDoctor.getPerson().getPersonId())){
                Object [] row = new Object[5];
                row[0] = i;
                row[1] = p.getPerson().getPersonId();
                row[2] = p;
                row[3] = e;
                row[4] = e.getStatus();
                model.addRow(row);
                i++;
                }
            }
        }   
    }
    private void encounterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encounterTableMouseClicked
        // TODO add your handling code here:
         int selectedRowIndex = encounterTable.getSelectedRow();
        
          DefaultTableModel model = (DefaultTableModel) encounterTable.getModel();
        
          Patient selectedPatient  = (Patient)model.getValueAt(selectedRowIndex, 2);
          Encounter patientEncounter  = (Encounter)model.getValueAt(selectedRowIndex, 3);
          patientDetailsNameLabel.setText(selectedPatient.getPerson().getPersonName());
          patientDetailsAgeLabel.setText(String.valueOf(selectedPatient.getPerson().getPersonAge()));
          patientDetailsGenderLabel.setText(selectedPatient.getPerson().getPersonGender());
          patientDetailsInsuranceLabel.setText(selectedPatient.getPerson().getPersonInsurance());
          patientDetailsPhoneLabel.setText(selectedPatient.getPerson().getPersonContactNo());
          patientDetailsEmailLabel.setText(selectedPatient.getPerson().getPersonContactEmail());
          
                if("Appointment Request Pending".equals(patientEncounter.getStatus())){
               patientEncounterSaveBtn.setText("Save Encounter Details");
                
                 patientBodyTempTxtField.setText("");
                 patientBloodPressureTxtField.setText("");
                 patientPulseTxtField.setText("");
                 patientRespRateTxtField.setText("");
                 patientSymptomsTxtField.setText("");
                 encounterDateChooser.setDate(null);
                 hrComboBox.setSelectedIndex(0);
                 minComboBox.setSelectedIndex(0);
                 timeComboBox.setSelectedIndex(0);
                 patientSymptomsTxtField.setText("");
                 patientDiagnosisTxtField.setText("");
                   
                }
                else{
                 patientEncounterSaveBtn.setText("Update Encounter Details");
                 patientBodyTempTxtField.setText(patientEncounter.getViatlSigns().getBodyTemperature());
                 patientBloodPressureTxtField.setText(patientEncounter.getViatlSigns().getBloodPressure());
                 patientPulseTxtField.setText(patientEncounter.getViatlSigns().getPulseRate());
                 patientRespRateTxtField.setText(patientEncounter.getViatlSigns().getRespirationRate());
                 encounterDateChooser.setDate(patientEncounter.getEncounterDate());
                 patientSymptomsTxtField.setText(patientEncounter.getSymptoms());
                 patientDiagnosisTxtField.setText(patientEncounter.getDiagnosis());
                 String str = patientEncounter.getEncounterTime();
                 String[] arrOfStr = str.split(",", 0); 
                 hrComboBox.setSelectedItem(arrOfStr[0]);
                 minComboBox.setSelectedItem(arrOfStr[1]);
                 timeComboBox.setSelectedItem(arrOfStr[2]);
                } 
            
          
        
    }//GEN-LAST:event_encounterTableMouseClicked
    private void clearDoctorEncounterFields(){
          patientEncounterSaveBtn.setText("Save Encounter Details");
                
                 patientBodyTempTxtField.setText("");
                 patientBloodPressureTxtField.setText("");
                 patientPulseTxtField.setText("");
                 patientRespRateTxtField.setText("");
                 patientSymptomsTxtField.setText("");
                 encounterDateChooser.setDate(null);
                 hrComboBox.setSelectedIndex(0);
                 minComboBox.setSelectedIndex(0);
                 timeComboBox.setSelectedIndex(0);
                 patientSymptomsTxtField.setText("");
                 patientDiagnosisTxtField.setText("");
                 patientDetailsNameLabel.setText("");
                    patientDetailsAgeLabel.setText("");
                    patientDetailsGenderLabel.setText("");
                    patientDetailsInsuranceLabel.setText("");
                    patientDetailsPhoneLabel.setText("");
                    patientDetailsEmailLabel.setText("");
                
                  
    }
    private void patientEncounterSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientEncounterSaveBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = encounterTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select any appointment request from the table."); 
           return;
        }
          DefaultTableModel model = (DefaultTableModel) encounterTable.getModel();
        
          Patient selectedPatient  = (Patient)model.getValueAt(selectedRowIndex, 2);
          Encounter patientEncounter  = (Encounter)model.getValueAt(selectedRowIndex, 3);
                 try{
                    String bodyTemperature=patientBodyTempTxtField.getText();
                    if(bodyTemperature.length()==0 || !validation(bodyTemperature,"^[0-9a-zA-z]$")){
                    JOptionPane.showMessageDialog(this,"Invalid Body Temperature");
                    return;
                    }
                    String bloodPressure=patientBloodPressureTxtField.getText();
                    if(bloodPressure.length()==0 || !validation(bloodPressure,"^[0-9a-zA-z]$")){
                    JOptionPane.showMessageDialog(this,"Invalid Blood Pressure");
                    return;
                    }
                    String pulseRate=patientPulseTxtField.getText();
                    if(pulseRate.length()==0 || !validation(pulseRate,"^[0-9a-zA-z]$")){
                    JOptionPane.showMessageDialog(this,"Invalid Pulse Rate");
                    return;
                    }
                    String respRate=patientRespRateTxtField.getText();
                    if(respRate.length()==0 || !validation(respRate,"^[0-9a-zA-z]$")){
                    JOptionPane.showMessageDialog(this,"Invalid Respiration Rate");
                    return;
                    }
                    Date date =encounterDateChooser.getDate();
                    if(date==null){
                    JOptionPane.showMessageDialog(this,"Invalid Encounter Date");
                    return;
                    }
                    String Time =String.valueOf(hrComboBox.getSelectedItem())+","+ String.valueOf(minComboBox.getSelectedItem())+ ","+ String.valueOf(timeComboBox.getSelectedItem());
                    String symptoms=patientSymptomsTxtField.getText();
                    if(symptoms.length()==0 || !validation(symptoms,"^(?![\\s.]+$)[a-zA-Z\\s.,]*$")){
                    JOptionPane.showMessageDialog(this,"Invalid Symptoms");
                    return;
                    }
                    String diagnosis=patientDiagnosisTxtField.getText();
                    if(diagnosis.length()==0 || !validation(diagnosis,"^(?![\\s.]+$)[a-zA-Z\\s.,]*$")){
                    JOptionPane.showMessageDialog(this,"Invalid Diagnosis");
                    return;
                    }
                 patientEncounter.getViatlSigns().setBloodPressure(bloodPressure);
                 patientEncounter.getViatlSigns().setBodyTemperature(bodyTemperature);
                 patientEncounter.getViatlSigns().setPulseRate(pulseRate);
                 patientEncounter.getViatlSigns().setRespirationRate(respRate);
                 patientEncounter.setEncounterDate(date);
                 patientEncounter.setSymptoms(symptoms);
                 patientEncounter.setDiagnosis(diagnosis);
                 patientEncounter.setEncounterTime(Time);
                 patientEncounter.setStatus("Appointment Request Approved");
                 
                    clearDoctorEncounterFields();
                    populateEncounterTable();
                 JOptionPane.showMessageDialog(this,"Encounter details saved."); 
             
                 }
                 catch(Exception e){
                     JOptionPane.showMessageDialog(this,"Error saving encounter details.");
                 System.out.print(e);
                 
                 }
    }//GEN-LAST:event_patientEncounterSaveBtnActionPerformed

    private void appointmentListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentListTableMouseClicked
        // TODO add your handling code here:
        
        
        
    }//GEN-LAST:event_appointmentListTableMouseClicked

    private void updatePatientProfileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePatientProfileBtnActionPerformed
        // TODO add your handling code here:
         changePatientPanel(updatePatientProfilePanel);
        cityComboBoxPatient1.removeAllItems();
        cityComboBoxPatient1.addItem("Select");
        cityComboBoxPatient1.setSelectedItem("Select"); 
        for (City c : cityList.getCitytList()){
             cityComboBoxPatient1.addItem(c.getCityName());   
         }
        communityComboBoxPatient1.removeAllItems();
        communityComboBoxPatient1.addItem("Select");
        communityComboBoxPatient1.setSelectedItem("Select"); 
        houseComboBoxPatient1.removeAllItems();
        houseComboBoxPatient1.addItem("Select");
        houseComboBoxPatient1.setSelectedItem("Select");
        clearUpdatePageFields(); 
         
         
    }//GEN-LAST:event_updatePatientProfileBtnActionPerformed

    private void appointmentDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointmentDeleteBtnActionPerformed
        // TODO add your handling code here
         int selectedRowIndex = appointmentListTable.getSelectedRow();
         if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to delete."); 
           return;
        }
         DefaultTableModel model = (DefaultTableModel) appointmentListTable.getModel();
         Encounter patientEncounter  = (Encounter)model.getValueAt(selectedRowIndex, 0);
         if("Appointment Request Pending".equals(patientEncounter.getStatus())){
          
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         loggedInPatient.getEncounterHistory().deleteEncounter(patientEncounter);
         JOptionPane.showMessageDialog(this, "Appointment request deleted");
         populateTable6();
           
         }
         }
         else{
          JOptionPane.showMessageDialog(this, "Past appointments cannot be deleted");
             
         }
    }//GEN-LAST:event_appointmentDeleteBtnActionPerformed

    private void viewAppointmentDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAppointmentDetailsBtnActionPerformed
        // TODO add your handling code here:
         int selectedRowIndex = appointmentListTable.getSelectedRow();
         if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to view details."); 
           return;
        }

         DefaultTableModel model = (DefaultTableModel) appointmentListTable.getModel();
         Encounter patientEncounter  = (Encounter)model.getValueAt(selectedRowIndex, 0);
         if("Appointment Request Pending".equals(patientEncounter.getStatus())){
          JOptionPane.showMessageDialog(this,"Your appointment request has not been approved yet.");
          clearappointmentListTableFields();
         }
         else{
             patientViewEncounterId.setText(String.valueOf(patientEncounter.getEncounterId()));
             patientViewBloodPressure.setText(patientEncounter.getViatlSigns().getBloodPressure());
             patientViewBodyTemperature.setText(patientEncounter.getViatlSigns().getBodyTemperature());
             patientViewPulseRate.setText(patientEncounter.getViatlSigns().getPulseRate());
             patientViewAppointmentDetails.setText(patientEncounter.getAppointmentDetails());
             patientViewRespirationRate.setText(patientEncounter.getViatlSigns().getRespirationRate());
             
             patientEncounterDate.setText(dateFormat.format(patientEncounter.getEncounterDate()));
             patientViewEncounterTime.setText(patientEncounter.getEncounterTime());
             patientViewSymptoms.setText(patientEncounter.getSymptoms());
             patientViewDiagnosis.setText(patientEncounter.getDiagnosis());
             
         }
    }//GEN-LAST:event_viewAppointmentDetailsBtnActionPerformed

    private void patientEmailTxtField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientEmailTxtField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientEmailTxtField1ActionPerformed

    private void cityComboBoxPatient1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxPatient1ActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxPatient1.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        communityComboBoxPatient1.removeAllItems();
        communityComboBoxPatient1.addItem("Select");
        communityComboBoxPatient1.setSelectedItem("Select");
        for (Community cm :city.getCommunityList()){
             communityComboBoxPatient1.addItem(cm.getCommunityName()); 
         }
    }//GEN-LAST:event_cityComboBoxPatient1ActionPerformed

    private void communityComboBoxPatient1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboBoxPatient1ActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxPatient1.getSelectedItem());
         String selectedcommunity = String.valueOf(communityComboBoxPatient1.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        Community community = new Community();
        for (Community cm :city.getCommunityList()){
            if(cm.getCommunityName().equals(selectedcommunity)){
             community = cm;
         }
        houseComboBoxPatient1.removeAllItems();
        houseComboBoxPatient1.addItem("Select");
        houseComboBoxPatient1.setSelectedItem("Select");
      
        for (House h :community.getHouseList()){
             houseComboBoxPatient1.addItem(h.getHouseName()); 
         }
        }
    }//GEN-LAST:event_communityComboBoxPatient1ActionPerformed

    private void houseComboBoxPatient1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseComboBoxPatient1ActionPerformed
        // TODO add your handling code here:
        String selectedhouse = String.valueOf(houseComboBoxPatient1.getSelectedItem());
        for(City c : cityList.getCitytList()){
           for (Community cm :c.getCommunityList()){ 
                  for (House h :cm.getHouseList()){
                      if(selectedhouse.equals(h.getHouseName())){
                           patientHouse= h;
                      }
                  }
           }
        }
    }//GEN-LAST:event_houseComboBoxPatient1ActionPerformed

    private void patientUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientUpdateBtnActionPerformed
        // TODO add your handling code here:
        try{
            String name = patientNameTxtField1.getText();
            if(name.length()==0 || !validation(name,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Name");
             return;
            }
            int age = Integer.parseInt( patientAgeTxtField1.getText());
             if(!(age >= 18)){
             JOptionPane.showMessageDialog(this,"Invalid Age. Age should be above 18 yrs"); 
             return;
            }
            String gender;
            if(maleRadio2.isSelected()){
                gender= "Male";
            }
            else if(femaleRadio2.isSelected()){
                gender= "Female";
            }
            else if(otherRadio2.isSelected()){
                    gender = "Other";
                }
             else {
                 gender = "";
             }
            if(gender.length()==0 ){
             JOptionPane.showMessageDialog(this,"Please select your gender");
             return;
            }
             Date dob= patientDOB1.getDate();
              if(dob==null){
             JOptionPane.showMessageDialog(this,"Please select your date of birth");
             return;
            }
             String phone=patientPhoneTxtField1.getText();
             if(phone.length()==0 ||!validation(phone,"^\\d{10}$")){
             JOptionPane.showMessageDialog(this,"Invalid Phone Number");
             return;
            }
             String email =patientEmailTxtField1.getText();
             if(email.length()==0 || !validation(email,"^(.+)@(\\S+)$")){
             JOptionPane.showMessageDialog(this,"Invalid Email");
             return;
            }
             
             String insurance = patientInsuranceTxtField1.getText();
             if(insurance.length()==0 || !validation(insurance,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Insurance");
             return;
            }
            
             String password = patientSetPasswordTxtField1.getText();
             if(password.length()==0 || !validation(password,"^(?![\\s.]+$)[a-zA-Z0-9@#$]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Password.Only A-Z,a-z,0-9,@,and # are allowed");
             return;
            }
            String confirmPassword = patientConfirmsPasswordTxtField1.getText();
            if(!(confirmPassword.equals(password))){
             JOptionPane.showMessageDialog(this,"Confirm Password does not match the set password");
             return;
            }
            String selectedcity = String.valueOf(cityComboBoxPatient1.getSelectedItem());
            String selectedcommunity = String.valueOf(communityComboBoxPatient1.getSelectedItem());
            String selectedhouse = String.valueOf(houseComboBoxPatient1.getSelectedItem());
            if("Select".equals(selectedcity)||"Select".equals(selectedcommunity)||"Select".equals(selectedhouse)){
            JOptionPane.showMessageDialog(this,"Invalid Address. Select all the fields of address");
             return;
            }
            String address = selectedcity+","+selectedcommunity+","+selectedhouse;
            loggedInPatient.getPerson().setPersonName(name);
            loggedInPatient.getPerson().setPersonAge(age);
            loggedInPatient.getPerson().setPersonGender(gender);
            loggedInPatient.getPerson().setPersonInsurance(insurance);
            loggedInPatient.getPerson().setPersonContactNo(phone);
            loggedInPatient.getPerson().setPersonContactEmail(email);
            loggedInPatient.getPerson().setPersonDOB(dob);
            
            loggedInPatient.getPerson().setPassword(password);
            loggedInPatient.getPerson().setPersonAddress(address);
            loggedInPatient.getPerson().setHouse(patientHouse);
//            
              
              
            
           
            JOptionPane.showMessageDialog(this,"Your patient account is successfully updated.");
            clearUpdatePageFields();
           
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, "Invalid Input. Error updating patient account");
            System.out.print(e);
           
            
        }
    }//GEN-LAST:event_patientUpdateBtnActionPerformed

    private void viewPatientProfileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPatientProfileBtnActionPerformed
        // TODO add your handling code here:
            patientNameTxtField1.setText(loggedInPatient.getPerson().getPersonName());
            patientAgeTxtField1.setText(String.valueOf(loggedInPatient.getPerson().getPersonAge()));
            
            if("Male".equals(loggedInPatient.getPerson().getPersonGender())){
                    maleRadio2.setSelected(true);
                }
                else if ("Female".equals(loggedInPatient.getPerson().getPersonGender())){
                    femaleRadio2.setSelected(true);
                }
                else if ("Other".equals(loggedInPatient.getPerson().getPersonGender())){
                    otherRadio2.setSelected(true);
                }
            
            patientDOB1.setDate(loggedInPatient.getPerson().getPersonDOB());
            patientPhoneTxtField1.setText(loggedInPatient.getPerson().getPersonContactNo());
            patientEmailTxtField1.setText(loggedInPatient.getPerson().getPersonContactEmail());
            patientInsuranceTxtField1.setText(loggedInPatient.getPerson().getPersonInsurance());
            patientSetUsernameTxtField1.setText(loggedInPatient.getPerson().getUsername());
            patientSetPasswordTxtField1.setText(loggedInPatient.getPerson().getPassword());
            patientConfirmsPasswordTxtField1.setText(loggedInPatient.getPerson().getPassword());
             String[] arrOfStr = loggedInPatient.getPerson().getPersonAddress().split(",", 0); 
            cityComboBoxPatient1.addItem(arrOfStr[0]);
            cityComboBoxPatient1.setSelectedItem(arrOfStr[0]);
            communityComboBoxPatient1.addItem(arrOfStr[1]);
            communityComboBoxPatient1.setSelectedItem(arrOfStr[1]);
            houseComboBoxPatient1.addItem(arrOfStr[2]);
            houseComboBoxPatient1.setSelectedItem(arrOfStr[2]);
        
    }//GEN-LAST:event_viewPatientProfileBtnActionPerformed
     private void populateTableAdmin(){
     DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
         model.setRowCount(0);
         int i =1;
         for (City c : cityList.getCitytList()){
           
           Object [] row3 = new Object[2];
             row3[0] = i;
             row3[1] = c;
            
              model.addRow(row3);
              i++;
        }
         DefaultTableModel model1 = (DefaultTableModel) doctorTable1.getModel();
         model1.setRowCount(0);
         for(Doctor doctor : doctorList.getDoctorList()){
          Object [] row2 = new Object[3];
             row2[0] = i;
             row2[1] = doctor.getPerson().getPersonId();
             row2[2] = doctor;
             
              model1.addRow(row2);
             i++;  
        } 
         DefaultTableModel model2 = (DefaultTableModel) patientManageTable1.getModel();
         model2.setRowCount(0);
      for(Patient p :patientList.getPatientList()){
          Object [] row1 = new Object[3];
             row1[0] = p.getPerson().getPersonId();
             row1[1] = p;
             for(Encounter e :p.getEncounterHistory().getEncounterList() ){
             row1[2] =","+e.getAppointmentDetails() ;
             }
            
              model2.addRow(row1);
              
        }
         
     }
    private void manageProfileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageProfileBtnActionPerformed
        // TODO add your handling code here:
        doctorViewPanel.removeAll();
        doctorViewPanel.add(doctorViewProfilePanel);
        doctorViewPanel.repaint();
        doctorViewPanel.revalidate();
        doctorNameViewLabel.setText(loggedInDoctor.getPerson().getPersonName());
        doctorAgeViewLabel.setText(String.valueOf(loggedInDoctor.getPerson().getPersonAge()));
        doctorGenderViewLabel.setText(loggedInDoctor.getPerson().getPersonGender());
        doctorDOBViewLabel.setText(dateFormat.format(loggedInDoctor.getPerson().getPersonDOB()));
        doctorSpecialityViewLabel.setText(loggedInDoctor.getSpeciality());
        doctorDegreeViewLabel.setText(loggedInDoctor.getDegree());
        doctorAvailabilityViewLabel.setText(loggedInDoctor.getAvailability());
        doctorContactViewLabel.setText(loggedInDoctor.getPerson().getPersonContactNo());
        doctorEmailViewLabel.setText(loggedInDoctor.getPerson().getPersonContactEmail());
        doctorUsernameViewLabel.setText(loggedInDoctor.getPerson().getUsername());
        doctorPasswordViewLabel.setText(loggedInDoctor.getPerson().getPassword());
        doctorConfirmPassViewLabel.setText(loggedInDoctor.getPerson().getPassword());
        
        
    }//GEN-LAST:event_manageProfileBtnActionPerformed

    private void doctorChangePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorChangePasswordActionPerformed
        // TODO add your handling code here:
        String password = doctorPasswordViewLabel.getText();
             if(password.length()==0 || !validation(password,"^(?![\\s.]+$)[a-zA-Z0-9@#$]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Password.Only A-Z,a-z,0-9,@,and # are allowed");
             return;
            }
            String confirmPassword = doctorConfirmPassViewLabel.getText();
            if(!(confirmPassword.equals(password))){
             JOptionPane.showMessageDialog(this,"Confirm Password does not match the set password");
             return;
            }
            loggedInDoctor.getPerson().setPassword(doctorPasswordViewLabel.getText());
            JOptionPane.showMessageDialog(this,"Password successfully updated");
           
                
    }//GEN-LAST:event_doctorChangePasswordActionPerformed

    private void cititsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cititsTableMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = cititsTable.getSelectedRow();
         DefaultTableModel model = (DefaultTableModel) cititsTable.getModel();
         selectedupdatecityname = (City)model.getValueAt(selectedRowIndex, 1);
         
         updateCityNameTxtField.setText(selectedupdatecityname.getCityName());
        
    }//GEN-LAST:event_cititsTableMouseClicked

    private void communityAdminManageHousesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityAdminManageHousesBtnActionPerformed
        // TODO add your handling code here:
        
                communityAdminHouseChangePanel(manageHousesPanel);
                addHouseTxtField.setText("");
    }//GEN-LAST:event_communityAdminManageHousesBtnActionPerformed

    private void communityAdminLogOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityAdminLogOutBtnActionPerformed
        // TODO add your handling code here:
        changePanel(loginPage);
        loggedAdmin=0;
    }//GEN-LAST:event_communityAdminLogOutBtnActionPerformed

    private void communityAdminManageHosbitalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityAdminManageHosbitalBtnActionPerformed
        // TODO add your handling code here:
        communityAdminHouseChangePanel(manageHospitalsPanel);
         addHospitalTxtField.setText("");
          addHospitalAdminUsernameTxtField.setText("");
          addHospitalAdminPasswordTxtField.setText("");
          addHospitalAdminPasswordTxtField1.setText("");
          addHospitalAdminUsernameTxtField.setEditable(true);
        populateTable4();
    }//GEN-LAST:event_communityAdminManageHosbitalBtnActionPerformed

    private void hospitalAdminLogOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalAdminLogOutBtnActionPerformed
        // TODO add your handling code here:
        changePanel(loginPage);
        clearDoctorRegistrationFields();
        
    }//GEN-LAST:event_hospitalAdminLogOutBtnActionPerformed

    private void managePatientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managePatientBtnActionPerformed
        // TODO add your handling code here:
        changeAdminPanel(adminManagePatientPanel);
        populateTablePatients();
        clearManagePatientFields();
        cityComboBoxPatient2.removeAllItems();
        cityComboBoxPatient2.addItem("Select");
        cityComboBoxPatient2.setSelectedItem("Select"); 
        for (City c : cityList.getCitytList()){
             cityComboBoxPatient2.addItem(c.getCityName());   
         }
        communityComboBoxPatient2.removeAllItems();
        communityComboBoxPatient2.addItem("Select");
        communityComboBoxPatient2.setSelectedItem("Select"); 
        houseComboBoxPatient2.removeAllItems();
        houseComboBoxPatient2.addItem("Select");
        houseComboBoxPatient2.setSelectedItem("Select"); 
    }//GEN-LAST:event_managePatientBtnActionPerformed
    private void populateTablePatients(){
     DefaultTableModel model = (DefaultTableModel) patientManageTable.getModel();
     model.setRowCount(0);
      for(Patient p :patientList.getPatientList()){
          Object [] row = new Object[3];
             row[0] = p.getPerson().getPersonId();
             row[1] = p;
             for(Encounter e :p.getEncounterHistory().getEncounterList() ){
             row[2] =","+e.getAppointmentDetails() ;
             }
            
              model.addRow(row);
              
        }
    }
    
    private void patientEmailTxtField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientEmailTxtField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientEmailTxtField2ActionPerformed

    private void cityComboBoxPatient2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxPatient2ActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxPatient2.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        communityComboBoxPatient2.removeAllItems();
        communityComboBoxPatient2.addItem("Select");
        communityComboBoxPatient2.setSelectedItem("Select");
        for (Community cm :city.getCommunityList()){
             communityComboBoxPatient2.addItem(cm.getCommunityName()); 
         }
    }//GEN-LAST:event_cityComboBoxPatient2ActionPerformed

    private void communityComboBoxPatient2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboBoxPatient2ActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxPatient2.getSelectedItem());
         String selectedcommunity = String.valueOf(communityComboBoxPatient2.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        Community community = new Community();
        for (Community cm :city.getCommunityList()){
            if(cm.getCommunityName().equals(selectedcommunity)){
             community = cm;
         }
        houseComboBoxPatient2.removeAllItems();
        houseComboBoxPatient2.addItem("Select");
        houseComboBoxPatient2.setSelectedItem("Select");
      
        for (House h :community.getHouseList()){
             houseComboBoxPatient2.addItem(h.getHouseName()); 
         }
        } 
    }//GEN-LAST:event_communityComboBoxPatient2ActionPerformed

    private void houseComboBoxPatient2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseComboBoxPatient2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_houseComboBoxPatient2ActionPerformed
    Patient selectedPatient;
    private void patientManageTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientManageTableMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = patientManageTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) patientManageTable.getModel();
        selectedPatient  = (Patient)model.getValueAt(selectedRowIndex, 1); 
        patientNameTxtField2.setText(selectedPatient.getPerson().getPersonName());
        patientAgeTxtField2.setText(String.valueOf(selectedPatient.getPerson().getPersonAge()));
            
            if("Male".equals(selectedPatient.getPerson().getPersonGender())){
                    maleRadio3.setSelected(true);
                }
                else if ("Female".equals(selectedPatient.getPerson().getPersonGender())){
                    femaleRadio3.setSelected(true);
                }
                else if ("Other".equals(selectedPatient.getPerson().getPersonGender())){
                    otherRadio3.setSelected(true);
                }
            
            patientDOB2.setDate(selectedPatient.getPerson().getPersonDOB());
            patientPhoneTxtField2.setText(selectedPatient.getPerson().getPersonContactNo());
            patientEmailTxtField2.setText(selectedPatient.getPerson().getPersonContactEmail());
            patientInsuranceTxtField2.setText(selectedPatient.getPerson().getPersonInsurance());
            patientSetUsernameTxtField2.setText(selectedPatient.getPerson().getUsername());
            patientSetPasswordTxtField2.setText(selectedPatient.getPerson().getPassword());
            patientConfirmsPasswordTxtField2.setText(selectedPatient.getPerson().getPassword());
            String[] arrOfStr = selectedPatient.getPerson().getPersonAddress().split(",", 0); 
            cityComboBoxPatient2.addItem(arrOfStr[0]);
            cityComboBoxPatient2.setSelectedItem(arrOfStr[0]);
            communityComboBoxPatient2.addItem(arrOfStr[1]);
            communityComboBoxPatient2.setSelectedItem(arrOfStr[1]);
            houseComboBoxPatient2.addItem(arrOfStr[2]);
            houseComboBoxPatient2.setSelectedItem(arrOfStr[2]);
            
    }//GEN-LAST:event_patientManageTableMouseClicked
    private void clearManagePatientFields(){
    
        patientNameTxtField2.setText("");
        patientAgeTxtField2.setText("");
        buttonGroup3.clearSelection();
            
            
            patientDOB2.setCalendar(null);
            patientPhoneTxtField2.setText("");
            patientEmailTxtField2.setText("");
            patientInsuranceTxtField2.setText("");
            patientSetUsernameTxtField2.setText("");
            patientSetUsernameTxtField2.setEditable(false);
            patientSetPasswordTxtField2.setText("");
            patientConfirmsPasswordTxtField2.setText("");
            
            cityComboBoxPatient2.addItem("Select");
            cityComboBoxPatient2.setSelectedItem("Select");
            communityComboBoxPatient2.addItem("Select");
            communityComboBoxPatient2.setSelectedItem("Select");
            houseComboBoxPatient2.addItem("Select");
            houseComboBoxPatient2.setSelectedItem("Select");
    }
    private void updatePatientAdminBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePatientAdminBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = patientManageTable.getSelectedRow();
        if(selectedRowIndex<=0){
        JOptionPane.showMessageDialog(this,"Please select a patient to update");
             return;
        }
        try{
            String name = patientNameTxtField2.getText();
            if(name.length()==0 || !validation(name,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Name");
             return;
            }
            int age = Integer.parseInt( patientAgeTxtField2.getText());
             if(!(age >= 18)){
             JOptionPane.showMessageDialog(this,"Invalid Age. Age should be above 18 yrs"); 
             return;
            }
            String gender;
            if(maleRadio3.isSelected()){
                gender= "Male";
            }
            else if(femaleRadio3.isSelected()){
                gender= "Female";
            }
            else if(otherRadio3.isSelected()){
                    gender = "Other";
                }
             else {
                 gender = "";
             }
            if(gender.length()==0 ){
             JOptionPane.showMessageDialog(this,"Please select your gender");
             return;
            }
             Date dob= patientDOB2.getDate();
              if(dob==null){
             JOptionPane.showMessageDialog(this,"Please select your date of birth");
             return;
            }
             String phone=patientPhoneTxtField2.getText();
             if(phone.length()==0 ||!validation(phone,"^\\d{10}$")){
             JOptionPane.showMessageDialog(this,"Invalid Phone Number");
             return;
            }
             String email =patientEmailTxtField2.getText();
             if(email.length()==0 || !validation(email,"^(.+)@(\\S+)$")){
             JOptionPane.showMessageDialog(this,"Invalid Email");
             return;
            }
             
             String insurance = patientInsuranceTxtField2.getText();
             if(insurance.length()==0 || !validation(insurance,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Insurance");
             return;
            }
            
             String password = patientSetPasswordTxtField2.getText();
             if(password.length()==0 || !validation(password,"^(?![\\s.]+$)[a-zA-Z0-9@#$]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Password.Only A-Z,a-z,0-9,@,and # are allowed");
             return;
            }
            String confirmPassword = patientConfirmsPasswordTxtField2.getText();
            if(!(confirmPassword.equals(password))){
             JOptionPane.showMessageDialog(this,"Confirm Password does not match the set password");
             return;
            }
            String selectedcity = String.valueOf(cityComboBoxPatient2.getSelectedItem());
            String selectedcommunity = String.valueOf(communityComboBoxPatient2.getSelectedItem());
            String selectedhouse = String.valueOf(houseComboBoxPatient2.getSelectedItem());
            if("Select".equals(selectedcity)||"Select".equals(selectedcommunity)||"Select".equals(selectedhouse)){
            JOptionPane.showMessageDialog(this,"Invalid Address. Select all the fields of address");
             return;
            }
            String address = selectedcity+","+selectedcommunity+","+selectedhouse;
            selectedPatient.getPerson().setPersonName(name);
            selectedPatient.getPerson().setPersonAge(age);
            selectedPatient.getPerson().setPersonGender(gender);
            selectedPatient.getPerson().setPersonInsurance(insurance);
            selectedPatient.getPerson().setPersonContactNo(phone);
            selectedPatient.getPerson().setPersonContactEmail(email);
            selectedPatient.getPerson().setPersonDOB(dob);
            
            selectedPatient.getPerson().setPassword(password);
            selectedPatient.getPerson().setPersonAddress(address);
            selectedPatient.getPerson().setHouse(patientHouse);
//            
              
              
            
           
            JOptionPane.showMessageDialog(this,"Your patient account is successfully updated.");
            clearManagePatientFields();
            populateTablePatients();
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, "Invalid Input. Error updating patient account");
            System.out.print(e);
           
            
        }
    }//GEN-LAST:event_updatePatientAdminBtnActionPerformed

    private void doctorTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorTable1MouseClicked

    private void patientManageTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientManageTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_patientManageTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        changeAdminPanel(systemAdminHomePage);
        populateTableAdmin();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void doctorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorTableMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = doctorTable.getSelectedRow();
        
         DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
         selectedupdatedoctor = (Doctor)model.getValueAt(selectedRowIndex, 2);
         Person person = selectedupdatedoctor.getPerson();
         doctorNameTxtField.setText(person.getPersonName());
         doctorAgeTxtField.setText(String.valueOf(person.getPersonAge()));
         if("Male".equals(person.getPersonGender())){
                    maleRadio1.setSelected(true);
                }
                else if ("Female".equals(person.getPersonGender())){
                    femaleRadio1.setSelected(true);
                }
                else if ("Other".equals(person.getPersonGender())){
                    otherRadio1.setSelected(true);
                }
         doctorDOB.setDate(person.getPersonDOB());
         doctorPhoneTxtField.setText(person.getPersonContactNo());
         doctorEmailTxtField.setText(person.getPersonContactEmail());
         doctorSetUsernameTxtField.setText(person.getUsername());
         doctorSetPasswordTxtField.setText(person.getPassword());
         doctorConfirmsPasswordTxtField.setText(person.getPassword());
         doctorSpecialityTxtField.setText(selectedupdatedoctor.getSpeciality());
         doctorDegreeTxtField.setText(selectedupdatedoctor.getDegree());
         doctorAvailabilityTxtField.setText(selectedupdatedoctor.getAvailability());
         doctorSetUsernameTxtField.setEditable(false);
         populateTable5();
    }//GEN-LAST:event_doctorTableMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to deactivate patient's account. They will no longer be able to access thier account.", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         selectedPatient.getPerson().setUsername("not");
         JOptionPane.showMessageDialog(this,"Patient account is deactivated but the account details are not deleted");
          
         clearManagePatientFields();
           
         }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void doctorNameTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorNameTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorNameTxtFieldActionPerformed
      
    public void clearappointmentListTableFields(){
             patientViewEncounterId.setText("");
             patientViewBloodPressure.setText("");
             patientViewBodyTemperature.setText("");
             patientViewPulseRate.setText("");
             patientViewRespirationRate.setText(""); 
             patientEncounterDate.setText("");
             patientViewEncounterTime.setText("");
             patientViewSymptoms.setText("");
             patientViewDiagnosis.setText("");  
    }
    Community communityCombo = new Community();
    private void populateTable3(){
    
    // TODO add your handling code here:
        String selectedcommunity = String.valueOf(communityComboBoxHouse.getSelectedItem());
        String selectedcity = String.valueOf(cityComboBoxHouse.getSelectedItem());
        DefaultTableModel model = (DefaultTableModel) houseTable.getModel();
        model.setRowCount(0);
         int i =1;
        if(communityComboBoxHouse.getSelectedIndex()==0&&loggedAdmin==0){
        return;
        }
         for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
        
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             communityCombo=cm;
             
           }
        } 
         if(loggedAdmin==1){
           communityCombo=loggedInAdmin.getCommunity();
         }
         
         
          for(House h:communityCombo.getHouseList()){
          Object [] row = new Object[2];
             row[0] = i;
             row[1] = h;
            
              model.addRow(row);
              i++;  
        }
            
        
        
}
    private void populateTable4(){
    
    // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxHospital.getSelectedItem());
        String selectedcommunity = String.valueOf(communityComboBoxHospital.getSelectedItem());
        DefaultTableModel model = (DefaultTableModel) hospitalTable.getModel();
         model.setRowCount(0);
         
         int i =1;
         if(communityComboBoxHospital.getSelectedIndex()==0&&loggedAdmin==0){
        return;
        }
         for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
        
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             communityCombo=cm;
             
           }
        }
        
        HospitalDirectory hospitalList = communityCombo.getHospitalList();
          for(Hospital h : hospitalList.getHospitalList()){
          Object [] row = new Object[2];
             row[0] = i;
             row[1] = h;
            
              model.addRow(row);
              i++;  
        }
    }
    Hospital hospitalCombo = new Hospital();
       private void populateTable5(){
    
    // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxDoctor.getSelectedItem());
        String selectedcommunity = String.valueOf(communityComboBoxDoctor.getSelectedItem());
        String selectedhospital = String.valueOf(hospitalComboBoxDoctor.getSelectedItem());
        if("Select any hospital".equals(selectedhospital) && loggedAdmin==0){
         return;
        }
        DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
         model.setRowCount(0);
         int i =1;
         for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
        
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             communityCombo=cm;
             
           }
        } 
        HospitalDirectory hospitalList = communityCombo.getHospitalList();
        
        
        for (Hospital h :hospitalList.getHospitalList()){
             if(selectedhospital.equals(h.getHospitalName())){
             hospitalCombo=h;
             
           }
         }
        
        if(loggedAdmin==1){
        hospitalCombo=loggedInAdmin.getHospital();
        }
        
          DoctorDirectory doctorList= hospitalCombo.getDoctorList();
          
          for(Doctor doctor : doctorList.getDoctorList()){
          Object [] row = new Object[3];
             row[0] = i;
             row[1] = doctor.getPerson().getPersonId();
             row[2] = doctor;
              model.addRow(row);
             i++;  
        }     
        
        
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MainFrame;
    private javax.swing.JLabel addCityLabel;
    private javax.swing.JLabel addCommunityAdminPasswordLabel;
    private javax.swing.JLabel addCommunityAdminPasswordLabel1;
    private javax.swing.JLabel addCommunityAdminUsernameLabel;
    private javax.swing.JTextField addCommunityAdminUsernameTxtField;
    private javax.swing.JButton addCommunityBtn;
    private javax.swing.JLabel addCommunityLabel;
    private javax.swing.JTextField addCommunityTxtField;
    private javax.swing.JButton addDoctorBtn;
    private javax.swing.JButton addEncounterDetailsBtn;
    private javax.swing.JLabel addHospitalAdminPasswordLabel;
    private javax.swing.JLabel addHospitalAdminPasswordLabel1;
    private javax.swing.JPasswordField addHospitalAdminPasswordTxtField;
    private javax.swing.JPasswordField addHospitalAdminPasswordTxtField1;
    private javax.swing.JLabel addHospitalAdminUsernameLabel;
    private javax.swing.JTextField addHospitalAdminUsernameTxtField;
    private javax.swing.JButton addHospitalBtn;
    private javax.swing.JLabel addHospitalLabel;
    private javax.swing.JTextField addHospitalTxtField;
    private javax.swing.JButton addHouseBtn;
    private javax.swing.JLabel addHouseLabel;
    private javax.swing.JTextField addHouseTxtField;
    private javax.swing.JButton addNewCityBtn;
    private javax.swing.JTextField addNewCityTxtField;
    private javax.swing.JButton adminLogOut;
    private javax.swing.JPanel adminManagePatientPanel;
    private javax.swing.JSplitPane adminSplit;
    private javax.swing.JButton appointmentDeleteBtn;
    private javax.swing.JTable appointmentListTable;
    private javax.swing.JButton bookAppointmentBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroupGender;
    private javax.swing.JButton cancelPatientRegistration;
    private javax.swing.JComboBox<String> citiesComboBox;
    private javax.swing.JTable cititsTable;
    private javax.swing.JComboBox<String> cityComboBoxDoctor;
    private javax.swing.JComboBox<String> cityComboBoxHospital;
    private javax.swing.JComboBox<String> cityComboBoxHouse;
    private javax.swing.JComboBox<String> cityComboBoxPatient;
    private javax.swing.JComboBox<String> cityComboBoxPatient1;
    private javax.swing.JComboBox<String> cityComboBoxPatient2;
    private javax.swing.JPanel communityAdminControlPanel;
    private javax.swing.JPanel communityAdminHome;
    private javax.swing.JPanel communityAdminHouse;
    private javax.swing.JButton communityAdminLogOutBtn;
    private javax.swing.JButton communityAdminManageHosbitalBtn;
    private javax.swing.JButton communityAdminManageHousesBtn;
    private javax.swing.JPasswordField communityAdminPasswordTxtField;
    private javax.swing.JPasswordField communityAdminPasswordTxtField1;
    private javax.swing.JSplitPane communityAdminSplit;
    private javax.swing.JComboBox<String> communityComboBoxDoctor;
    private javax.swing.JComboBox<String> communityComboBoxHospital;
    private javax.swing.JComboBox<String> communityComboBoxHouse;
    private javax.swing.JComboBox<String> communityComboBoxPatient;
    private javax.swing.JComboBox<String> communityComboBoxPatient1;
    private javax.swing.JComboBox<String> communityComboBoxPatient2;
    private javax.swing.JTable communityTable;
    private javax.swing.JPanel communityViewControlPanel;
    private javax.swing.JPanel controlAdmin;
    private javax.swing.JPanel controlCommunityPanel;
    private javax.swing.JButton deleteCityBtn;
    private javax.swing.JButton deleteCommunityBtn;
    private javax.swing.JButton deleteDoctorBtn;
    private javax.swing.JButton deletePatientProfileBtn;
    private javax.swing.JTextField doctorAgeTxtField;
    private javax.swing.JLabel doctorAgeViewLabel;
    private javax.swing.JTextField doctorAvailabilityTxtField;
    private javax.swing.JLabel doctorAvailabilityViewLabel;
    private javax.swing.JButton doctorChangePassword;
    private javax.swing.JPasswordField doctorConfirmPassViewLabel;
    private javax.swing.JPasswordField doctorConfirmsPasswordTxtField;
    private javax.swing.JLabel doctorContactViewLabel;
    private javax.swing.JPanel doctorControlPanel;
    private com.toedter.calendar.JDateChooser doctorDOB;
    private javax.swing.JLabel doctorDOBViewLabel;
    private javax.swing.JTextField doctorDegreeTxtField;
    private javax.swing.JLabel doctorDegreeViewLabel;
    private javax.swing.JTextField doctorEmailTxtField;
    private javax.swing.JLabel doctorEmailViewLabel;
    private javax.swing.JLabel doctorGenderViewLabel;
    private javax.swing.JPanel doctorHome;
    private javax.swing.JPanel doctorHomePanel;
    private javax.swing.JButton doctorLogOutBtn;
    private javax.swing.JPanel doctorManageAppointmentsPanel;
    private javax.swing.JTextField doctorNameTxtField;
    private javax.swing.JLabel doctorNameViewLabel;
    private javax.swing.JPasswordField doctorPasswordViewLabel;
    private javax.swing.JTextField doctorPhoneTxtField;
    private javax.swing.JPasswordField doctorSetPasswordTxtField;
    private javax.swing.JTextField doctorSetUsernameTxtField;
    private javax.swing.JLabel doctorSpeciality;
    private javax.swing.JLabel doctorSpeciality1;
    private javax.swing.JLabel doctorSpeciality2;
    private javax.swing.JLabel doctorSpeciality3;
    private javax.swing.JTextField doctorSpecialityTxtField;
    private javax.swing.JLabel doctorSpecialityViewLabel;
    private javax.swing.JTable doctorTable;
    private javax.swing.JTable doctorTable1;
    private javax.swing.JLabel doctorUsernameViewLabel;
    private javax.swing.JPanel doctorViewPanel;
    private javax.swing.JPanel doctorViewProfilePanel;
    private com.toedter.calendar.JDateChooser encounterDateChooser;
    private javax.swing.JTable encounterTable;
    private javax.swing.JRadioButton femaleRadio;
    private javax.swing.JRadioButton femaleRadio1;
    private javax.swing.JRadioButton femaleRadio2;
    private javax.swing.JRadioButton femaleRadio3;
    private javax.swing.JPanel hospitalAdminHome;
    private javax.swing.JButton hospitalAdminLogOutBtn;
    private javax.swing.JPanel hospitalAdminViewPanel;
    private javax.swing.JComboBox<String> hospitalComboBoxDoctor;
    private javax.swing.JComboBox<String> hospitalComboBoxPatient;
    private javax.swing.JButton hospitalDeleteBtn;
    private javax.swing.JTable hospitalTable;
    private javax.swing.JComboBox<String> houseComboBoxPatient;
    private javax.swing.JComboBox<String> houseComboBoxPatient1;
    private javax.swing.JComboBox<String> houseComboBoxPatient2;
    private javax.swing.JButton houseDeleteBtn;
    private javax.swing.JTable houseTable;
    private javax.swing.JButton houseUpdateBtn;
    private javax.swing.JComboBox<String> hrComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton loginBtn;
    private javax.swing.JPanel loginPage;
    private javax.swing.JButton logoutCommunityAdmin;
    private javax.swing.JRadioButton maleRadio;
    private javax.swing.JRadioButton maleRadio1;
    private javax.swing.JRadioButton maleRadio2;
    private javax.swing.JRadioButton maleRadio3;
    private javax.swing.JPanel manageCitiesPanel;
    private javax.swing.JButton manageCityBtn;
    private javax.swing.JPanel manageCommunitiesPanel;
    private javax.swing.JButton manageCommunityBtn;
    private javax.swing.JButton manageCommunityBttn;
    private javax.swing.JButton manageDoctorBtn;
    private javax.swing.JPanel manageDoctorsPanel;
    private javax.swing.JButton manageHospitalBtn;
    private javax.swing.JButton manageHospitalBtnn;
    private javax.swing.JButton manageHospitalBttn;
    private javax.swing.JPanel manageHospitalsPanel;
    private javax.swing.JButton manageHouseBtn;
    private javax.swing.JPanel manageHousesPanel;
    private javax.swing.JButton managePatientBtn;
    private javax.swing.JButton manageProfileBtn;
    private javax.swing.JComboBox<String> minComboBox;
    private javax.swing.JRadioButton otherRadio;
    private javax.swing.JRadioButton otherRadio1;
    private javax.swing.JRadioButton otherRadio2;
    private javax.swing.JRadioButton otherRadio3;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTxtField;
    private javax.swing.JLabel patientAddressDoctorSearchLabel;
    private javax.swing.JLabel patientAddressDoctorSearchLabel1;
    private javax.swing.JLabel patientAgeLabel;
    private javax.swing.JLabel patientAgeLabel1;
    private javax.swing.JLabel patientAgeLabel2;
    private javax.swing.JLabel patientAgeLabel3;
    private javax.swing.JLabel patientAgeLabel4;
    private javax.swing.JTextField patientAgeTxtField;
    private javax.swing.JTextField patientAgeTxtField1;
    private javax.swing.JTextField patientAgeTxtField2;
    private javax.swing.JTextField patientBloodPressureTxtField;
    private javax.swing.JTextField patientBodyTempTxtField;
    private javax.swing.JLabel patientCityLabel;
    private javax.swing.JLabel patientCityLabel1;
    private javax.swing.JLabel patientCityLabel2;
    private javax.swing.JLabel patientCommunityLabel;
    private javax.swing.JLabel patientCommunityLabel1;
    private javax.swing.JLabel patientCommunityLabel2;
    private javax.swing.JLabel patientConfirmPasswordLabel;
    private javax.swing.JLabel patientConfirmPasswordLabel1;
    private javax.swing.JLabel patientConfirmPasswordLabel2;
    private javax.swing.JLabel patientConfirmPasswordLabel3;
    private javax.swing.JLabel patientConfirmPasswordLabel4;
    private javax.swing.JLabel patientConfirmPasswordLabel5;
    private javax.swing.JLabel patientConfirmPasswordLabel6;
    private javax.swing.JPasswordField patientConfirmsPasswordTxtField;
    private javax.swing.JPasswordField patientConfirmsPasswordTxtField1;
    private javax.swing.JPasswordField patientConfirmsPasswordTxtField2;
    private javax.swing.JPanel patientControlPanel;
    private com.toedter.calendar.JDateChooser patientDOB;
    private com.toedter.calendar.JDateChooser patientDOB1;
    private com.toedter.calendar.JDateChooser patientDOB2;
    private javax.swing.JLabel patientDOBLabel;
    private javax.swing.JLabel patientDOBLabel1;
    private javax.swing.JLabel patientDOBLabel2;
    private javax.swing.JLabel patientDOBLabel3;
    private javax.swing.JLabel patientDOBLabel4;
    private javax.swing.JLabel patientDetailsAgeLabel;
    private javax.swing.JLabel patientDetailsEmailLabel;
    private javax.swing.JLabel patientDetailsGenderLabel;
    private javax.swing.JLabel patientDetailsInsuranceLabel;
    private javax.swing.JLabel patientDetailsNameLabel;
    private javax.swing.JLabel patientDetailsPhoneLabel;
    private javax.swing.JTextField patientDiagnosisTxtField;
    private javax.swing.JLabel patientEmailLabel;
    private javax.swing.JLabel patientEmailLabel1;
    private javax.swing.JLabel patientEmailLabel2;
    private javax.swing.JLabel patientEmailLabel3;
    private javax.swing.JLabel patientEmailLabel4;
    private javax.swing.JTextField patientEmailTxtField;
    private javax.swing.JTextField patientEmailTxtField1;
    private javax.swing.JTextField patientEmailTxtField2;
    private javax.swing.JLabel patientEncounterDate;
    private javax.swing.JButton patientEncounterSaveBtn;
    private javax.swing.JLabel patientGenderLabel;
    private javax.swing.JLabel patientGenderLabel1;
    private javax.swing.JLabel patientGenderLabel2;
    private javax.swing.JLabel patientGenderLabel3;
    private javax.swing.JLabel patientGenderLabel4;
    private javax.swing.JPanel patientHome;
    private javax.swing.JButton patientHomeBtn;
    private javax.swing.JPanel patientHomePanel;
    private javax.swing.JSplitPane patientHomeSplitPane;
    private javax.swing.JLabel patientHouseLabel;
    private javax.swing.JLabel patientHouseLabel1;
    private javax.swing.JLabel patientHouseLabel2;
    private javax.swing.JLabel patientInsuranceLabel;
    private javax.swing.JLabel patientInsuranceLabel1;
    private javax.swing.JLabel patientInsuranceLabel2;
    private javax.swing.JTextField patientInsuranceTxtField;
    private javax.swing.JTextField patientInsuranceTxtField1;
    private javax.swing.JTextField patientInsuranceTxtField2;
    private javax.swing.JButton patientLogOutBtn;
    private javax.swing.JTable patientManageTable;
    private javax.swing.JTable patientManageTable1;
    private javax.swing.JLabel patientNameLabel;
    private javax.swing.JLabel patientNameLabel1;
    private javax.swing.JLabel patientNameLabel2;
    private javax.swing.JLabel patientNameLabel3;
    private javax.swing.JLabel patientNameLabel4;
    private javax.swing.JTextField patientNameTxtField;
    private javax.swing.JTextField patientNameTxtField1;
    private javax.swing.JTextField patientNameTxtField2;
    private javax.swing.JLabel patientPasswordLabel;
    private javax.swing.JLabel patientPasswordLabel1;
    private javax.swing.JLabel patientPasswordLabel2;
    private javax.swing.JLabel patientPasswordLabel3;
    private javax.swing.JLabel patientPasswordLabel4;
    private javax.swing.JLabel patientPhoneLabel;
    private javax.swing.JLabel patientPhoneLabel1;
    private javax.swing.JLabel patientPhoneLabel2;
    private javax.swing.JLabel patientPhoneLabel3;
    private javax.swing.JLabel patientPhoneLabel4;
    private javax.swing.JLabel patientPhoneLabel5;
    private javax.swing.JLabel patientPhoneLabel6;
    private javax.swing.JTextField patientPhoneTxtField;
    private javax.swing.JTextField patientPhoneTxtField1;
    private javax.swing.JTextField patientPhoneTxtField2;
    private javax.swing.JTextField patientPulseTxtField;
    private javax.swing.JButton patientRegisterBtn;
    private javax.swing.JPanel patientRegistrationPage;
    private javax.swing.JTextField patientRespRateTxtField;
    private javax.swing.JPasswordField patientSetPasswordTxtField;
    private javax.swing.JPasswordField patientSetPasswordTxtField1;
    private javax.swing.JPasswordField patientSetPasswordTxtField2;
    private javax.swing.JTextField patientSetUsernameTxtField;
    private javax.swing.JLabel patientSetUsernameTxtField1;
    private javax.swing.JTextField patientSetUsernameTxtField2;
    private javax.swing.JTextField patientSymptomsTxtField;
    private javax.swing.JTable patientTable;
    private javax.swing.JButton patientUpdateBtn;
    private javax.swing.JLabel patientUsernameLabel;
    private javax.swing.JLabel patientUsernameLabel1;
    private javax.swing.JLabel patientUsernameLabel2;
    private javax.swing.JLabel patientUsernameLabel3;
    private javax.swing.JLabel patientUsernameLabel4;
    private javax.swing.JLabel patientViewAppointmentDetails;
    private javax.swing.JLabel patientViewBloodPressure;
    private javax.swing.JLabel patientViewBodyTemperature;
    private javax.swing.JLabel patientViewDiagnosis;
    private javax.swing.JLabel patientViewEncounterId;
    private javax.swing.JLabel patientViewEncounterTime;
    private javax.swing.JPanel patientViewPanel;
    private javax.swing.JLabel patientViewPulseRate;
    private javax.swing.JLabel patientViewRespirationRate;
    private javax.swing.JLabel patientViewSymptoms;
    private javax.swing.JLabel registrationLabel;
    private javax.swing.JLabel registrationLabel1;
    private javax.swing.JLabel registrationLabel2;
    private javax.swing.JLabel registrationLink;
    private javax.swing.JPanel searchDoctorPanel;
    private javax.swing.JButton searchDoctorPatientBtn;
    private javax.swing.JPanel systemAdminHome;
    private javax.swing.JPanel systemAdminHomePage;
    private javax.swing.JComboBox<String> timeComboBox;
    private javax.swing.JButton updateCityBtn;
    private javax.swing.JLabel updateCityNameLabel;
    private javax.swing.JTextField updateCityNameTxtField;
    private javax.swing.JButton updateCommunityBtn;
    private javax.swing.JButton updateDoctorBtn;
    private javax.swing.JButton updateHospitalBtn;
    private javax.swing.JButton updatePatientAdminBtn;
    private javax.swing.JButton updatePatientProfileBtn;
    private javax.swing.JPanel updatePatientProfilePanel;
    private javax.swing.JLabel userTypeLabel;
    private javax.swing.JComboBox<String> userTypeSelect;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTxtField;
    private javax.swing.JPanel viewAdmin;
    private javax.swing.JButton viewAppointmentDetailsBtn;
    private javax.swing.JPanel viewCommunityAdminPanel;
    private javax.swing.JButton viewPatientProfileBtn;
    private javax.swing.JLabel welcomeAdmin;
    private javax.swing.JLabel welcomeAdmin1;
    private javax.swing.JLabel welcomeAdmin2;
    private javax.swing.JLabel welcomeAdmin3;
    private javax.swing.JLabel welcomeDoctor;
    private javax.swing.JLabel welcomePatient;
    private javax.swing.JLabel welcomecommunityAdmin;
    // End of variables declaration//GEN-END:variables
}
