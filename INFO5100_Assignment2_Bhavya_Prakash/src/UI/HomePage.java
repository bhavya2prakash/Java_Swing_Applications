/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import Business.Admin;
import Business.City;
import Business.CityCatalogue;
import Business.Community;
import Business.Doctor;
import Business.DoctorDirectory;
import Business.Encounter;
import Business.EncounterHistory;
import Business.Hospital;
import Business.HospitalDirectory;
import Business.House;
import Business.Patient;
import Business.PatientDirectory;
import Business.Person;
import Business.PersonDirectory;
import Business.SystemClass;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author BHAVYA PRAKASH
 */
public class HomePage extends javax.swing.JFrame {

    /**
     * Creates new form HomePage
     */
   
    String userType = "Select any user type";
   
    SystemClass system = new SystemClass();
    PatientDirectory patientList = system.getPatientList();
    PersonDirectory personList =  system.getPersonList();
    CityCatalogue cityList = system.getCityList();
    DoctorDirectory doctorList = system.getDoctorList();
    House patientHouse;
    HospitalDirectory patientHospitalList = new HospitalDirectory() ;
    Patient loggedInPatient;
    Doctor loggedInDoctor;
    Admin loggedInAdmin ;
    public HomePage() {
        initComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupGender = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        MainFrame = new javax.swing.JPanel();
        loginPage = new javax.swing.JPanel();
        userTypeLabel = new javax.swing.JLabel();
        userTypeSelect = new javax.swing.JComboBox<>();
        usernameLabel = new javax.swing.JLabel();
        usernameTxtField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        loginBtn = new javax.swing.JButton();
        registrationLink = new javax.swing.JLabel();
        passwordTxtField = new javax.swing.JPasswordField();
        patientRegistrationPage = new javax.swing.JPanel();
        patientNameTxtField = new javax.swing.JTextField();
        patientRegisterBtn = new javax.swing.JButton();
        patientCityLabel = new javax.swing.JLabel();
        patientAgeTxtField = new javax.swing.JTextField();
        maleRadio = new javax.swing.JRadioButton();
        patientNameLabel = new javax.swing.JLabel();
        femaleRadio = new javax.swing.JRadioButton();
        patientAgeLabel = new javax.swing.JLabel();
        otherRadio = new javax.swing.JRadioButton();
        patientDOBLabel = new javax.swing.JLabel();
        patientDOB = new com.toedter.calendar.JDateChooser();
        patientGenderLabel = new javax.swing.JLabel();
        patientUsernameLabel = new javax.swing.JLabel();
        patientPasswordLabel = new javax.swing.JLabel();
        patientSetUsernameTxtField = new javax.swing.JTextField();
        cancelPatientRegistration = new javax.swing.JButton();
        patientSetPasswordTxtField = new javax.swing.JPasswordField();
        patientCommunityLabel = new javax.swing.JLabel();
        patientHouseLabel = new javax.swing.JLabel();
        cityComboBoxPatient = new javax.swing.JComboBox<>();
        communityComboBoxPatient = new javax.swing.JComboBox<>();
        houseComboBoxPatient = new javax.swing.JComboBox<>();
        patientConfirmPasswordLabel = new javax.swing.JLabel();
        patientConfirmsPasswordTxtField = new javax.swing.JPasswordField();
        patientEmailLabel = new javax.swing.JLabel();
        patientPhoneTxtField = new javax.swing.JTextField();
        patientPhoneLabel = new javax.swing.JLabel();
        patientEmailTxtField = new javax.swing.JTextField();
        patientInsuranceLabel = new javax.swing.JLabel();
        patientInsuranceTxtField = new javax.swing.JTextField();
        registrationLabel = new javax.swing.JLabel();
        patientHome = new javax.swing.JPanel();
        patientHomeSplitPane = new javax.swing.JSplitPane();
        patientControlPanel = new javax.swing.JPanel();
        updatePatientProfileBtn = new javax.swing.JButton();
        searchDoctorPatientBtn = new javax.swing.JButton();
        deletePatientProfileBtn = new javax.swing.JButton();
        patientLogOutBtn = new javax.swing.JButton();
        patientHomeBtn = new javax.swing.JButton();
        patientViewPanel = new javax.swing.JPanel();
        patientHomePanel = new javax.swing.JPanel();
        welcomePatient = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        appointmentListTable = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        patientViewEncounterId = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        patientViewBloodPressure = new javax.swing.JLabel();
        patientViewPulseRate = new javax.swing.JLabel();
        patientEncounterDate = new javax.swing.JLabel();
        patientViewSymptoms = new javax.swing.JLabel();
        patientViewAppointmentDetails = new javax.swing.JLabel();
        patientViewBodyTemperature = new javax.swing.JLabel();
        patientViewRespirationRate = new javax.swing.JLabel();
        patientViewEncounterTime = new javax.swing.JLabel();
        patientViewDiagnosis = new javax.swing.JLabel();
        appointmentDeleteBtn = new javax.swing.JButton();
        viewAppointmentDetailsBtn = new javax.swing.JButton();
        searchDoctorPanel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        bookAppointmentBtn = new javax.swing.JButton();
        hospitalComboBoxPatient = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        patientAddressDoctorSearchLabel = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        updatePatientProfilePanel = new javax.swing.JPanel();
        systemAdminHome = new javax.swing.JPanel();
        adminSplit = new javax.swing.JSplitPane();
        controlAdmin = new javax.swing.JPanel();
        manageCityBtn = new javax.swing.JButton();
        manageHouseBtn = new javax.swing.JButton();
        manageCommunityBtn = new javax.swing.JButton();
        manageDoctorBtn = new javax.swing.JButton();
        manageHospitalBtn = new javax.swing.JButton();
        managePatientBtn = new javax.swing.JButton();
        adminLogOut = new javax.swing.JButton();
        viewAdmin = new javax.swing.JPanel();
        systemAdminHomePage = new javax.swing.JPanel();
        welcomeAdmin = new javax.swing.JLabel();
        manageCitiesPanel = new javax.swing.JPanel();
        addCityLabel = new javax.swing.JLabel();
        addNewCityTxtField = new javax.swing.JTextField();
        addNewCityBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        cititsTable = new javax.swing.JTable();
        updateCityNameBtn = new javax.swing.JButton();
        deleteCityBtn = new javax.swing.JButton();
        updateCityNameLabel = new javax.swing.JLabel();
        updateCityNameTxtField = new javax.swing.JTextField();
        updateCityBtn = new javax.swing.JButton();
        manageCommunitiesPanel = new javax.swing.JPanel();
        addCommunityLabel = new javax.swing.JLabel();
        addCommunityTxtField = new javax.swing.JTextField();
        addCommunityAdminUsernameLabel = new javax.swing.JLabel();
        addCommunityAdminUsernameTxtField = new javax.swing.JTextField();
        addCommunityAdminPasswordLabel = new javax.swing.JLabel();
        communityAdminPasswordTxtField = new javax.swing.JPasswordField();
        citiesComboBox = new javax.swing.JComboBox<>();
        addCommunityBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        communityTable = new javax.swing.JTable();
        updateCommunityBtn = new javax.swing.JButton();
        deleteCommunityBtn = new javax.swing.JButton();
        manageHospitalsPanel = new javax.swing.JPanel();
        cityComboBoxHospital = new javax.swing.JComboBox<>();
        communityComboBoxHospital = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        hospitalTable = new javax.swing.JTable();
        addHospitalLabel = new javax.swing.JLabel();
        addHospitalTxtField = new javax.swing.JTextField();
        addHospitalBtn = new javax.swing.JButton();
        updateHospitalBtn = new javax.swing.JButton();
        hospitalDeleteBtn = new javax.swing.JButton();
        addHospitalAdminUsernameLabel = new javax.swing.JLabel();
        addHospitalAdminUsernameTxtField = new javax.swing.JTextField();
        addHospitalAdminPasswordLabel = new javax.swing.JLabel();
        addHospitalAdminPasswordTxtField = new javax.swing.JTextField();
        manageHousesPanel = new javax.swing.JPanel();
        addHouseLabel = new javax.swing.JLabel();
        addHouseTxtField = new javax.swing.JTextField();
        addHouseBtn = new javax.swing.JButton();
        cityComboBoxHouse = new javax.swing.JComboBox<>();
        communityComboBoxHouse = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        houseTable = new javax.swing.JTable();
        houseUpdateBtn = new javax.swing.JButton();
        houseDeleteBtn = new javax.swing.JButton();
        manageDoctorsPanel = new javax.swing.JPanel();
        cityComboBoxDoctor = new javax.swing.JComboBox<>();
        communityComboBoxDoctor = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        doctorTable = new javax.swing.JTable();
        hospitalComboBoxDoctor = new javax.swing.JComboBox<>();
        addDoctorBtn = new javax.swing.JButton();
        updateDoctorBtn = new javax.swing.JButton();
        deleteDoctorBtn = new javax.swing.JButton();
        patientNameLabel1 = new javax.swing.JLabel();
        doctorNameTxtField = new javax.swing.JTextField();
        patientAgeLabel1 = new javax.swing.JLabel();
        doctorAgeTxtField = new javax.swing.JTextField();
        patientGenderLabel1 = new javax.swing.JLabel();
        maleRadio1 = new javax.swing.JRadioButton();
        femaleRadio1 = new javax.swing.JRadioButton();
        otherRadio1 = new javax.swing.JRadioButton();
        patientDOBLabel1 = new javax.swing.JLabel();
        doctorDOB = new com.toedter.calendar.JDateChooser();
        patientPhoneLabel1 = new javax.swing.JLabel();
        doctorPhoneTxtField = new javax.swing.JTextField();
        patientEmailLabel1 = new javax.swing.JLabel();
        doctorEmailTxtField = new javax.swing.JTextField();
        patientUsernameLabel1 = new javax.swing.JLabel();
        doctorSetUsernameTxtField = new javax.swing.JTextField();
        patientPasswordLabel1 = new javax.swing.JLabel();
        doctorSetPasswordTxtField = new javax.swing.JPasswordField();
        patientConfirmPasswordLabel1 = new javax.swing.JLabel();
        doctorConfirmsPasswordTxtField = new javax.swing.JPasswordField();
        patientPhoneLabel2 = new javax.swing.JLabel();
        doctorDegreeTxtField = new javax.swing.JTextField();
        doctorSpeciality = new javax.swing.JLabel();
        doctorSpecialityTxtField = new javax.swing.JTextField();
        doctorSpeciality1 = new javax.swing.JLabel();
        doctorAvailabilityTxtField = new javax.swing.JTextField();
        manageEncounterHistory = new javax.swing.JPanel();
        managePatientsPanel = new javax.swing.JPanel();
        communityAdminHouse = new javax.swing.JPanel();
        communityAdminSplit = new javax.swing.JSplitPane();
        controlCommunityPanel = new javax.swing.JPanel();
        manageCommunityBttn = new javax.swing.JButton();
        manageHospitalBtnn = new javax.swing.JButton();
        manageHospitalBttn = new javax.swing.JButton();
        logoutCommunityAdmin = new javax.swing.JButton();
        viewCommunityAdminPanel = new javax.swing.JPanel();
        welcomecommunityAdmin = new javax.swing.JLabel();
        doctorHome = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        doctorControlPanel = new javax.swing.JPanel();
        addEncounterDetailsBtn = new javax.swing.JButton();
        manageProfileBtn = new javax.swing.JButton();
        doctorLogOutBtn = new javax.swing.JButton();
        doctorViewPanel = new javax.swing.JPanel();
        doctorHomePanel = new javax.swing.JPanel();
        welcomeDoctor = new javax.swing.JLabel();
        doctorManageAppointmentsPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        encounterTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        patientDetailsNameLabel = new javax.swing.JLabel();
        patientDetailsAgeLabel = new javax.swing.JLabel();
        patientDetailsGenderLabel = new javax.swing.JLabel();
        patientDetailsInsuranceLabel = new javax.swing.JLabel();
        patientDetailsPhoneLabel = new javax.swing.JLabel();
        patientDetailsEmailLabel = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        patientEncounterSaveBtn = new javax.swing.JButton();
        patientBloodPressureTxtField = new javax.swing.JTextField();
        patientBodyTempTxtField = new javax.swing.JTextField();
        patientSymptomsTxtField = new javax.swing.JTextField();
        patientPulseTxtField = new javax.swing.JTextField();
        patientRespRateTxtField = new javax.swing.JTextField();
        patientDiagnosisTxtField = new javax.swing.JTextField();
        encounterDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel26 = new javax.swing.JLabel();
        hrComboBox = new javax.swing.JComboBox<>();
        minComboBox = new javax.swing.JComboBox<>();
        timeComboBox = new javax.swing.JComboBox<>();
        jLabel27 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MainFrame.setLayout(new java.awt.CardLayout());

        userTypeLabel.setText("User Type");

        userTypeSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Patient", "Doctor", "System Admin", "Hospital Admin", "Community Admin" }));
        userTypeSelect.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        userTypeSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTypeSelectActionPerformed(evt);
            }
        });

        usernameLabel.setText("Username");

        passwordLabel.setText("Password");

        loginBtn.setText("Login");
        loginBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        registrationLink.setText("Are you a new patient? Click here to create a new account");
        registrationLink.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        registrationLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                registrationLinkMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout loginPageLayout = new javax.swing.GroupLayout(loginPage);
        loginPage.setLayout(loginPageLayout);
        loginPageLayout.setHorizontalGroup(
            loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPageLayout.createSequentialGroup()
                .addContainerGap(256, Short.MAX_VALUE)
                .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginPageLayout.createSequentialGroup()
                        .addComponent(passwordLabel)
                        .addGap(61, 61, 61)
                        .addComponent(loginBtn))
                    .addComponent(registrationLink, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(loginPageLayout.createSequentialGroup()
                        .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userTypeLabel)
                            .addComponent(usernameLabel))
                        .addGap(59, 59, 59)
                        .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usernameTxtField)
                            .addComponent(userTypeSelect, 0, 198, Short.MAX_VALUE)
                            .addComponent(passwordTxtField))))
                .addGap(255, 255, 255))
        );
        loginPageLayout.setVerticalGroup(
            loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPageLayout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userTypeLabel)
                    .addComponent(userTypeSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(usernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(loginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(loginBtn)
                .addGap(27, 27, 27)
                .addComponent(registrationLink)
                .addContainerGap(439, Short.MAX_VALUE))
        );

        MainFrame.add(loginPage, "card2");

        patientRegisterBtn.setText("Save");
        patientRegisterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientRegisterBtnActionPerformed(evt);
            }
        });

        patientCityLabel.setText("Select your city");

        buttonGroupGender.add(maleRadio);
        maleRadio.setText("Male");

        patientNameLabel.setText("Name");

        buttonGroupGender.add(femaleRadio);
        femaleRadio.setText("Female");

        patientAgeLabel.setText("Age");

        buttonGroupGender.add(otherRadio);
        otherRadio.setText("Other");

        patientDOBLabel.setText("DOB");

        patientGenderLabel.setText("Gender");

        patientUsernameLabel.setText("Username");

        patientPasswordLabel.setText("Password");

        cancelPatientRegistration.setText("Cancel");
        cancelPatientRegistration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelPatientRegistrationActionPerformed(evt);
            }
        });

        patientCommunityLabel.setText("Select your community");

        patientHouseLabel.setText("Select your house");

        cityComboBoxPatient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cityComboBoxPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxPatientActionPerformed(evt);
            }
        });

        communityComboBoxPatient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        communityComboBoxPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboBoxPatientActionPerformed(evt);
            }
        });

        houseComboBoxPatient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        houseComboBoxPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseComboBoxPatientActionPerformed(evt);
            }
        });

        patientConfirmPasswordLabel.setText("Confirm Password");

        patientEmailLabel.setText("Contact Email");

        patientPhoneLabel.setText("Contact Number");

        patientEmailTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientEmailTxtFieldActionPerformed(evt);
            }
        });

        patientInsuranceLabel.setText("Health Insurance Plan");

        registrationLabel.setText("Patient Registration Form");

        javax.swing.GroupLayout patientRegistrationPageLayout = new javax.swing.GroupLayout(patientRegistrationPage);
        patientRegistrationPage.setLayout(patientRegistrationPageLayout);
        patientRegistrationPageLayout.setHorizontalGroup(
            patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                            .addComponent(patientNameLabel)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                            .addComponent(patientGenderLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(patientNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                                    .addComponent(maleRadio)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(femaleRadio)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(otherRadio))
                                .addComponent(patientAgeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                        .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                                .addComponent(patientDOBLabel)
                                .addGap(31, 31, 31)
                                .addComponent(patientDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(patientAgeLabel))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                        .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(patientHouseLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientCityLabel, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                        .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientUsernameLabel)
                            .addComponent(patientPasswordLabel)
                            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                                .addComponent(patientInsuranceLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(patientInsuranceTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(patientEmailLabel)
                            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                                .addComponent(patientPhoneLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(patientPhoneTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientCommunityLabel)
                                    .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(patientRegisterBtn)
                                        .addComponent(patientConfirmPasswordLabel)))
                                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(patientConfirmsPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(patientSetPasswordTxtField)
                                                .addComponent(houseComboBoxPatient, 0, 240, Short.MAX_VALUE)
                                                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(communityComboBoxPatient, javax.swing.GroupLayout.Alignment.LEADING, 0, 238, Short.MAX_VALUE)
                                                    .addComponent(cityComboBoxPatient, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addComponent(patientSetUsernameTxtField))))
                                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                                        .addGap(46, 46, 46)
                                        .addComponent(cancelPatientRegistration))))
                            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(registrationLabel)
                                    .addComponent(patientEmailTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(333, Short.MAX_VALUE))))
        );
        patientRegistrationPageLayout.setVerticalGroup(
            patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patientNameLabel)
                            .addComponent(patientNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(registrationLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientAgeLabel)
                    .addComponent(patientAgeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientGenderLabel)
                    .addComponent(maleRadio)
                    .addComponent(femaleRadio)
                    .addComponent(otherRadio))
                .addGap(9, 9, 9)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(patientDOBLabel)
                    .addComponent(patientDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientPhoneLabel)
                    .addComponent(patientPhoneTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientEmailLabel)
                    .addComponent(patientEmailTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientInsuranceLabel)
                    .addComponent(patientInsuranceTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientCityLabel)
                    .addComponent(cityComboBoxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientCommunityLabel)
                    .addComponent(communityComboBoxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientHouseLabel)
                    .addComponent(houseComboBoxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(patientUsernameLabel)
                    .addComponent(patientSetUsernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                        .addComponent(patientPasswordLabel)
                        .addGap(11, 11, 11)
                        .addComponent(patientConfirmPasswordLabel)
                        .addGap(64, 64, 64))
                    .addGroup(patientRegistrationPageLayout.createSequentialGroup()
                        .addComponent(patientSetPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(patientConfirmsPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)))
                .addGroup(patientRegistrationPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientRegisterBtn)
                    .addComponent(cancelPatientRegistration))
                .addContainerGap(217, Short.MAX_VALUE))
        );

        MainFrame.add(patientRegistrationPage, "card3");

        updatePatientProfileBtn.setText("Update Profile");
        updatePatientProfileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePatientProfileBtnActionPerformed(evt);
            }
        });

        searchDoctorPatientBtn.setText("Search Doctors");
        searchDoctorPatientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDoctorPatientBtnActionPerformed(evt);
            }
        });

        deletePatientProfileBtn.setText("Delete Profile");
        deletePatientProfileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePatientProfileBtnActionPerformed(evt);
            }
        });

        patientLogOutBtn.setText("Log Out");
        patientLogOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientLogOutBtnActionPerformed(evt);
            }
        });

        patientHomeBtn.setText("Home");
        patientHomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientHomeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout patientControlPanelLayout = new javax.swing.GroupLayout(patientControlPanel);
        patientControlPanel.setLayout(patientControlPanelLayout);
        patientControlPanelLayout.setHorizontalGroup(
            patientControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(patientControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updatePatientProfileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(patientControlPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(searchDoctorPatientBtn))
                    .addComponent(patientHomeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deletePatientProfileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(patientLogOutBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        patientControlPanelLayout.setVerticalGroup(
            patientControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientControlPanelLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(patientHomeBtn)
                .addGap(29, 29, 29)
                .addComponent(searchDoctorPatientBtn)
                .addGap(31, 31, 31)
                .addComponent(updatePatientProfileBtn)
                .addGap(30, 30, 30)
                .addComponent(deletePatientProfileBtn)
                .addGap(28, 28, 28)
                .addComponent(patientLogOutBtn)
                .addContainerGap(228, Short.MAX_VALUE))
        );

        patientHomeSplitPane.setLeftComponent(patientControlPanel);

        patientViewPanel.setLayout(new java.awt.CardLayout());

        welcomePatient.setText("Welcome");

        jLabel2.setText("Your Appointment Request List");

        appointmentListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Encounter Id", "Appointment Details", "Appointement Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        appointmentListTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        appointmentListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appointmentListTableMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(appointmentListTable);

        jLabel16.setText("Encounter Id");

        jLabel18.setText("Blood Pressure");

        jLabel19.setText("Diagnosis");

        jLabel20.setText("Encounter Time");

        jLabel21.setText("Respiration Rate");

        jLabel22.setText("Body Temperature");

        jLabel28.setText("Pulse Rate");

        jLabel29.setText("Appointment Details");

        jLabel31.setText("Symptoms");

        jLabel32.setText("Encounter Date");

        appointmentDeleteBtn.setText("Delete Pending Appointment Request");
        appointmentDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentDeleteBtnActionPerformed(evt);
            }
        });

        viewAppointmentDetailsBtn.setText("View Past Appointment Details");
        viewAppointmentDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAppointmentDetailsBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout patientHomePanelLayout = new javax.swing.GroupLayout(patientHomePanel);
        patientHomePanel.setLayout(patientHomePanelLayout);
        patientHomePanelLayout.setHorizontalGroup(
            patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientHomePanelLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(welcomePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(patientHomePanelLayout.createSequentialGroup()
                        .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel18)
                            .addComponent(jLabel28)
                            .addComponent(jLabel32)
                            .addComponent(jLabel31))
                        .addGap(28, 28, 28)
                        .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientEncounterDate, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(patientViewPulseRate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(patientViewEncounterId, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientViewBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientViewSymptoms, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel29)
                            .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(patientViewDiagnosis, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(patientViewAppointmentDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(patientViewBodyTemperature, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(patientViewRespirationRate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(patientViewEncounterTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, patientHomePanelLayout.createSequentialGroup()
                            .addComponent(viewAppointmentDetailsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(appointmentDeleteBtn))
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(207, Short.MAX_VALUE))
        );

        patientHomePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {patientEncounterDate, patientViewBloodPressure, patientViewEncounterId, patientViewPulseRate, patientViewSymptoms});

        patientHomePanelLayout.setVerticalGroup(
            patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientHomePanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(welcomePatient)
                .addGap(37, 37, 37)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewAppointmentDetailsBtn)
                    .addComponent(appointmentDeleteBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel29)
                    .addComponent(patientViewEncounterId)
                    .addComponent(patientViewAppointmentDetails))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel22)
                    .addComponent(patientViewBloodPressure)
                    .addComponent(patientViewBodyTemperature))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(jLabel21)
                    .addComponent(patientViewPulseRate)
                    .addComponent(patientViewRespirationRate))
                .addGap(18, 18, 18)
                .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(jLabel20)
                    .addComponent(patientEncounterDate)
                    .addComponent(patientViewEncounterTime))
                .addGap(18, 18, 18)
                .addGroup(patientHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(jLabel19)
                    .addComponent(patientViewSymptoms)
                    .addComponent(patientViewDiagnosis))
                .addContainerGap(83, Short.MAX_VALUE))
        );

        patientViewPanel.add(patientHomePanel, "card5");

        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Sn No.", "Doctor", "Speciality", "Degree", "Availability", "Contact"
            }
        ));
        patientTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane6.setViewportView(patientTable);

        bookAppointmentBtn.setText("Request Apppointment");
        bookAppointmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookAppointmentBtnActionPerformed(evt);
            }
        });

        hospitalComboBoxPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalComboBoxPatientActionPerformed(evt);
            }
        });

        jLabel1.setText("List of nearby hospitals from your location");

        patientAddressDoctorSearchLabel.setText("You address :");

        jLabel30.setText("Please select a doctor from the selected hospital to request an appointment");

        javax.swing.GroupLayout searchDoctorPanelLayout = new javax.swing.GroupLayout(searchDoctorPanel);
        searchDoctorPanel.setLayout(searchDoctorPanelLayout);
        searchDoctorPanelLayout.setHorizontalGroup(
            searchDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchDoctorPanelLayout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(searchDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientAddressDoctorSearchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(searchDoctorPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(28, 28, 28)
                        .addComponent(hospitalComboBoxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(80, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchDoctorPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bookAppointmentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(297, 297, 297))
        );
        searchDoctorPanelLayout.setVerticalGroup(
            searchDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchDoctorPanelLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(patientAddressDoctorSearchLabel)
                .addGap(29, 29, 29)
                .addGroup(searchDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hospitalComboBoxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel30)
                .addGap(39, 39, 39)
                .addComponent(bookAppointmentBtn)
                .addContainerGap(164, Short.MAX_VALUE))
        );

        patientViewPanel.add(searchDoctorPanel, "card3");

        javax.swing.GroupLayout updatePatientProfilePanelLayout = new javax.swing.GroupLayout(updatePatientProfilePanel);
        updatePatientProfilePanel.setLayout(updatePatientProfilePanelLayout);
        updatePatientProfilePanelLayout.setHorizontalGroup(
            updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 808, Short.MAX_VALUE)
        );
        updatePatientProfilePanelLayout.setVerticalGroup(
            updatePatientProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 530, Short.MAX_VALUE)
        );

        patientViewPanel.add(updatePatientProfilePanel, "card4");

        patientHomeSplitPane.setRightComponent(patientViewPanel);

        javax.swing.GroupLayout patientHomeLayout = new javax.swing.GroupLayout(patientHome);
        patientHome.setLayout(patientHomeLayout);
        patientHomeLayout.setHorizontalGroup(
            patientHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(patientHomeSplitPane)
        );
        patientHomeLayout.setVerticalGroup(
            patientHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(patientHomeSplitPane)
        );

        MainFrame.add(patientHome, "card5");

        manageCityBtn.setText("Manage Cities");
        manageCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageCityBtnActionPerformed(evt);
            }
        });

        manageHouseBtn.setText("Manage Houses");
        manageHouseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageHouseBtnActionPerformed(evt);
            }
        });

        manageCommunityBtn.setText("Manage Communities");
        manageCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageCommunityBtnActionPerformed(evt);
            }
        });

        manageDoctorBtn.setText("Manage Doctors");
        manageDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageDoctorBtnActionPerformed(evt);
            }
        });

        manageHospitalBtn.setText("Manage Hospitals");
        manageHospitalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageHospitalBtnActionPerformed(evt);
            }
        });

        managePatientBtn.setText("Manage Patients");

        adminLogOut.setText("Log Out");
        adminLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminLogOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlAdminLayout = new javax.swing.GroupLayout(controlAdmin);
        controlAdmin.setLayout(controlAdminLayout);
        controlAdminLayout.setHorizontalGroup(
            controlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlAdminLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(manageCommunityBtn)
                .addContainerGap())
            .addGroup(controlAdminLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(controlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(managePatientBtn)
                    .addComponent(manageDoctorBtn)
                    .addGroup(controlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(manageHospitalBtn)
                        .addGroup(controlAdminLayout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(manageHouseBtn)))
                    .addGroup(controlAdminLayout.createSequentialGroup()
                        .addComponent(adminLogOut)
                        .addGap(27, 27, 27)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(controlAdminLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(manageCityBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(23, 23, 23))
        );
        controlAdminLayout.setVerticalGroup(
            controlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlAdminLayout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(manageCityBtn)
                .addGap(18, 18, 18)
                .addComponent(manageCommunityBtn)
                .addGap(12, 12, 12)
                .addComponent(manageHouseBtn)
                .addGap(18, 18, 18)
                .addComponent(manageHospitalBtn)
                .addGap(18, 18, 18)
                .addComponent(manageDoctorBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(managePatientBtn)
                .addGap(35, 35, 35)
                .addComponent(adminLogOut)
                .addContainerGap(433, Short.MAX_VALUE))
        );

        adminSplit.setLeftComponent(controlAdmin);

        viewAdmin.setLayout(new java.awt.CardLayout());

        welcomeAdmin.setText("Welcome Admin");

        javax.swing.GroupLayout systemAdminHomePageLayout = new javax.swing.GroupLayout(systemAdminHomePage);
        systemAdminHomePage.setLayout(systemAdminHomePageLayout);
        systemAdminHomePageLayout.setHorizontalGroup(
            systemAdminHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 658, Short.MAX_VALUE)
            .addGroup(systemAdminHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(systemAdminHomePageLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(welcomeAdmin)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        systemAdminHomePageLayout.setVerticalGroup(
            systemAdminHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
            .addGroup(systemAdminHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(systemAdminHomePageLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(welcomeAdmin)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        viewAdmin.add(systemAdminHomePage, "card3");

        adminSplit.setRightComponent(viewAdmin);

        javax.swing.GroupLayout systemAdminHomeLayout = new javax.swing.GroupLayout(systemAdminHome);
        systemAdminHome.setLayout(systemAdminHomeLayout);
        systemAdminHomeLayout.setHorizontalGroup(
            systemAdminHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminSplit)
        );
        systemAdminHomeLayout.setVerticalGroup(
            systemAdminHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminSplit, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        MainFrame.add(systemAdminHome, "card4");

        addCityLabel.setText("Add a new City");

        addNewCityBtn.setText("Add");
        addNewCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewCityBtnActionPerformed(evt);
            }
        });

        cititsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sn No.", "Cities"
            }
        ));
        jScrollPane1.setViewportView(cititsTable);

        updateCityNameBtn.setText("Update City Name");
        updateCityNameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCityNameBtnActionPerformed(evt);
            }
        });

        deleteCityBtn.setText("Delete City");
        deleteCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCityBtnActionPerformed(evt);
            }
        });

        updateCityNameLabel.setText("Update City Name");

        updateCityBtn.setText("Update");
        updateCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCityBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageCitiesPanelLayout = new javax.swing.GroupLayout(manageCitiesPanel);
        manageCitiesPanel.setLayout(manageCitiesPanelLayout);
        manageCitiesPanelLayout.setHorizontalGroup(
            manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                        .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(updateCityNameLabel)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(deleteCityBtn))
                            .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateCityNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(updateCityBtn))
                            .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(updateCityNameBtn))))
                    .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                        .addComponent(addCityLabel)
                        .addGap(18, 18, 18)
                        .addComponent(addNewCityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addNewCityBtn)))
                .addContainerGap(216, Short.MAX_VALUE))
        );
        manageCitiesPanelLayout.setVerticalGroup(
            manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNewCityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addNewCityBtn)
                    .addComponent(addCityLabel))
                .addGap(18, 18, 18)
                .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(manageCitiesPanelLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(updateCityNameBtn)
                        .addGap(18, 18, 18)
                        .addComponent(deleteCityBtn)))
                .addGap(14, 14, 14)
                .addGroup(manageCitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateCityNameLabel)
                    .addComponent(updateCityNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateCityBtn))
                .addContainerGap(501, Short.MAX_VALUE))
        );

        MainFrame.add(manageCitiesPanel, "card6");

        addCommunityLabel.setText("Community Name");

        addCommunityAdminUsernameLabel.setText("Community Admin Username");

        addCommunityAdminPasswordLabel.setText("Community Admin Password");

        citiesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        citiesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                citiesComboBoxActionPerformed(evt);
            }
        });

        addCommunityBtn.setText("Add a new Community");
        addCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCommunityBtnActionPerformed(evt);
            }
        });

        communityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sn No.", "Community"
            }
        ));
        communityTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                communityTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(communityTable);

        updateCommunityBtn.setText("Update");
        updateCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCommunityBtnActionPerformed(evt);
            }
        });

        deleteCommunityBtn.setText("Delete");
        deleteCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCommunityBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageCommunitiesPanelLayout = new javax.swing.GroupLayout(manageCommunitiesPanel);
        manageCommunitiesPanel.setLayout(manageCommunitiesPanelLayout);
        manageCommunitiesPanelLayout.setHorizontalGroup(
            manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                        .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                                .addComponent(addCommunityAdminPasswordLabel)
                                .addGap(18, 18, 18)
                                .addComponent(communityAdminPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(addCommunityBtn))
                            .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                                .addComponent(addCommunityAdminUsernameLabel)
                                .addGap(18, 18, 18)
                                .addComponent(addCommunityAdminUsernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(citiesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                        .addComponent(addCommunityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                        .addComponent(addCommunityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(311, 311, 311))
                    .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                        .addComponent(updateCommunityBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteCommunityBtn)
                        .addGap(207, 207, 207))))
        );
        manageCommunitiesPanelLayout.setVerticalGroup(
            manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageCommunitiesPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(manageCommunitiesPanelLayout.createSequentialGroup()
                        .addComponent(citiesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addCommunityLabel)
                            .addComponent(addCommunityTxtField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(addCommunityAdminUsernameLabel))
                    .addComponent(addCommunityAdminUsernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCommunityAdminPasswordLabel)
                    .addComponent(communityAdminPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCommunityBtn))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(manageCommunitiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateCommunityBtn)
                    .addComponent(deleteCommunityBtn))
                .addContainerGap(430, Short.MAX_VALUE))
        );

        MainFrame.add(manageCommunitiesPanel, "card7");

        cityComboBoxHospital.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cityComboBoxHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxHospitalActionPerformed(evt);
            }
        });

        communityComboBoxHospital.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        communityComboBoxHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboBoxHospitalActionPerformed(evt);
            }
        });

        hospitalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sn No.", "Hospital"
            }
        ));
        hospitalTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hospitalTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(hospitalTable);

        addHospitalLabel.setText("Hospital Name");

        addHospitalBtn.setText("Add a hospital");
        addHospitalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHospitalBtnActionPerformed(evt);
            }
        });

        updateHospitalBtn.setText("Update");
        updateHospitalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateHospitalBtnActionPerformed(evt);
            }
        });

        hospitalDeleteBtn.setText("Delete");
        hospitalDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalDeleteBtnActionPerformed(evt);
            }
        });

        addHospitalAdminUsernameLabel.setText("Hospital Admin Username");

        addHospitalAdminPasswordLabel.setText("Hospital Admin Password");

        javax.swing.GroupLayout manageHospitalsPanelLayout = new javax.swing.GroupLayout(manageHospitalsPanel);
        manageHospitalsPanel.setLayout(manageHospitalsPanelLayout);
        manageHospitalsPanelLayout.setHorizontalGroup(
            manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(communityComboBoxHospital, javax.swing.GroupLayout.Alignment.LEADING, 0, 350, Short.MAX_VALUE)
                            .addComponent(cityComboBoxHospital, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                                .addComponent(addHospitalAdminPasswordLabel)
                                .addGap(18, 18, 18)
                                .addComponent(addHospitalAdminPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                                .addComponent(addHospitalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addHospitalTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(addHospitalBtn))
                            .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(addHospitalAdminUsernameLabel)
                                    .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                                        .addComponent(updateHospitalBtn)
                                        .addGap(65, 65, 65)))
                                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                                        .addGap(116, 116, 116)
                                        .addComponent(hospitalDeleteBtn))
                                    .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(addHospitalAdminUsernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(259, Short.MAX_VALUE))
        );
        manageHospitalsPanelLayout.setVerticalGroup(
            manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageHospitalsPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(cityComboBoxHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(communityComboBoxHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHospitalLabel)
                    .addComponent(addHospitalTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addHospitalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHospitalAdminUsernameLabel)
                    .addComponent(addHospitalAdminUsernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHospitalAdminPasswordLabel)
                    .addComponent(addHospitalAdminPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(manageHospitalsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateHospitalBtn)
                    .addComponent(hospitalDeleteBtn))
                .addContainerGap(336, Short.MAX_VALUE))
        );

        MainFrame.add(manageHospitalsPanel, "card8");

        addHouseLabel.setText("House Name");

        addHouseBtn.setText("Add a house");
        addHouseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHouseBtnActionPerformed(evt);
            }
        });

        cityComboBoxHouse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cityComboBoxHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxHouseActionPerformed(evt);
            }
        });

        communityComboBoxHouse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        communityComboBoxHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboBoxHouseActionPerformed(evt);
            }
        });

        houseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sn No.", "House"
            }
        ));
        houseTable.setColumnSelectionAllowed(false);
        houseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                houseTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(houseTable);

        houseUpdateBtn.setText("Update");
        houseUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseUpdateBtnActionPerformed(evt);
            }
        });

        houseDeleteBtn.setText("Delete");
        houseDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseDeleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageHousesPanelLayout = new javax.swing.GroupLayout(manageHousesPanel);
        manageHousesPanel.setLayout(manageHousesPanelLayout);
        manageHousesPanelLayout.setHorizontalGroup(
            manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageHousesPanelLayout.createSequentialGroup()
                .addGroup(manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageHousesPanelLayout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addGroup(manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(communityComboBoxHouse, javax.swing.GroupLayout.Alignment.LEADING, 0, 350, Short.MAX_VALUE)
                            .addComponent(cityComboBoxHouse, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(manageHousesPanelLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageHousesPanelLayout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addGroup(manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageHousesPanelLayout.createSequentialGroup()
                                .addComponent(houseUpdateBtn)
                                .addGap(176, 176, 176)
                                .addComponent(houseDeleteBtn))
                            .addGroup(manageHousesPanelLayout.createSequentialGroup()
                                .addComponent(addHouseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addHouseTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(addHouseBtn)))))
                .addContainerGap(259, Short.MAX_VALUE))
        );
        manageHousesPanelLayout.setVerticalGroup(
            manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageHousesPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(cityComboBoxHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(communityComboBoxHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHouseLabel)
                    .addComponent(addHouseTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addHouseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(manageHousesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(houseUpdateBtn)
                    .addComponent(houseDeleteBtn))
                .addContainerGap(387, Short.MAX_VALUE))
        );

        MainFrame.add(manageHousesPanel, "card9");

        cityComboBoxDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cityComboBoxDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxDoctorActionPerformed(evt);
            }
        });

        communityComboBoxDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        communityComboBoxDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityComboBoxDoctorActionPerformed(evt);
            }
        });

        doctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sn No.", "Doctor Name"
            }
        ));
        doctorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctorTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(doctorTable);
        doctorTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        hospitalComboBoxDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        hospitalComboBoxDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalComboBoxDoctorActionPerformed(evt);
            }
        });

        addDoctorBtn.setText("Add");
        addDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDoctorBtnActionPerformed(evt);
            }
        });

        updateDoctorBtn.setText("Update");
        updateDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDoctorBtnActionPerformed(evt);
            }
        });

        deleteDoctorBtn.setText("Delete");
        deleteDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDoctorBtnActionPerformed(evt);
            }
        });

        patientNameLabel1.setText("Name");

        patientAgeLabel1.setText("Age");

        patientGenderLabel1.setText("Gender");

        buttonGroup1.add(maleRadio1);
        maleRadio1.setText("Male");

        buttonGroup1.add(femaleRadio1);
        femaleRadio1.setText("Female");

        buttonGroup1.add(otherRadio1);
        otherRadio1.setText("Other");

        patientDOBLabel1.setText("DOB");

        patientPhoneLabel1.setText("Degree");

        patientEmailLabel1.setText("Contact Email");

        doctorEmailTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorEmailTxtFieldActionPerformed(evt);
            }
        });

        patientUsernameLabel1.setText("Username");

        patientPasswordLabel1.setText("Password");

        patientConfirmPasswordLabel1.setText("Confirm Password");

        patientPhoneLabel2.setText("Contact Number");

        doctorSpeciality.setText("Speciality");

        doctorSpeciality1.setText("Availability");

        javax.swing.GroupLayout manageDoctorsPanelLayout = new javax.swing.GroupLayout(manageDoctorsPanel);
        manageDoctorsPanel.setLayout(manageDoctorsPanelLayout);
        manageDoctorsPanelLayout.setHorizontalGroup(
            manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(hospitalComboBoxDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(communityComboBoxDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cityComboBoxDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(addDoctorBtn)
                                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(patientPhoneLabel1)
                                            .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                                    .addComponent(patientPhoneLabel2)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(doctorPhoneTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(patientPasswordLabel1)
                                                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                                        .addComponent(patientEmailLabel1)
                                                        .addGap(33, 33, 33)
                                                        .addComponent(doctorEmailTxtField))
                                                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                                        .addComponent(patientConfirmPasswordLabel1)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(doctorConfirmsPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                        .addGap(70, 70, 70)))
                                .addGap(18, 18, 18)
                                .addComponent(updateDoctorBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteDoctorBtn))
                            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                .addComponent(patientUsernameLabel1)
                                .addGap(52, 52, 52)
                                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(doctorSetPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doctorSetUsernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(doctorDegreeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageDoctorsPanelLayout.createSequentialGroup()
                                    .addComponent(doctorSpeciality)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(doctorSpecialityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, manageDoctorsPanelLayout.createSequentialGroup()
                                        .addComponent(patientDOBLabel1)
                                        .addGap(225, 225, 225))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(patientAgeLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                                .addComponent(patientNameLabel1)
                                                .addGap(273, 273, 273)))
                                        .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                            .addComponent(patientGenderLabel1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(doctorNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                                    .addComponent(maleRadio1)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(femaleRadio1)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(otherRadio1))
                                                .addComponent(doctorAgeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(doctorDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                        .addGap(18, 18, 18)
                        .addComponent(doctorSpeciality1)
                        .addGap(18, 18, 18)
                        .addComponent(doctorAvailabilityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        manageDoctorsPanelLayout.setVerticalGroup(
            manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addComponent(cityComboBoxDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(communityComboBoxDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hospitalComboBoxDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientNameLabel1)
                    .addComponent(doctorNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientAgeLabel1)
                    .addComponent(doctorAgeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientGenderLabel1)
                    .addComponent(maleRadio1)
                    .addComponent(femaleRadio1)
                    .addComponent(otherRadio1))
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientDOBLabel1)
                            .addComponent(doctorDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(doctorSpeciality1)
                            .addComponent(doctorAvailabilityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(14, 14, 14)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(doctorSpeciality)
                    .addComponent(doctorSpecialityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientPhoneLabel1)
                    .addComponent(doctorDegreeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctorPhoneTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientPhoneLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientEmailLabel1)
                    .addComponent(doctorEmailTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(patientUsernameLabel1)
                    .addComponent(doctorSetUsernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(patientPasswordLabel1))
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(doctorSetPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientConfirmPasswordLabel1)
                    .addComponent(doctorConfirmsPasswordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteDoctorBtn)
                    .addComponent(addDoctorBtn)
                    .addComponent(updateDoctorBtn))
                .addGap(251, 251, 251))
        );

        MainFrame.add(manageDoctorsPanel, "card10");

        javax.swing.GroupLayout manageEncounterHistoryLayout = new javax.swing.GroupLayout(manageEncounterHistory);
        manageEncounterHistory.setLayout(manageEncounterHistoryLayout);
        manageEncounterHistoryLayout.setHorizontalGroup(
            manageEncounterHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 821, Short.MAX_VALUE)
        );
        manageEncounterHistoryLayout.setVerticalGroup(
            manageEncounterHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
        );

        MainFrame.add(manageEncounterHistory, "card11");

        javax.swing.GroupLayout managePatientsPanelLayout = new javax.swing.GroupLayout(managePatientsPanel);
        managePatientsPanel.setLayout(managePatientsPanelLayout);
        managePatientsPanelLayout.setHorizontalGroup(
            managePatientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 821, Short.MAX_VALUE)
        );
        managePatientsPanelLayout.setVerticalGroup(
            managePatientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
        );

        MainFrame.add(managePatientsPanel, "card12");

        manageCommunityBttn.setText("Manage Community");

        manageHospitalBtnn.setText("Manage Hospital");

        manageHospitalBttn.setText("Manage Houses");

        logoutCommunityAdmin.setText("Logout");
        logoutCommunityAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutCommunityAdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlCommunityPanelLayout = new javax.swing.GroupLayout(controlCommunityPanel);
        controlCommunityPanel.setLayout(controlCommunityPanelLayout);
        controlCommunityPanelLayout.setHorizontalGroup(
            controlCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlCommunityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlCommunityPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(manageCommunityBttn))
                    .addGroup(controlCommunityPanelLayout.createSequentialGroup()
                        .addGroup(controlCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(manageHospitalBtnn)
                            .addComponent(manageHospitalBttn)
                            .addGroup(controlCommunityPanelLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(logoutCommunityAdmin)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        controlCommunityPanelLayout.setVerticalGroup(
            controlCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlCommunityPanelLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(manageCommunityBttn)
                .addGap(39, 39, 39)
                .addComponent(manageHospitalBtnn)
                .addGap(32, 32, 32)
                .addComponent(manageHospitalBttn)
                .addGap(29, 29, 29)
                .addComponent(logoutCommunityAdmin)
                .addContainerGap(499, Short.MAX_VALUE))
        );

        communityAdminSplit.setLeftComponent(controlCommunityPanel);

        welcomecommunityAdmin.setText("Welcome");

        javax.swing.GroupLayout viewCommunityAdminPanelLayout = new javax.swing.GroupLayout(viewCommunityAdminPanel);
        viewCommunityAdminPanel.setLayout(viewCommunityAdminPanelLayout);
        viewCommunityAdminPanelLayout.setHorizontalGroup(
            viewCommunityAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewCommunityAdminPanelLayout.createSequentialGroup()
                .addGap(213, 213, 213)
                .addComponent(welcomecommunityAdmin)
                .addContainerGap(404, Short.MAX_VALUE))
        );
        viewCommunityAdminPanelLayout.setVerticalGroup(
            viewCommunityAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewCommunityAdminPanelLayout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(welcomecommunityAdmin)
                .addContainerGap(631, Short.MAX_VALUE))
        );

        communityAdminSplit.setRightComponent(viewCommunityAdminPanel);

        javax.swing.GroupLayout communityAdminHouseLayout = new javax.swing.GroupLayout(communityAdminHouse);
        communityAdminHouse.setLayout(communityAdminHouseLayout);
        communityAdminHouseLayout.setHorizontalGroup(
            communityAdminHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(communityAdminSplit)
        );
        communityAdminHouseLayout.setVerticalGroup(
            communityAdminHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(communityAdminSplit, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        MainFrame.add(communityAdminHouse, "card13");

        addEncounterDetailsBtn.setText("Manage Appointments");
        addEncounterDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEncounterDetailsBtnActionPerformed(evt);
            }
        });

        manageProfileBtn.setText("Manage Profile");

        doctorLogOutBtn.setText("Log Out");
        doctorLogOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorLogOutBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout doctorControlPanelLayout = new javax.swing.GroupLayout(doctorControlPanel);
        doctorControlPanel.setLayout(doctorControlPanelLayout);
        doctorControlPanelLayout.setHorizontalGroup(
            doctorControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(doctorControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(doctorControlPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addEncounterDetailsBtn))
                    .addGroup(doctorControlPanelLayout.createSequentialGroup()
                        .addGroup(doctorControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(doctorLogOutBtn)
                            .addComponent(manageProfileBtn))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        doctorControlPanelLayout.setVerticalGroup(
            doctorControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorControlPanelLayout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addComponent(addEncounterDetailsBtn)
                .addGap(36, 36, 36)
                .addComponent(manageProfileBtn)
                .addGap(38, 38, 38)
                .addComponent(doctorLogOutBtn)
                .addContainerGap(538, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(doctorControlPanel);

        doctorViewPanel.setLayout(new java.awt.CardLayout());

        welcomeDoctor.setText("welcome doctor");

        javax.swing.GroupLayout doctorHomePanelLayout = new javax.swing.GroupLayout(doctorHomePanel);
        doctorHomePanel.setLayout(doctorHomePanelLayout);
        doctorHomePanelLayout.setHorizontalGroup(
            doctorHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doctorHomePanelLayout.createSequentialGroup()
                .addContainerGap(269, Short.MAX_VALUE)
                .addComponent(welcomeDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
        );
        doctorHomePanelLayout.setVerticalGroup(
            doctorHomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorHomePanelLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(welcomeDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(679, Short.MAX_VALUE))
        );

        doctorViewPanel.add(doctorHomePanel, "card2");

        jLabel3.setText("List of patients that have requested an appointment with you");

        encounterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Sn No.", "Patient Id", "Patient Name", "Encounter Id", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        encounterTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encounterTableMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(encounterTable);

        jLabel4.setText("Patient Details");

        jLabel5.setText("Name");

        jLabel11.setText("Insurance");

        jLabel7.setText("Age");

        jLabel13.setText("Phone");

        jLabel9.setText("Gender");

        jLabel14.setText("Email");

        jLabel17.setText("Enter Encounter Details");

        jLabel6.setText("Patient's Vital Signs");

        jLabel8.setText("Body Temperature");

        jLabel10.setText("Blood Pressure");

        jLabel12.setText("Pulse Rate");

        jLabel15.setText("Respiration Rate");

        jLabel23.setText("Encounter Date");

        jLabel24.setText("Diagnosis");

        jLabel25.setText("Symptoms");

        patientEncounterSaveBtn.setText("Save");
        patientEncounterSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientEncounterSaveBtnActionPerformed(evt);
            }
        });

        jLabel26.setText("Encounter Time");

        hrComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", " ", " " }));

        minComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60" }));

        timeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AM", "PM" }));

        jLabel27.setText("  :");

        javax.swing.GroupLayout doctorManageAppointmentsPanelLayout = new javax.swing.GroupLayout(doctorManageAppointmentsPanel);
        doctorManageAppointmentsPanel.setLayout(doctorManageAppointmentsPanelLayout);
        doctorManageAppointmentsPanelLayout.setHorizontalGroup(
            doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                        .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(patientDetailsGenderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientDetailsAgeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(patientDetailsNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addGap(18, 18, 18)
                                .addComponent(patientSymptomsTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(patientBloodPressureTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(jLabel24)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(patientDiagnosisTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(patientDetailsEmailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(patientDetailsPhoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(18, 18, 18)
                                        .addComponent(patientDetailsInsuranceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addComponent(jLabel15)
                                .addGap(18, 18, 18)
                                .addComponent(patientRespRateTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(92, Short.MAX_VALUE))
                    .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                        .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(jLabel6)
                            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(170, 170, 170)
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addComponent(patientPulseTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(encounterDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(hrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(minComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel4))
                    .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel3))
                    .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doctorManageAppointmentsPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(patientEncounterSaveBtn)
                .addGap(124, 124, 124))
            .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                    .addGap(179, 179, 179)
                    .addComponent(patientBodyTempTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(363, Short.MAX_VALUE)))
        );
        doctorManageAppointmentsPanelLayout.setVerticalGroup(
            doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel11)
                    .addComponent(patientDetailsNameLabel)
                    .addComponent(patientDetailsInsuranceLabel))
                .addGap(18, 18, 18)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel13)
                    .addComponent(patientDetailsAgeLabel)
                    .addComponent(patientDetailsPhoneLabel))
                .addGap(18, 18, 18)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel14)
                    .addComponent(patientDetailsGenderLabel)
                    .addComponent(patientDetailsEmailLabel))
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel12)
                    .addComponent(patientPulseTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientRespRateTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(doctorManageAppointmentsPanelLayout.createSequentialGroup()
                                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(patientBloodPressureTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel23)
                                    .addComponent(encounterDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(hrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(minComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jLabel24)
                    .addComponent(patientSymptomsTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientDiagnosisTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(patientEncounterSaveBtn)
                .addContainerGap(115, Short.MAX_VALUE))
            .addGroup(doctorManageAppointmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doctorManageAppointmentsPanelLayout.createSequentialGroup()
                    .addContainerGap(460, Short.MAX_VALUE)
                    .addComponent(patientBodyTempTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(291, 291, 291)))
        );

        doctorViewPanel.add(doctorManageAppointmentsPanel, "card3");

        jSplitPane1.setRightComponent(doctorViewPanel);

        javax.swing.GroupLayout doctorHomeLayout = new javax.swing.GroupLayout(doctorHome);
        doctorHome.setLayout(doctorHomeLayout);
        doctorHomeLayout.setHorizontalGroup(
            doctorHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 821, Short.MAX_VALUE)
        );
        doctorHomeLayout.setVerticalGroup(
            doctorHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        MainFrame.add(doctorHome, "card14");

        getContentPane().add(MainFrame, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userTypeSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTypeSelectActionPerformed
        // TODO add your handling code here:
        userType = userTypeSelect.getSelectedItem().toString();
    }//GEN-LAST:event_userTypeSelectActionPerformed
     
    
    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        // TODO add your handling code here:
        int loginFlag=0;
        if("Select".equals(userType)){
          JOptionPane.showMessageDialog(this,"Please select your user type to log in.");
          
        }
        else if(usernameTxtField.getText().length()==0 ||passwordTxtField.getText().length()==0){
          JOptionPane.showMessageDialog(this,"Username and Password are required fields");
         
        }
        else if ("System Admin".equals(userType) && usernameTxtField.getText().equals("admin")&& passwordTxtField.getText().equals("admin")){
              changePanel(systemAdminHome);
               loginFlag=1;
            }
            
            else if ("Patient".equals(userType)){
                for(Patient pt : patientList.getPatientList()){
                            
                    Person p = pt.getPerson();
                    if (usernameTxtField.getText().equals(p.getUsername())&& passwordTxtField.getText().equals(p.getPassword()) ){
                         changePanel(patientHome); 
                         loggedInPatient=pt;
                         welcomePatient.setText("Welcome " + p.getPersonName());
                          loginFlag=1;
                          clearappointmentListTableFields();
                          populateTable6();
                         break;
        
                }
                    
            
                }
            
            }
             else if ("Doctor".equals(userType)){
                for(Doctor d : doctorList.getDoctorList()){       
                    Person p = d.getPerson();
                    if (usernameTxtField.getText().equals(p.getUsername())&& passwordTxtField.getText().equals(p.getPassword()) ){
                         changePanel(doctorHome); 
                         loggedInDoctor=d;
                         welcomeDoctor.setText("Welcome " + p.getPersonName());
                         loginFlag=1;
                         break;
        
                }
                    
            
                }
            
            }
        else if ("Community Admin".equals(userType)){
                for (City city :cityList.getCitytList()){
                    for (Community cm : city.getCommunityList()){
                    if (usernameTxtField.getText().equals(cm.getAdmin().getPerson().getUsername())&& passwordTxtField.getText().equals(cm.getAdmin().getPerson().getPassword()) ){
                        loggedInAdmin=cm.getAdmin();
                        loginFlag=1;
                        changePanel(doctorHome); 
                         
        
                }
            
                }
            
            }
        }
        else if ("Hospital Admin".equals(userType)){
                for (City city :cityList.getCitytList()){
                    for (Community cm : city.getCommunityList()){
                        for(Hospital h : cm.getHospitalList().getHospitalList()){
                    if (usernameTxtField.getText().equals(h.getHospitalAdmin().getPerson().getUsername())&& passwordTxtField.getText().equals(h.getHospitalAdmin().getPerson().getPassword()) ){
                        loggedInAdmin=h.getHospitalAdmin();
                        loginFlag=1;
                        changePanel(doctorHome); 
                         
                    }
                }
            
                }
            
            }

        }
        else if (loginFlag==0){
           JOptionPane.showMessageDialog(this,"Incorrect Credentials"); 
        }
        else {
            JOptionPane.showMessageDialog(this,"Your account does not exist");
        }    
        usernameTxtField.setText("");
        passwordTxtField.setText("");
        userTypeSelect.setSelectedIndex(0);
        
 
    }//GEN-LAST:event_loginBtnActionPerformed
    private void populateTable6(){
       DefaultTableModel model = (DefaultTableModel) appointmentListTable.getModel();
         model.setRowCount(0);
        
          EncounterHistory encounterHistory = loggedInPatient.getEncounterHistory();
          for(Encounter e:encounterHistory.getEncounterList()){
          Object [] row = new Object[3];
                                row[0] = e;
                                row[1] = e.getAppointmentDetails();
                                row[2] = e.getStatus();
                                model.addRow(row);
                               
          }

         
    }
    private void changePanel(javax.swing.JPanel j){
        MainFrame.removeAll();
        MainFrame.add(j);
        MainFrame.repaint();
        MainFrame.revalidate(); 
    }
    private void registrationLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registrationLinkMouseClicked
        // TODO add your handling code here:
        changePanel(patientRegistrationPage);
        cityComboBoxPatient.removeAllItems();
        cityComboBoxPatient.addItem("Select");
        cityComboBoxPatient.setSelectedItem("Select"); 
        for (City c : cityList.getCitytList()){
             cityComboBoxPatient.addItem(c.getCityName());   
         }
        communityComboBoxPatient.removeAllItems();
        communityComboBoxPatient.addItem("Select");
        communityComboBoxPatient.setSelectedItem("Select"); 
        houseComboBoxPatient.removeAllItems();
        houseComboBoxPatient.addItem("Select");
        houseComboBoxPatient.setSelectedItem("Select"); 
        clearRegistrationPageFields();
        
    }//GEN-LAST:event_registrationLinkMouseClicked
    private void clearRegistrationPageFields(){
            patientNameTxtField.setText("");
            patientAgeTxtField.setText("");
            buttonGroupGender.clearSelection();
            patientDOB.setCalendar(null);
            patientPhoneTxtField.setText("");
            patientEmailTxtField.setText("");
            patientInsuranceTxtField.setText("");
            patientSetUsernameTxtField.setText("");
            patientSetPasswordTxtField.setText("");
            patientConfirmsPasswordTxtField.setText("");
            cityComboBoxPatient.setSelectedItem("Select");
            communityComboBoxPatient.setSelectedItem("Select");
            houseComboBoxPatient.setSelectedItem("Select");
    }
    private void populateTable(){
         
         DefaultTableModel model = (DefaultTableModel) cititsTable.getModel();
         model.setRowCount(0);
         int i =1;
         for (City c : cityList.getCitytList()){
           
           Object [] row = new Object[2];
             row[0] = i;
             row[1] = c;
            
              model.addRow(row);
              i++;
        }
             
             
             
            
            
             
         }
    private boolean validation(String input, String regexPattern){
    Pattern pattern = Pattern.compile(regexPattern,Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(input);
        return matcher.find();
    }
    private void patientRegisterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientRegisterBtnActionPerformed
        // TODO add your handling code here:
        try{
            String name = patientNameTxtField.getText();
            if(name.length()==0 || !validation(name,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Name");
             return;
            }
            int age = Integer.parseInt( patientAgeTxtField.getText());
             if(!(age >= 18)){
             JOptionPane.showMessageDialog(this,"Invalid Age. Age should be above 18 yrs"); 
             return;
            }
            String gender;
            if(maleRadio.isSelected()){
                gender= "Male";
            }
            else if(femaleRadio.isSelected()){
                gender= "Female";
            }
            else if(otherRadio.isSelected()){
                    gender = "Other";
                }
             else {
                 gender = "";
             }
            if(gender.length()==0 ){
             JOptionPane.showMessageDialog(this,"Please select your gender");
             return;
            }
             Date dob= patientDOB.getDate();
              if(dob==null){
             JOptionPane.showMessageDialog(this,"Please select your date of birth");
             return;
            }
             String phone=patientPhoneTxtField.getText();
             if(phone.length()==0 ||!validation(phone,"^\\d{10}$")){
             JOptionPane.showMessageDialog(this,"Invalid Phone Number");
             return;
            }
             String email =patientEmailTxtField.getText();
             if(email.length()==0 || !validation(email,"^(.+)@(\\S+)$")){
             JOptionPane.showMessageDialog(this,"Invalid Email");
             return;
            }
             
             String insurance = patientInsuranceTxtField.getText();
             if(insurance.length()==0 || !validation(insurance,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Insurance");
             return;
            }
             String username=patientSetUsernameTxtField.getText();
             if(username.length()==0 || !validation(username,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Usernam.No special character and numbers allowed");
             return;
            }
            for(Person p:personList.getPersonList()){
                if(p.getUsername().equals(username)){
                  JOptionPane.showMessageDialog(this,"Invalid Usernam.This username already exists");
                  return;  
                }
            }
             String password = patientSetPasswordTxtField.getText();
             if(password.length()==0 || !validation(password,"^(?![\\s.]+$)[a-zA-Z0-9@#$]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Password.Only A-Z,a-z,0-9,@,and # are allowed");
             return;
            }
            String confirmPassword = patientConfirmsPasswordTxtField.getText();
            if(!(confirmPassword.equals(password))){
             JOptionPane.showMessageDialog(this,"Confirm Password does not match the set password");
             return;
            }
            String selectedcity = String.valueOf(cityComboBoxPatient.getSelectedItem());
            String selectedcommunity = String.valueOf(communityComboBoxPatient.getSelectedItem());
            String selectedhouse = String.valueOf(houseComboBoxPatient.getSelectedItem());
            if("Select".equals(selectedcity)||"Select".equals(selectedcommunity)||"Select".equals(selectedhouse)){
            JOptionPane.showMessageDialog(this,"Invalid Address. Select all the fields of address");
             return;
            }
            String address = selectedcity+" , "+selectedcommunity+" , "+selectedhouse;
//            
              Person person = new Person(name,age,gender,phone,email,insurance,address,patientHouse,dob,username,password);
              personList.addNewPerson(person);
              Patient patient = new Patient(person);
              patientList.addNewPatient(patient);
              
            
           
            JOptionPane.showMessageDialog(this,"Your patient account is successfully registered.");
            clearRegistrationPageFields();
            changePanel(loginPage);
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, "Invalid Input. Error creating patient account");
            System.out.print(e);
           
            
        }

    }//GEN-LAST:event_patientRegisterBtnActionPerformed

    private void cancelPatientRegistrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelPatientRegistrationActionPerformed
        // TODO add your handling code here:
            clearRegistrationPageFields();
            changePanel(loginPage);
    }//GEN-LAST:event_cancelPatientRegistrationActionPerformed

    private void manageCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageCityBtnActionPerformed
        // TODO add your handling code here:
        viewAdmin.removeAll();
        viewAdmin.add(manageCitiesPanel);
        viewAdmin.repaint();
        viewAdmin.revalidate();
        populateTable();
        updateCityNameLabel.setVisible(false);
         updateCityNameTxtField.setVisible(false);
//        adminSplit.setRightComponent(manageCitiesPanel);
    }//GEN-LAST:event_manageCityBtnActionPerformed

    private void addNewCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewCityBtnActionPerformed
        // TODO add your handling code here:
        City city = cityList.addNewCity();
        city.setCityName(addNewCityTxtField.getText());
        addNewCityTxtField.setText("");
         populateTable();
//        for (City c : cityList.getCitytList()){
//           System.out.print(c.getCityName()); 
//        }
//        Community community = city.addNewCommunity();
//        community.setCommunityName(addCommunityTxtField.getText());
//        House house = community.addNewHouse();
//        house.setHouseName();
        
        
    }//GEN-LAST:event_addNewCityBtnActionPerformed

    private void deleteCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = cititsTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to delete."); 
           return;
        }
         DefaultTableModel model = (DefaultTableModel) cititsTable.getModel();
         City selectedcity = (City)model.getValueAt(selectedRowIndex, 1);
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         cityList.deleteCity(selectedcity);
         JOptionPane.showMessageDialog(this, "City Deleted");
          populateTable();
           
         }
        
    }//GEN-LAST:event_deleteCityBtnActionPerformed
    City selectedupdatecityname;
    private void updateCityNameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCityNameBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = cititsTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to update."); 
           return;
        }
         DefaultTableModel model = (DefaultTableModel) cititsTable.getModel();
         selectedupdatecityname = (City)model.getValueAt(selectedRowIndex, 1);
         updateCityNameLabel.setVisible(true);
         updateCityNameTxtField.setVisible(true);
         updateCityNameTxtField.setText(selectedupdatecityname.getCityName());
          
        
    }//GEN-LAST:event_updateCityNameBtnActionPerformed

    private void updateCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCityBtnActionPerformed
        // TODO add your handling code here:
        selectedupdatecityname.setCityName(updateCityNameTxtField.getText());
        updateCityNameTxtField.setText("");
        populateTable();
    }//GEN-LAST:event_updateCityBtnActionPerformed
City cityCombo= new City();
    private void manageCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageCommunityBtnActionPerformed
        // TODO add your handling code here:
        viewAdmin.removeAll();
        viewAdmin.add(manageCommunitiesPanel);
        viewAdmin.repaint();
        viewAdmin.revalidate();
        citiesComboBox.removeAllItems();
        citiesComboBox.addItem("Select any city yo add a community");
        populateTable2();
         for (City c : cityList.getCitytList()){
             citiesComboBox.addItem(c.getCityName());
            
         }
          citiesComboBox.setSelectedItem("Select any city yo add a community");
        
        
    }//GEN-LAST:event_manageCommunityBtnActionPerformed
    private void populateTable2(){
    
    String selectedcity = String.valueOf(citiesComboBox.getSelectedItem());
    DefaultTableModel model = (DefaultTableModel) communityTable.getModel();
         model.setRowCount(0);
         int i =1;
         for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
        for(Community cm:cityCombo.getCommunityList()){
            Object [] row = new Object[2];
             row[0] = i;
             row[1] = cm;
            
              model.addRow(row);
              i++; 
        }
        
}
    
 
    private void addCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCommunityBtnActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(citiesComboBox.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        Community community = city.addNewCommunity();
        community.setCommunityName(addCommunityTxtField.getText());
       // Person person = new Person("A",2,"A","A","A","A");
       // Admin communityAdmin = new Admin(community,person);
        populateTable2();
       
        
    }//GEN-LAST:event_addCommunityBtnActionPerformed

    private void adminLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminLogOutActionPerformed
        // TODO add your handling code here:
        viewAdmin.removeAll();
        viewAdmin.add(systemAdminHomePage);
        viewAdmin.repaint();
        viewAdmin.revalidate();
        changePanel(loginPage);
        
    }//GEN-LAST:event_adminLogOutActionPerformed

    private void logoutCommunityAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutCommunityAdminActionPerformed
        // TODO add your handling code here:
          changePanel(loginPage);
    }//GEN-LAST:event_logoutCommunityAdminActionPerformed

    private void citiesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_citiesComboBoxActionPerformed
        // TODO add your handling code here:
        populateTable2();
    }//GEN-LAST:event_citiesComboBoxActionPerformed

    private void updateCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCommunityBtnActionPerformed
        // TODO add your handling code here:
       selectedupdatecommunity.setCommunityName(addCommunityTxtField.getText());
       populateTable2();
    }//GEN-LAST:event_updateCommunityBtnActionPerformed
 Community selectedupdatecommunity;
    private void communityTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_communityTableMouseClicked
        // TODO add your handling code here:
       int selectedRowIndex = communityTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to update."); 
           return;
        }
         DefaultTableModel model = (DefaultTableModel) communityTable.getModel();
         selectedupdatecommunity = (Community)model.getValueAt(selectedRowIndex, 1);
         addCommunityTxtField.setText(selectedupdatecommunity.getCommunityName());
         
         
    }//GEN-LAST:event_communityTableMouseClicked

    private void deleteCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCommunityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = communityTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to delete."); 
           return;
        }
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         cityCombo.deleteCommunity(selectedupdatecommunity);
         JOptionPane.showMessageDialog(this, "Community Deleted");
          populateTable2();
           
         }
        
    }//GEN-LAST:event_deleteCommunityBtnActionPerformed

    private void manageHouseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageHouseBtnActionPerformed
        // TODO add your handling code here:
        viewAdmin.removeAll();
        viewAdmin.add(manageHousesPanel);
        viewAdmin.repaint();
        viewAdmin.revalidate();
        cityComboBoxHouse.removeAllItems();
        communityComboBoxHouse.removeAllItems();
        cityComboBoxHouse.addItem("Select any city");
        communityComboBoxHouse.addItem("Select any community");
        
        
         for (City c : cityList.getCitytList()){
             cityComboBoxHouse.addItem(c.getCityName());
            
         }
          cityComboBoxHouse.setSelectedItem("Select any city");
          communityComboBoxHouse.setSelectedItem("Select any community");
    }//GEN-LAST:event_manageHouseBtnActionPerformed
    
    private void cityComboBoxHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxHouseActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxHouse.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        communityComboBoxHouse.removeAllItems();
        communityComboBoxHouse.addItem("Select any community");
        communityComboBoxHouse.setSelectedItem("Select any community");
        for (Community cm :city.getCommunityList()){
             communityComboBoxHouse.addItem(cm.getCommunityName()); 
         }
    }//GEN-LAST:event_cityComboBoxHouseActionPerformed

    private void communityComboBoxHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboBoxHouseActionPerformed
        populateTable3();
        
    }//GEN-LAST:event_communityComboBoxHouseActionPerformed

    private void addHouseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHouseBtnActionPerformed
        // TODO add your handling code here:
        String selectedcommunity = String.valueOf(communityComboBoxHouse.getSelectedItem());
        String selectedcity = String.valueOf(cityComboBoxHouse.getSelectedItem());
        for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
         Community community = new Community();
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             community=cm;
             
           }
        }
        House h = community.addNewHouse();
        h.setHouseName(addHouseTxtField.getText());
        populateTable3();
    }//GEN-LAST:event_addHouseBtnActionPerformed
    House selectedupdatehouse;
    private void houseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_houseTableMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = houseTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a house to update."); 
           return;
        }
         DefaultTableModel model = (DefaultTableModel) houseTable.getModel();
         selectedupdatehouse = (House)model.getValueAt(selectedRowIndex, 1);
         addHouseTxtField.setText(selectedupdatehouse.getHouseName());
        
    }//GEN-LAST:event_houseTableMouseClicked

    private void houseUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseUpdateBtnActionPerformed
        // TODO add your handling code here:
        selectedupdatehouse.setHouseName(addHouseTxtField.getText());
       populateTable3();
    }//GEN-LAST:event_houseUpdateBtnActionPerformed

    private void houseDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseDeleteBtnActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = houseTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to delete."); 
           return;
        }
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         communityCombo.deleteHouse(selectedupdatehouse);
         JOptionPane.showMessageDialog(this, "House Deleted");
          populateTable3();
           
         }
         
    }//GEN-LAST:event_houseDeleteBtnActionPerformed

    private void manageHospitalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageHospitalBtnActionPerformed
        // TODO add your handling code here:
        viewAdmin.removeAll();
        viewAdmin.add(manageHospitalsPanel);
        viewAdmin.repaint();
        viewAdmin.revalidate();
        cityComboBoxHospital.removeAllItems();
        communityComboBoxHospital.removeAllItems();
        cityComboBoxHospital.addItem("Select any city");
        communityComboBoxHospital.addItem("Select any community");
        
        
         for (City c : cityList.getCitytList()){
             cityComboBoxHospital.addItem(c.getCityName());
            
         }
          cityComboBoxHospital.setSelectedItem("Select any city");
          communityComboBoxHospital.setSelectedItem("Select any community");
    
    }//GEN-LAST:event_manageHospitalBtnActionPerformed

    private void cityComboBoxHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxHospitalActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxHospital.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        communityComboBoxHospital.removeAllItems();
        communityComboBoxHospital.addItem("Select any community");
        communityComboBoxHospital.setSelectedItem("Select any community");
        for (Community cm :city.getCommunityList()){
             communityComboBoxHospital.addItem(cm.getCommunityName()); 
         }
       
    }//GEN-LAST:event_cityComboBoxHospitalActionPerformed

    private void communityComboBoxHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboBoxHospitalActionPerformed
        // TODO add your handling code here:
        populateTable4();
    }//GEN-LAST:event_communityComboBoxHospitalActionPerformed
    Hospital selectedupdatehospital=new Hospital();
    private void hospitalTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hospitalTableMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = hospitalTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a hospital to update."); 
           return;
        }
         DefaultTableModel model = (DefaultTableModel) hospitalTable.getModel();
         selectedupdatehospital = (Hospital)model.getValueAt(selectedRowIndex, 1);
         addHospitalTxtField.setText(selectedupdatehospital.getHospitalName());
    }//GEN-LAST:event_hospitalTableMouseClicked

    private void addHospitalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHospitalBtnActionPerformed
        // TODO add your handling code here:
        String selectedcommunity = String.valueOf(communityComboBoxHospital.getSelectedItem());
        String selectedcity = String.valueOf(cityComboBoxHospital.getSelectedItem());
        for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
         Community community = new Community();
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             community=cm;
             
           }
        }
        HospitalDirectory hospitalList = community.getHospitalList();
        Hospital h=hospitalList.addNewHospital();
        h.setHospitalName(addHospitalTxtField.getText());
        populateTable4();
        
    }//GEN-LAST:event_addHospitalBtnActionPerformed

    private void updateHospitalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateHospitalBtnActionPerformed
        // TODO add your handling code here:
         selectedupdatehospital.setHospitalName(addHospitalTxtField.getText());
       populateTable4();
    }//GEN-LAST:event_updateHospitalBtnActionPerformed

    private void hospitalDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalDeleteBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = hospitalTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to delete."); 
           return;
        }
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         HospitalDirectory hospitalList = communityCombo.getHospitalList();
         hospitalList.deleteHospital(selectedupdatehospital);
         
         JOptionPane.showMessageDialog(this, "Hospital Deleted");
          populateTable4();
           
         }
         
    
    }//GEN-LAST:event_hospitalDeleteBtnActionPerformed

    private void manageDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageDoctorBtnActionPerformed
        // TODO add your handling code here:
        viewAdmin.removeAll();
        viewAdmin.add(manageDoctorsPanel);
        viewAdmin.repaint();
        viewAdmin.revalidate();
        cityComboBoxDoctor.removeAllItems();
        communityComboBoxDoctor.removeAllItems();
        hospitalComboBoxDoctor.removeAllItems();
        
        cityComboBoxDoctor.addItem("Select any city");
        communityComboBoxDoctor.addItem("Select any community");
        hospitalComboBoxDoctor.addItem("Select any hospital");
        
         for (City c : cityList.getCitytList()){
             cityComboBoxDoctor.addItem(c.getCityName());
            
         }
          cityComboBoxDoctor.setSelectedItem("Select any city");
          communityComboBoxDoctor.setSelectedItem("Select any community");
          hospitalComboBoxDoctor.setSelectedItem("Select any hospital");
    
        
    }//GEN-LAST:event_manageDoctorBtnActionPerformed

    private void cityComboBoxDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxDoctorActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxDoctor.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        communityComboBoxDoctor.removeAllItems();
        communityComboBoxDoctor.addItem("Select any community");
        communityComboBoxDoctor.setSelectedItem("Select any community");
        for (Community cm :city.getCommunityList()){
             communityComboBoxDoctor.addItem(cm.getCommunityName()); 
         }
    }//GEN-LAST:event_cityComboBoxDoctorActionPerformed

    private void communityComboBoxDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboBoxDoctorActionPerformed
        // TODO add your handling code here:
         String selectedcity = String.valueOf(cityComboBoxDoctor.getSelectedItem());
         String selectedcommunity = String.valueOf(communityComboBoxDoctor.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        Community community = new Community();
        for (Community cm :city.getCommunityList()){
            if(cm.getCommunityName().equals(selectedcommunity)){
             community = cm;
         }
        hospitalComboBoxDoctor.removeAllItems();
        hospitalComboBoxDoctor.addItem("Select any hospital");
        hospitalComboBoxDoctor.setSelectedItem("Select any hospital");
        HospitalDirectory hospitalList = community.getHospitalList();
//        Hospital h=hospitalList.addNewHospital();
        for (Hospital h :hospitalList.getHospitalList()){
             hospitalComboBoxDoctor.addItem(h.getHospitalName()); 
         }
        }
    }//GEN-LAST:event_communityComboBoxDoctorActionPerformed
    Doctor selectedupdatedoctor;
    private void doctorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorTableMouseClicked
        // TODO add your handling code here:
     int selectedRowIndex = doctorTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a Doctor to update."); 
           return;
        }
         DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
         selectedupdatedoctor = (Doctor)model.getValueAt(selectedRowIndex, 1);
         Person person = selectedupdatedoctor.getPerson();
         doctorNameTxtField.setText(person.getPersonName());
         doctorAgeTxtField.setText(String.valueOf(person.getPersonAge()));
         if("Male".equals(person.getPersonGender())){
                    maleRadio1.setSelected(true);
                }
                else if ("Female".equals(person.getPersonGender())){
                    femaleRadio1.setSelected(true);
                }
                else if ("Other".equals(person.getPersonGender())){
                    otherRadio1.setSelected(true);
                }
         doctorDOB.setDate(person.getPersonDOB());
         doctorPhoneTxtField.setText(person.getPersonContactNo());
         doctorEmailTxtField.setText(person.getPersonContactEmail());
         doctorSetUsernameTxtField.setText(person.getUsername());
         doctorSetPasswordTxtField.setText(person.getPassword());
         doctorConfirmsPasswordTxtField.setText(person.getPassword());
         doctorSpecialityTxtField.setText(selectedupdatedoctor.getSpeciality());
         doctorDegreeTxtField.setText(selectedupdatedoctor.getDegree());
         doctorAvailabilityTxtField.setText(selectedupdatedoctor.getAvailability());
         populateTable5();
    }//GEN-LAST:event_doctorTableMouseClicked

    private void hospitalComboBoxDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalComboBoxDoctorActionPerformed
        // TODO add your handling code here:
        populateTable5();
    }//GEN-LAST:event_hospitalComboBoxDoctorActionPerformed

    private void updateDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDoctorBtnActionPerformed
        // TODO add your handling code here:
        try{
            String name = doctorNameTxtField.getText();
            if(name.length()==0 || !validation(name,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Name");
             return;
            }
            int age = Integer.parseInt( doctorAgeTxtField.getText());
             if(!(age >= 18)){
             JOptionPane.showMessageDialog(this,"Invalid Age. Age should be above 18 yrs"); 
             return;
            }
            String gender;
            if(maleRadio1.isSelected()){
                gender= "Male";
            }
            else if(femaleRadio1.isSelected()){
                gender= "Female";
            }
            else if(otherRadio1.isSelected()){
                    gender = "Other";
                }
             else {
                 gender = "";
             }
            if(gender.length()==0 ){
             JOptionPane.showMessageDialog(this,"Please select your gender. ");
             return;
            }
             Date dob= doctorDOB.getDate();
              if(dob==null){
             JOptionPane.showMessageDialog(this,"Please select your date of birth.");
             return;
            }
               String speciality =doctorSpecialityTxtField.getText();
             if(speciality.length()==0 ||!validation(speciality,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Speciality");
             return;
            }
             String degree =doctorDegreeTxtField.getText();
             if(degree.length()==0 ||!validation(degree,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Degree");
             return;
            }
              String availability =doctorAvailabilityTxtField.getText();
             if(availability.length()==0 ||!validation(availability,"^(?![\\s.]+$)[a-zA-Z0-9\\s.()]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Availability");
             return;
            }
             String phone=doctorPhoneTxtField.getText();
             if(phone.length()==0 ||!validation(phone,"^\\d{10}$")){
             JOptionPane.showMessageDialog(this,"Invalid Phone Number");
             return;
            }
             String email =doctorEmailTxtField.getText();
             if(email.length()==0 || !validation(email,"^(.+)@(\\S+)$")){
             JOptionPane.showMessageDialog(this,"Invalid Email");
             return;
            }
             
             
             String username=doctorSetUsernameTxtField.getText();
             if(username.length()==0 || !validation(username,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Usernam.No special character and numbers allowed ");
             return;
            }
            for(Person p:personList.getPersonList()){
                if(p.getUsername().equals(username)){
                  JOptionPane.showMessageDialog(this,"Invalid Usernam.This username already exists.");
                  return;  
                }
            }
             String password = doctorSetPasswordTxtField.getText();
             if(password.length()==0 || !validation(password,"^(?![\\s.]+$)[a-zA-Z0-9@#$]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Password.Only A-Z,a-z,0-9,@,and # are allowed ");
             return;
            }
            String confirmPassword = doctorConfirmsPasswordTxtField.getText();
            if(!(confirmPassword.equals(password))){
             JOptionPane.showMessageDialog(this,"Confirm Password does not match the set password");
             return;
            }
           
       Person person = selectedupdatedoctor.getPerson();
       person.setPersonName(name);
       person.setPersonAge(age);
       person.setPersonGender(gender);
       person.setPersonDOB(dob);
       person.setPersonContactNo(phone);
       person.setPersonContactEmail(email);
       person.setPersonName(username);
       person.setPassword(password);
       selectedupdatedoctor.setDegree(degree);
       selectedupdatedoctor.setSpeciality(speciality);
       selectedupdatedoctor.setAvailability(availability);
  
              
            
           
            JOptionPane.showMessageDialog(this,"Doctor account is successfully updated.");
            doctorNameTxtField.setText("");
            doctorAgeTxtField.setText("");
            buttonGroup1.clearSelection();
            doctorDOB.setCalendar(null);
            doctorPhoneTxtField.setText("");
            doctorEmailTxtField.setText("");
            doctorSpecialityTxtField.setText("");
            doctorDegreeTxtField.setText("");
            doctorAvailabilityTxtField.setText("");
            doctorSetUsernameTxtField.setText("");
            doctorSetPasswordTxtField.setText("");
            doctorConfirmsPasswordTxtField.setText("");
            changePanel(loginPage);
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, "Invalid Input. Error updating account");
            System.out.print(e);
           
            
        }
     
       
       populateTable5();
    }//GEN-LAST:event_updateDoctorBtnActionPerformed

    private void deleteDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDoctorBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = doctorTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to delete."); 
           return;
        }
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         hospitalCombo.deleteDoctorHospital(selectedupdatedoctor);
         doctorList.deleteDoctor(selectedupdatedoctor);
         
         JOptionPane.showMessageDialog(this, "Hospital Deleted");
          populateTable5();
           
         }
    }//GEN-LAST:event_deleteDoctorBtnActionPerformed

    private void addDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDoctorBtnActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxDoctor.getSelectedItem());
        String selectedcommunity = String.valueOf(communityComboBoxDoctor.getSelectedItem());
        String selectedhospital = String.valueOf(hospitalComboBoxDoctor.getSelectedItem());
        if("Select any city".equals(selectedcity)||"Select any community".equals(selectedcommunity)||"Select any hospital".equals(selectedhospital)){
            JOptionPane.showMessageDialog(this,"Select City,Community, and Hospital to add a doctor.");
             return;
            }
        for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
         Community community = new Community();
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             community=cm;
             
           }
        }
        HospitalDirectory hospitalList = community.getHospitalList();
        
        
        for (Hospital h :hospitalList.getHospitalList()){
             if(selectedhospital.equals(h.getHospitalName())){
             hospitalCombo=h;
             
           }
         }
        try{
            String name = doctorNameTxtField.getText();
            if(name.length()==0 || !validation(name,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Name");
             return;
            }
            int age = Integer.parseInt( doctorAgeTxtField.getText());
             if(!(age >= 18)){
             JOptionPane.showMessageDialog(this,"Invalid Age. Age should be above 18 yrs"); 
             return;
            }
            String gender;
            if(maleRadio1.isSelected()){
                gender= "Male";
            }
            else if(femaleRadio1.isSelected()){
                gender= "Female";
            }
            else if(otherRadio1.isSelected()){
                    gender = "Other";
                }
             else {
                 gender = "";
             }
            if(gender.length()==0 ){
             JOptionPane.showMessageDialog(this,"Please select the gender. ");
             return;
            }
             Date dob= doctorDOB.getDate();
              if(dob==null){
             JOptionPane.showMessageDialog(this,"Please select the date of birth.");
             return;
            }
              String speciality =doctorSpecialityTxtField.getText();
             if(speciality.length()==0 ||!validation(speciality,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Speciality");
             return;
            }
             String degree =doctorDegreeTxtField.getText();
             if(degree.length()==0 ||!validation(degree,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Degree");
             return;
            }
             String availability =doctorAvailabilityTxtField.getText();
             if(availability.length()==0 ||!validation(availability,"^(?![\\s.]+$)[a-zA-Z0-9\\s.()]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Availability");
             return;
            }
             String phone=doctorPhoneTxtField.getText();
             if(phone.length()==0 ||!validation(phone,"^\\d{10}$")){
             JOptionPane.showMessageDialog(this,"Invalid Phone Number");
             return;
            }
             String email =doctorEmailTxtField.getText();
             if(email.length()==0 || !validation(email,"^(.+)@(\\S+)$")){
             JOptionPane.showMessageDialog(this,"Invalid Email");
             return;
            }
             
             
             String username=doctorSetUsernameTxtField.getText();
             if(username.length()==0 || !validation(username,"^(?![\\s.]+$)[a-zA-Z\\s.]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Usernam.No special character and numbers allowed ");
             return;
            }
            for(Person p:personList.getPersonList()){
                if(p.getUsername().equals(username)){
                  JOptionPane.showMessageDialog(this,"Invalid Usernam.This username already exists.");
                  return;  
                }
            }
             String password = doctorSetPasswordTxtField.getText();
             if(password.length()==0 || !validation(password,"^(?![\\s.]+$)[a-zA-Z0-9@#$]*$")){
             JOptionPane.showMessageDialog(this,"Invalid Password.Only A-Z,a-z,0-9,@,and # are allowed ");
             return;
            }
            String confirmPassword = doctorConfirmsPasswordTxtField.getText();
            if(!(confirmPassword.equals(password))){
             JOptionPane.showMessageDialog(this,"Confirm Password does not match the set password");
             return;
            }
           
            
//            
              Person person = new Person(name,age,gender,phone,email,dob,username,password);
              personList.addNewPerson(person);
              Doctor doctor = new Doctor(person,speciality,degree,availability);
              hospitalCombo.addDoctorHospital(doctor);
              doctorList.addNewDoctor(doctor);
              
            
           
            JOptionPane.showMessageDialog(this,"Doctor account is successfully registered.");
            doctorNameTxtField.setText("");
            doctorAgeTxtField.setText("");
            buttonGroup1.clearSelection();
            doctorDOB.setCalendar(null);
            doctorPhoneTxtField.setText("");
            doctorSpecialityTxtField.setText("");
            doctorAvailabilityTxtField.setText("");
            doctorDegreeTxtField.setText("");
            doctorEmailTxtField.setText("");
            doctorSetUsernameTxtField.setText("");
            doctorSetPasswordTxtField.setText("");
            doctorConfirmsPasswordTxtField.setText("");
            
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, "Invalid Input. Error adding doctor");
            System.out.print(e);
           
            
        }
        
       
         populateTable5();
    }//GEN-LAST:event_addDoctorBtnActionPerformed

    private void patientEmailTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientEmailTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientEmailTxtFieldActionPerformed

    private void cityComboBoxPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxPatientActionPerformed
        // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxPatient.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        communityComboBoxPatient.removeAllItems();
        communityComboBoxPatient.addItem("Select");
        communityComboBoxPatient.setSelectedItem("Select");
        for (Community cm :city.getCommunityList()){
             communityComboBoxPatient.addItem(cm.getCommunityName()); 
         }
        
    }//GEN-LAST:event_cityComboBoxPatientActionPerformed

    private void communityComboBoxPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityComboBoxPatientActionPerformed
        // TODO add your handling code here:
         String selectedcity = String.valueOf(cityComboBoxPatient.getSelectedItem());
         String selectedcommunity = String.valueOf(communityComboBoxPatient.getSelectedItem());
        City city= new City();
        for (City c : cityList.getCitytList()){
             if(c.getCityName().equals(selectedcity)){
                 city=c;
             }
            
         }
        Community community = new Community();
        for (Community cm :city.getCommunityList()){
            if(cm.getCommunityName().equals(selectedcommunity)){
             community = cm;
         }
        houseComboBoxPatient.removeAllItems();
        houseComboBoxPatient.addItem("Select");
        houseComboBoxPatient.setSelectedItem("Select");
      
        for (House h :community.getHouseList()){
             houseComboBoxPatient.addItem(h.getHouseName()); 
         }
        } 
    }//GEN-LAST:event_communityComboBoxPatientActionPerformed

    private void houseComboBoxPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseComboBoxPatientActionPerformed
        // TODO add your handling code here:
        String selectedhouse = String.valueOf(houseComboBoxPatient.getSelectedItem());
        for(City c : cityList.getCitytList()){
           for (Community cm :c.getCommunityList()){ 
                  for (House h :cm.getHouseList()){
                      if(selectedhouse.equals(h.getHouseName())){
                           patientHouse= h;
                      }
                  }
           }
        }
       
    }//GEN-LAST:event_houseComboBoxPatientActionPerformed

    private void doctorEmailTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorEmailTxtFieldActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_doctorEmailTxtFieldActionPerformed

    private void patientLogOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientLogOutBtnActionPerformed
        // TODO add your handling code here:
        patientViewPanel.removeAll();
        patientViewPanel.add(patientHomePanel);
        patientViewPanel.repaint();
        patientViewPanel.revalidate();
        changePanel(loginPage);
    }//GEN-LAST:event_patientLogOutBtnActionPerformed
String selectedhospitalByPatient;
    private void hospitalComboBoxPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalComboBoxPatientActionPerformed
        // TODO add your handling code here:
        selectedhospitalByPatient = String.valueOf(hospitalComboBoxPatient.getSelectedItem());
        DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
        model.setRowCount(0);
        if("Select".equals(selectedhospitalByPatient)){
           
            return;
        }
        
         int i =1;
         Hospital patientSelectedHospital = new Hospital();
         for(Hospital h : patientHospitalList.getHospitalList()){
             if(selectedhospitalByPatient.equals(h.getHospitalName())){
                  patientSelectedHospital=h;
                  
             
           }
            
        }
        DoctorDirectory patientDoctorList = patientSelectedHospital.getDoctorList() ;
         for(Doctor doctor:patientDoctorList.getDoctorList()){
          Object [] row = new Object[6];
             row[0] = i;
             row[1] = doctor;
             row[2] = doctor.getSpeciality();
             row[3] = doctor.getDegree();
             row[4] = doctor.getAvailability();
             row[5] = doctor.getPerson().getPersonContactNo();
              model.addRow(row);
              i++;  
        }
        
    }//GEN-LAST:event_hospitalComboBoxPatientActionPerformed

    private void searchDoctorPatientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDoctorPatientBtnActionPerformed
        // TODO add your handling code here:
        changePatientPanel(searchDoctorPanel);
        hospitalComboBoxPatient.removeAllItems(); 
        hospitalComboBoxPatient.addItem("Select");
        hospitalComboBoxPatient.setSelectedItem("Select");
        Community patientCommunity = new Community();
        for(City c : cityList.getCitytList()){
           for (Community cm :c.getCommunityList()){ 
                  for (House h :cm.getHouseList()){
                      if(h.getHouseName().equals(loggedInPatient.getPerson().getHouse().getHouseName())){
                          patientCommunity = cm;
                          break;
                      }
                  }
           }
        }
       patientHospitalList = patientCommunity.getHospitalList();
        for(Hospital h : patientHospitalList.getHospitalList()){
             hospitalComboBoxPatient.addItem(h.getHospitalName());
        }
        patientAddressDoctorSearchLabel.setText("Your loction : "+loggedInPatient.getPerson().getPersonAddress());
        
    }//GEN-LAST:event_searchDoctorPatientBtnActionPerformed
      
    private void bookAppointmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookAppointmentBtnActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = patientTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a Doctor to request appointment."); 
           return;
        }
          DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
        
          Doctor selectedDoctor = (Doctor)model.getValueAt(selectedRowIndex, 1);
          String doctorName = selectedDoctor.getPerson().getPersonName();
          String s ="";
          for(Patient p : selectedDoctor.getPatientList().getPatientList()){
              if(p.getPatientId()==loggedInPatient.getPatientId()){
               
               s="another";
               break;
              }
              
              }
          if(!("another".equals(s))){
          selectedDoctor.getPatientList().addNewPatient(loggedInPatient);
          }
         
          Encounter encounter = new Encounter(doctorName+ " , " + selectedhospitalByPatient);
          loggedInPatient.getEncounterHistory().addNewEncounter(encounter);
          JOptionPane.showMessageDialog(this,"Your appointment " +s+ "is succeefully requested with the doctor.");
          
          model.setRowCount(0);
          hospitalComboBoxPatient.setSelectedIndex(0);
        
    }//GEN-LAST:event_bookAppointmentBtnActionPerformed

    private void doctorLogOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorLogOutBtnActionPerformed
        // TODO add your handling code here:
        doctorViewPanel.removeAll();
        doctorViewPanel.add(doctorHomePanel);
        doctorViewPanel.repaint();
        doctorViewPanel.revalidate();
        changePanel(loginPage);
        
    }//GEN-LAST:event_doctorLogOutBtnActionPerformed
       public void changePatientPanel(javax.swing.JPanel j){
        patientViewPanel.removeAll();
        patientViewPanel.add(j);
        patientViewPanel.repaint();
        patientViewPanel.revalidate();
       }
    private void deletePatientProfileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePatientProfileBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deletePatientProfileBtnActionPerformed

    private void patientHomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientHomeBtnActionPerformed
        // TODO add your handling code here:
        changePatientPanel(patientHomePanel);
        populateTable6();
        clearappointmentListTableFields();
    }//GEN-LAST:event_patientHomeBtnActionPerformed

    private void addEncounterDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEncounterDetailsBtnActionPerformed
        // TODO add your handling code here:

        doctorViewPanel.removeAll();
        doctorViewPanel.add(doctorManageAppointmentsPanel);
        doctorViewPanel.repaint();
        doctorViewPanel.revalidate();
        
        populateEncounterTable();   
        
        
    }//GEN-LAST:event_addEncounterDetailsBtnActionPerformed
    public void populateEncounterTable(){
        DefaultTableModel model = (DefaultTableModel) encounterTable.getModel();
        model.setRowCount(0);
        int i =1;
        PatientDirectory patientList = loggedInDoctor.getPatientList();
        for(Patient p : patientList.getPatientList()){
            for(Encounter e : p.getEncounterHistory().getEncounterList())  {
                Object [] row = new Object[5];
                row[0] = i;
                row[1] = p.getPatientId();
                row[2] = p;
                row[3] = e;
                row[4] = e.getStatus();
                model.addRow(row);
                i++;
            }
        }   
    }
    private void encounterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encounterTableMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = encounterTable.getSelectedRow();
        
          DefaultTableModel model = (DefaultTableModel) encounterTable.getModel();
        
          Patient selectedPatient  = (Patient)model.getValueAt(selectedRowIndex, 2);
          Encounter patientEncounter  = (Encounter)model.getValueAt(selectedRowIndex, 3);
          patientDetailsNameLabel.setText(selectedPatient.getPerson().getPersonName());
          patientDetailsAgeLabel.setText(String.valueOf(selectedPatient.getPerson().getPersonAge()));
          patientDetailsGenderLabel.setText(selectedPatient.getPerson().getPersonGender());
          patientDetailsInsuranceLabel.setText(selectedPatient.getPerson().getPersonInsurance());
          patientDetailsPhoneLabel.setText(selectedPatient.getPerson().getPersonContactNo());
          patientDetailsEmailLabel.setText(selectedPatient.getPerson().getPersonContactEmail());
          
                if("Appointment Request Pending".equals(patientEncounter.getStatus())){
                   patientEncounterSaveBtn.setText("Save");
                }
                else{
                 patientEncounterSaveBtn.setText("Update");
                 patientBodyTempTxtField.setText(patientEncounter.getViatlSigns().getBodyTemperature());
                 patientBloodPressureTxtField.setText(patientEncounter.getViatlSigns().getBloodPressure());
                 patientPulseTxtField.setText(patientEncounter.getViatlSigns().getPulseRate());
                 patientRespRateTxtField.setText(patientEncounter.getViatlSigns().getRespirationRate());
                 encounterDateChooser.setDate(patientEncounter.getEncounterDate());
                 patientSymptomsTxtField.setText(patientEncounter.getSymptoms());
                 patientDiagnosisTxtField.setText(patientEncounter.getDiagnosis());
                 String str = patientEncounter.getEncounterTime();
                 String[] arrOfStr = str.split(",", 0); 
                 hrComboBox.setSelectedItem(arrOfStr[0]);
                 minComboBox.setSelectedItem(arrOfStr[1]);
                 timeComboBox.setSelectedItem(arrOfStr[2]);
                }
            
          
        
    }//GEN-LAST:event_encounterTableMouseClicked

    private void patientEncounterSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientEncounterSaveBtnActionPerformed
        // TODO add your handling code here:
         int selectedRowIndex = encounterTable.getSelectedRow();
        if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select any appointment request from the table."); 
           return;
        }
          DefaultTableModel model = (DefaultTableModel) encounterTable.getModel();
        
          Patient selectedPatient  = (Patient)model.getValueAt(selectedRowIndex, 2);
          Encounter patientEncounter  = (Encounter)model.getValueAt(selectedRowIndex, 3);
                 try{
                    String bodyTemperature=patientBodyTempTxtField.getText();
                    if(bodyTemperature.length()==0 || !validation(bodyTemperature,"^[0-9]{2,3}$")){
                    JOptionPane.showMessageDialog(this,"Invalid Body Temperature");
                    return;
                    }
                    String bloodPressure=patientBloodPressureTxtField.getText();
                    if(bloodPressure.length()==0 || !validation(bloodPressure,"^\\d{1,3}\\/\\d{1,3}$")){
                    JOptionPane.showMessageDialog(this,"Invalid Blood Pressure");
                    return;
                    }
                    String pulseRate=patientPulseTxtField.getText();
                    if(pulseRate.length()==0 || !validation(pulseRate,"^[0-9]{2,3}$")){
                    JOptionPane.showMessageDialog(this,"Invalid Pulse Rate");
                    return;
                    }
                    String respRate=patientRespRateTxtField.getText();
                    if(respRate.length()==0 || !validation(respRate,"^[0-9]{2,3}$")){
                    JOptionPane.showMessageDialog(this,"Invalid Respiration Rate");
                    return;
                    }
                    Date date =encounterDateChooser.getDate();
                    if(date==null){
                    JOptionPane.showMessageDialog(this,"Invalid Encounter Date");
                    return;
                    }
                    String Time =String.valueOf(hrComboBox.getSelectedItem())+","+ String.valueOf(minComboBox.getSelectedItem())+ ","+ String.valueOf(timeComboBox.getSelectedItem());
                    String symptoms=patientSymptomsTxtField.getText();
                    if(symptoms.length()==0 || !validation(symptoms,"^(?![\\s.]+$)[a-zA-Z\\s.,]*$")){
                    JOptionPane.showMessageDialog(this,"Invalid Symptoms");
                    return;
                    }
                    String diagnosis=patientDiagnosisTxtField.getText();
                    if(diagnosis.length()==0 || !validation(diagnosis,"^(?![\\s.]+$)[a-zA-Z\\s.,]*$")){
                    JOptionPane.showMessageDialog(this,"Invalid Diagnosis");
                    return;
                    }
                 patientEncounter.getViatlSigns().setBloodPressure(bloodPressure);
                 patientEncounter.getViatlSigns().setBodyTemperature(bodyTemperature);
                 patientEncounter.getViatlSigns().setPulseRate(pulseRate);
                 patientEncounter.getViatlSigns().setRespirationRate(respRate);
                 patientEncounter.setEncounterDate(date);
                 patientEncounter.setSymptoms(symptoms);
                 patientEncounter.setDiagnosis(diagnosis);
                 patientEncounter.setEncounterTime(Time);
                 patientEncounter.setStatus("Appointment Request Approved");
                 
                 patientBodyTempTxtField.setText("");
                 patientBloodPressureTxtField.setText("");
                 patientPulseTxtField.setText("");
                 patientRespRateTxtField.setText("");
                 patientSymptomsTxtField.setText("");
                 encounterDateChooser.setDate(null);
                 hrComboBox.setSelectedIndex(0);
                 minComboBox.setSelectedIndex(0);
                 timeComboBox.setSelectedIndex(0);
                 patientSymptomsTxtField.setText("");
                 patientDiagnosisTxtField.setText("");
                 patientEncounterSaveBtn.setText("Save");
                  patientDetailsNameLabel.setText("");
                    patientDetailsAgeLabel.setText("");
                    patientDetailsGenderLabel.setText("");
                    patientDetailsInsuranceLabel.setText("");
                    patientDetailsPhoneLabel.setText("");
                    patientDetailsEmailLabel.setText("");
                    populateEncounterTable();
                 }
                 catch(Exception e){
                 System.out.print(e);
                 
                 }
    }//GEN-LAST:event_patientEncounterSaveBtnActionPerformed

    private void appointmentListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentListTableMouseClicked
        // TODO add your handling code here:
        
        
        
    }//GEN-LAST:event_appointmentListTableMouseClicked

    private void updatePatientProfileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePatientProfileBtnActionPerformed
        // TODO add your handling code here:
         changePatientPanel(patientRegistrationPage);
         registrationLabel.setText("Update you Profile");
         cancelPatientRegistration.setVisible(false);
         
    }//GEN-LAST:event_updatePatientProfileBtnActionPerformed

    private void appointmentDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointmentDeleteBtnActionPerformed
        // TODO add your handling code here
         int selectedRowIndex = appointmentListTable.getSelectedRow();
         if (selectedRowIndex <0){
           JOptionPane.showMessageDialog(this,"Please select a row to delete."); 
           return;
        }
         DefaultTableModel model = (DefaultTableModel) appointmentListTable.getModel();
         Encounter patientEncounter  = (Encounter)model.getValueAt(selectedRowIndex, 0);
         if("Appointment Request Pending".equals(patientEncounter.getStatus())){
          
        
         int res = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete", "Delete", JOptionPane.YES_NO_OPTION);
         if(res == JOptionPane.YES_OPTION){
         loggedInPatient.getEncounterHistory().deleteEncounter(patientEncounter);
         JOptionPane.showMessageDialog(this, "Appointment request deleted");
         populateTable6();
           
         }
         }
         else{
          JOptionPane.showMessageDialog(this, "Past appointments cannot be deleted");
             
         }
    }//GEN-LAST:event_appointmentDeleteBtnActionPerformed

    private void viewAppointmentDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAppointmentDetailsBtnActionPerformed
        // TODO add your handling code here:
         int selectedRowIndex = appointmentListTable.getSelectedRow();
         DefaultTableModel model = (DefaultTableModel) appointmentListTable.getModel();
         Encounter patientEncounter  = (Encounter)model.getValueAt(selectedRowIndex, 0);
         if("Appointment Request Pending".equals(patientEncounter.getStatus())){
          JOptionPane.showMessageDialog(this,"Your appointment request has not been approved yet.");
          clearappointmentListTableFields();
         }
         else{
             patientViewEncounterId.setText(String.valueOf(patientEncounter.getEncounterId()));
             patientViewBloodPressure.setText(patientEncounter.getViatlSigns().getBloodPressure());
             patientViewBodyTemperature.setText(patientEncounter.getViatlSigns().getBodyTemperature());
             patientViewPulseRate.setText(patientEncounter.getViatlSigns().getPulseRate());
             patientViewRespirationRate.setText(patientEncounter.getViatlSigns().getRespirationRate());
             DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
             patientEncounterDate.setText(dateFormat.format(patientEncounter.getEncounterDate()));
             patientViewEncounterTime.setText(patientEncounter.getEncounterTime());
             patientViewSymptoms.setText(patientEncounter.getSymptoms());
             patientViewDiagnosis.setText(patientEncounter.getDiagnosis());
             
         }
    }//GEN-LAST:event_viewAppointmentDetailsBtnActionPerformed
    public void clearappointmentListTableFields(){
             patientViewEncounterId.setText("");
             patientViewBloodPressure.setText("");
             patientViewBodyTemperature.setText("");
             patientViewPulseRate.setText("");
             patientViewRespirationRate.setText(""); 
             patientEncounterDate.setText("");
             patientViewEncounterTime.setText("");
             patientViewSymptoms.setText("");
             patientViewDiagnosis.setText("");  
    }
    Community communityCombo = new Community();
    private void populateTable3(){
    
    // TODO add your handling code here:
        String selectedcommunity = String.valueOf(communityComboBoxHouse.getSelectedItem());
        String selectedcity = String.valueOf(cityComboBoxHouse.getSelectedItem());
        DefaultTableModel model = (DefaultTableModel) houseTable.getModel();
         model.setRowCount(0);
         int i =1;
         for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
        
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             communityCombo=cm;
             
           }
        } 
          for(House h:communityCombo.getHouseList()){
          Object [] row = new Object[2];
             row[0] = i;
             row[1] = h;
            
              model.addRow(row);
              i++;  
        }
            
        
        
}
    private void populateTable4(){
    
    // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxHospital.getSelectedItem());
        String selectedcommunity = String.valueOf(communityComboBoxHospital.getSelectedItem());
        DefaultTableModel model = (DefaultTableModel) hospitalTable.getModel();
         model.setRowCount(0);
         int i =1;
         for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
        
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             communityCombo=cm;
             
           }
        } 
        HospitalDirectory hospitalList = communityCombo.getHospitalList();
          for(Hospital h : hospitalList.getHospitalList()){
          Object [] row = new Object[2];
             row[0] = i;
             row[1] = h;
            
              model.addRow(row);
              i++;  
        }
    }
    Hospital hospitalCombo = new Hospital();
       private void populateTable5(){
    
    // TODO add your handling code here:
        String selectedcity = String.valueOf(cityComboBoxDoctor.getSelectedItem());
        String selectedcommunity = String.valueOf(communityComboBoxDoctor.getSelectedItem());
        String selectedhospital = String.valueOf(hospitalComboBoxDoctor.getSelectedItem());
        DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
         model.setRowCount(0);
         int i =1;
         for (City c : cityList.getCitytList()){
           if(selectedcity.equals(c.getCityName())){
             cityCombo=c;
             
           }
          
        }
        
        for(Community cm:cityCombo.getCommunityList()){
            if(selectedcommunity.equals(cm.getCommunityName())){
             communityCombo=cm;
             
           }
        } 
        HospitalDirectory hospitalList = communityCombo.getHospitalList();
        
        
        for (Hospital h :hospitalList.getHospitalList()){
             if(selectedhospital.equals(h.getHospitalName())){
             hospitalCombo=h;
             
           }
         }
        
          DoctorDirectory doctorList= hospitalCombo.getDoctorList();
          
          for(Doctor doctor : doctorList.getDoctorList()){
          Object [] row = new Object[2];
             row[0] = i;
             row[1] = doctor;
            
              model.addRow(row);
              i++;  
        }     
        
        
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MainFrame;
    private javax.swing.JLabel addCityLabel;
    private javax.swing.JLabel addCommunityAdminPasswordLabel;
    private javax.swing.JLabel addCommunityAdminUsernameLabel;
    private javax.swing.JTextField addCommunityAdminUsernameTxtField;
    private javax.swing.JButton addCommunityBtn;
    private javax.swing.JLabel addCommunityLabel;
    private javax.swing.JTextField addCommunityTxtField;
    private javax.swing.JButton addDoctorBtn;
    private javax.swing.JButton addEncounterDetailsBtn;
    private javax.swing.JLabel addHospitalAdminPasswordLabel;
    private javax.swing.JTextField addHospitalAdminPasswordTxtField;
    private javax.swing.JLabel addHospitalAdminUsernameLabel;
    private javax.swing.JTextField addHospitalAdminUsernameTxtField;
    private javax.swing.JButton addHospitalBtn;
    private javax.swing.JLabel addHospitalLabel;
    private javax.swing.JTextField addHospitalTxtField;
    private javax.swing.JButton addHouseBtn;
    private javax.swing.JLabel addHouseLabel;
    private javax.swing.JTextField addHouseTxtField;
    private javax.swing.JButton addNewCityBtn;
    private javax.swing.JTextField addNewCityTxtField;
    private javax.swing.JButton adminLogOut;
    private javax.swing.JSplitPane adminSplit;
    private javax.swing.JButton appointmentDeleteBtn;
    private javax.swing.JTable appointmentListTable;
    private javax.swing.JButton bookAppointmentBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroupGender;
    private javax.swing.JButton cancelPatientRegistration;
    private javax.swing.JComboBox<String> citiesComboBox;
    private javax.swing.JTable cititsTable;
    private javax.swing.JComboBox<String> cityComboBoxDoctor;
    private javax.swing.JComboBox<String> cityComboBoxHospital;
    private javax.swing.JComboBox<String> cityComboBoxHouse;
    private javax.swing.JComboBox<String> cityComboBoxPatient;
    private javax.swing.JPanel communityAdminHouse;
    private javax.swing.JPasswordField communityAdminPasswordTxtField;
    private javax.swing.JSplitPane communityAdminSplit;
    private javax.swing.JComboBox<String> communityComboBoxDoctor;
    private javax.swing.JComboBox<String> communityComboBoxHospital;
    private javax.swing.JComboBox<String> communityComboBoxHouse;
    private javax.swing.JComboBox<String> communityComboBoxPatient;
    private javax.swing.JTable communityTable;
    private javax.swing.JPanel controlAdmin;
    private javax.swing.JPanel controlCommunityPanel;
    private javax.swing.JButton deleteCityBtn;
    private javax.swing.JButton deleteCommunityBtn;
    private javax.swing.JButton deleteDoctorBtn;
    private javax.swing.JButton deletePatientProfileBtn;
    private javax.swing.JTextField doctorAgeTxtField;
    private javax.swing.JTextField doctorAvailabilityTxtField;
    private javax.swing.JPasswordField doctorConfirmsPasswordTxtField;
    private javax.swing.JPanel doctorControlPanel;
    private com.toedter.calendar.JDateChooser doctorDOB;
    private javax.swing.JTextField doctorDegreeTxtField;
    private javax.swing.JTextField doctorEmailTxtField;
    private javax.swing.JPanel doctorHome;
    private javax.swing.JPanel doctorHomePanel;
    private javax.swing.JButton doctorLogOutBtn;
    private javax.swing.JPanel doctorManageAppointmentsPanel;
    private javax.swing.JTextField doctorNameTxtField;
    private javax.swing.JTextField doctorPhoneTxtField;
    private javax.swing.JPasswordField doctorSetPasswordTxtField;
    private javax.swing.JTextField doctorSetUsernameTxtField;
    private javax.swing.JLabel doctorSpeciality;
    private javax.swing.JLabel doctorSpeciality1;
    private javax.swing.JTextField doctorSpecialityTxtField;
    private javax.swing.JTable doctorTable;
    private javax.swing.JPanel doctorViewPanel;
    private com.toedter.calendar.JDateChooser encounterDateChooser;
    private javax.swing.JTable encounterTable;
    private javax.swing.JRadioButton femaleRadio;
    private javax.swing.JRadioButton femaleRadio1;
    private javax.swing.JComboBox<String> hospitalComboBoxDoctor;
    private javax.swing.JComboBox<String> hospitalComboBoxPatient;
    private javax.swing.JButton hospitalDeleteBtn;
    private javax.swing.JTable hospitalTable;
    private javax.swing.JComboBox<String> houseComboBoxPatient;
    private javax.swing.JButton houseDeleteBtn;
    private javax.swing.JTable houseTable;
    private javax.swing.JButton houseUpdateBtn;
    private javax.swing.JComboBox<String> hrComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton loginBtn;
    private javax.swing.JPanel loginPage;
    private javax.swing.JButton logoutCommunityAdmin;
    private javax.swing.JRadioButton maleRadio;
    private javax.swing.JRadioButton maleRadio1;
    private javax.swing.JPanel manageCitiesPanel;
    private javax.swing.JButton manageCityBtn;
    private javax.swing.JPanel manageCommunitiesPanel;
    private javax.swing.JButton manageCommunityBtn;
    private javax.swing.JButton manageCommunityBttn;
    private javax.swing.JButton manageDoctorBtn;
    private javax.swing.JPanel manageDoctorsPanel;
    private javax.swing.JPanel manageEncounterHistory;
    private javax.swing.JButton manageHospitalBtn;
    private javax.swing.JButton manageHospitalBtnn;
    private javax.swing.JButton manageHospitalBttn;
    private javax.swing.JPanel manageHospitalsPanel;
    private javax.swing.JButton manageHouseBtn;
    private javax.swing.JPanel manageHousesPanel;
    private javax.swing.JButton managePatientBtn;
    private javax.swing.JPanel managePatientsPanel;
    private javax.swing.JButton manageProfileBtn;
    private javax.swing.JComboBox<String> minComboBox;
    private javax.swing.JRadioButton otherRadio;
    private javax.swing.JRadioButton otherRadio1;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTxtField;
    private javax.swing.JLabel patientAddressDoctorSearchLabel;
    private javax.swing.JLabel patientAgeLabel;
    private javax.swing.JLabel patientAgeLabel1;
    private javax.swing.JTextField patientAgeTxtField;
    private javax.swing.JTextField patientBloodPressureTxtField;
    private javax.swing.JTextField patientBodyTempTxtField;
    private javax.swing.JLabel patientCityLabel;
    private javax.swing.JLabel patientCommunityLabel;
    private javax.swing.JLabel patientConfirmPasswordLabel;
    private javax.swing.JLabel patientConfirmPasswordLabel1;
    private javax.swing.JPasswordField patientConfirmsPasswordTxtField;
    private javax.swing.JPanel patientControlPanel;
    private com.toedter.calendar.JDateChooser patientDOB;
    private javax.swing.JLabel patientDOBLabel;
    private javax.swing.JLabel patientDOBLabel1;
    private javax.swing.JLabel patientDetailsAgeLabel;
    private javax.swing.JLabel patientDetailsEmailLabel;
    private javax.swing.JLabel patientDetailsGenderLabel;
    private javax.swing.JLabel patientDetailsInsuranceLabel;
    private javax.swing.JLabel patientDetailsNameLabel;
    private javax.swing.JLabel patientDetailsPhoneLabel;
    private javax.swing.JTextField patientDiagnosisTxtField;
    private javax.swing.JLabel patientEmailLabel;
    private javax.swing.JLabel patientEmailLabel1;
    private javax.swing.JTextField patientEmailTxtField;
    private javax.swing.JLabel patientEncounterDate;
    private javax.swing.JButton patientEncounterSaveBtn;
    private javax.swing.JLabel patientGenderLabel;
    private javax.swing.JLabel patientGenderLabel1;
    private javax.swing.JPanel patientHome;
    private javax.swing.JButton patientHomeBtn;
    private javax.swing.JPanel patientHomePanel;
    private javax.swing.JSplitPane patientHomeSplitPane;
    private javax.swing.JLabel patientHouseLabel;
    private javax.swing.JLabel patientInsuranceLabel;
    private javax.swing.JTextField patientInsuranceTxtField;
    private javax.swing.JButton patientLogOutBtn;
    private javax.swing.JLabel patientNameLabel;
    private javax.swing.JLabel patientNameLabel1;
    private javax.swing.JTextField patientNameTxtField;
    private javax.swing.JLabel patientPasswordLabel;
    private javax.swing.JLabel patientPasswordLabel1;
    private javax.swing.JLabel patientPhoneLabel;
    private javax.swing.JLabel patientPhoneLabel1;
    private javax.swing.JLabel patientPhoneLabel2;
    private javax.swing.JTextField patientPhoneTxtField;
    private javax.swing.JTextField patientPulseTxtField;
    private javax.swing.JButton patientRegisterBtn;
    private javax.swing.JPanel patientRegistrationPage;
    private javax.swing.JTextField patientRespRateTxtField;
    private javax.swing.JPasswordField patientSetPasswordTxtField;
    private javax.swing.JTextField patientSetUsernameTxtField;
    private javax.swing.JTextField patientSymptomsTxtField;
    private javax.swing.JTable patientTable;
    private javax.swing.JLabel patientUsernameLabel;
    private javax.swing.JLabel patientUsernameLabel1;
    private javax.swing.JLabel patientViewAppointmentDetails;
    private javax.swing.JLabel patientViewBloodPressure;
    private javax.swing.JLabel patientViewBodyTemperature;
    private javax.swing.JLabel patientViewDiagnosis;
    private javax.swing.JLabel patientViewEncounterId;
    private javax.swing.JLabel patientViewEncounterTime;
    private javax.swing.JPanel patientViewPanel;
    private javax.swing.JLabel patientViewPulseRate;
    private javax.swing.JLabel patientViewRespirationRate;
    private javax.swing.JLabel patientViewSymptoms;
    private javax.swing.JLabel registrationLabel;
    private javax.swing.JLabel registrationLink;
    private javax.swing.JPanel searchDoctorPanel;
    private javax.swing.JButton searchDoctorPatientBtn;
    private javax.swing.JPanel systemAdminHome;
    private javax.swing.JPanel systemAdminHomePage;
    private javax.swing.JComboBox<String> timeComboBox;
    private javax.swing.JButton updateCityBtn;
    private javax.swing.JButton updateCityNameBtn;
    private javax.swing.JLabel updateCityNameLabel;
    private javax.swing.JTextField updateCityNameTxtField;
    private javax.swing.JButton updateCommunityBtn;
    private javax.swing.JButton updateDoctorBtn;
    private javax.swing.JButton updateHospitalBtn;
    private javax.swing.JButton updatePatientProfileBtn;
    private javax.swing.JPanel updatePatientProfilePanel;
    private javax.swing.JLabel userTypeLabel;
    private javax.swing.JComboBox<String> userTypeSelect;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTxtField;
    private javax.swing.JPanel viewAdmin;
    private javax.swing.JButton viewAppointmentDetailsBtn;
    private javax.swing.JPanel viewCommunityAdminPanel;
    private javax.swing.JLabel welcomeAdmin;
    private javax.swing.JLabel welcomeDoctor;
    private javax.swing.JLabel welcomePatient;
    private javax.swing.JLabel welcomecommunityAdmin;
    // End of variables declaration//GEN-END:variables
}
